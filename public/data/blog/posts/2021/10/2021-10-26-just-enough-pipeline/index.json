{
  "id": "2021-10-2021-10-26-just-enough-pipeline",
  "url": "/blog/2021/10/01/2021-10-26-just-enough-pipeline/",
  "title": "Use Just Enough Pipeline",
  "date": "2021-10-01",
  "authors": [
    "markewaite",
    "darinpope"
  ],
  "tags": [
    "pipeline"
  ],
  "summary": "Use just enough Pipeline to automate build, test, deploy, and administration tasks. Guidance on common Pipeline mistakes that affect controller performance and reliability.",
  "opengraph_image": "/images/post-images/2021/2021-10-26-just-enough-pipeline.png",
  "content_html": "<div class=\"paragraph\">\n<p><span class=\"image right center\"><img src=\"/images/post-images/2021/2021-10-26-just-enough-pipeline.png\" alt=\"2021 10 26 just enough pipeline\" height=\"350\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins Pipeline (or simply Pipeline with a capital P) is a suite of plugins that supports implementing and integrating continuous delivery pipelines into Jenkins.\nThis allows you to automate the process of getting software from version control through to your users and customers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline code works beautifully for its intended role of automating build, test, deploy, and administration tasks.\nBut, as it is pressed into more complex roles and unexpected uses, some users have run into snags.\nUsing best practices – and avoiding common mistakes – can help you design a pipeline that is more robust, scalable, and high-performing.</p>\n</div>\n<div class=\"paragraph\">\n<p>We see a lot of users making basic mistakes that can sabotage their pipeline.\n(Yes, you can sabotage yourself when you’re creating a pipeline.)\nIn fact, it’s easy to spot someone who is going down this dangerous path – and it’s usually because they don&#8217;t understand some key technical concepts about Pipeline.\nThis invariably leads to scalability mistakes that you’ll pay dearly for down the line.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"dont-make-this-mistake\"><a class=\"anchor\" href=\"#dont-make-this-mistake\"></a>Don’t make this mistake!</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Perhaps the biggest misstep people make is deciding that they need to write their entire pipeline in a programming language.\nAfter all, Pipeline is a domain specific language (DSL).\nHowever, that does not mean that it is a general-purpose programming language.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you treat the DSL as a general-purpose programming language, you are making a serious architectural blunder by doing the wrong work in the wrong place.\nRemember that the core of Pipeline code runs on the controller.\nSo, you should be mindful that everything you express in the Pipeline domain specific language (DSL) will compete with every other Jenkins job running on the controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>For example, it’s easy to include a lot of conditionals, flow control logic, and requests using scripted syntax in the pipeline job.\nExperience tells us this is not a good idea and can result in serious damage to pipeline performance.\nWe’ve actually seen organizations with poorly written Pipeline jobs bring a controller to its knees, while only running a few concurrent builds.</p>\n</div>\n<div class=\"paragraph\">\n<p>Wait a minute, you might ask, “Isn&#8217;t handling code what the controller is there for?”\nYes, the controller certainly is there to execute pipelines.\nBut, it&#8217;s much better to assign individual steps of the pipeline to command line calls that execute on an agent.\nSo, instead of running a lot of conditionals inside the pipeline DSL, it’s better to put those conditionals inside a shell script or batch file and call that script from the pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, this raises another question: “What if I don&#8217;t have any agents connected to my controller?”\nIf this is the case, then you&#8217;ve just made another bad mistake in scaling Jenkins pipelines.\nWhy? Because the first rule of building an effective pipeline is to make sure you use agents.\nIf you&#8217;re using a Jenkins controller and haven’t defined any agents, then your first step should be to define at least one agent and use that agent instead of executing on the controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>For the sake of maintaining scalability in your pipeline, the general rule is to avoid processing any workload on your controller.\nIf you&#8217;re running Jenkins jobs on the controller, you are sacrificing controller performance.\nSo, try to avoid using Jenkins controller capacity for things that should be passed off to an agent.\nThen, as you grow and develop, all of your work should be running agents.\nThis is why we always recommend setting the number of executors on the master to zero.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"use-just-enough-pipeline-to-keep-your-pipeline-scalable\"><a class=\"anchor\" href=\"#use-just-enough-pipeline-to-keep-your-pipeline-scalable\"></a>Use Just Enough Pipeline to Keep Your Pipeline Scalable</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>All of this serves to highlight our overarching theme of “using just enough pipeline.”\nSimply put, you want to use enough code to connect the pipeline steps and integrate tools – but no more than that.\nLimit the amount of complex logic embedded in the Pipeline itself (similarly to a shell script), and avoid treating it as a general-purpose programming language.\nThis makes the pipeline easier to maintain, protects against bugs, and reduces the load on controllers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Another best practice for keeping your pipeline lean, fast, and scalable is to use declarative syntax instead of scripted syntax for your Pipeline.\nDeclarative naturally leads you away from the kinds of mistakes we’ve just described.\nIt is a simpler expression of code and an easier way to define your job.\nIt&#8217;s computed at the startup of the pipeline instead of executing continually during the pipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p>Therefore, when creating a pipeline, start with declarative, and keep it simple for as long as possible.\nAnytime a script block shows up inside of a declarative pipeline, you should extract that block and put it in a shared library step.\nThat keeps the declarative pipeline clean.\nBy combining declarative with a shared library, that will take care of the vast majority of use cases you’ll encounter.</p>\n</div>\n<div class=\"paragraph\">\n<p>That said, it’s not accurate to say that declarative plus a shared library will solve every problem.\nThere are cases where scripted is the right solution.\nHowever, declarative is a great starting point until you discover that you absolutely must use scripted.</p>\n</div>\n<div class=\"paragraph\">\n<p>Just remember, at the end of the day, you’ll do well to follow the adage: “Use just enough pipeline and no more.”</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"thanks-to-our-sponsor\"><a class=\"anchor\" href=\"#thanks-to-our-sponsor\"></a>Thanks to our Sponsor</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Mark and Darin both work for <a href=\"https://www.cloudbees.com\">CloudBees</a>.\nCloudBees helps Fortune 1000 enterprises manage and scale Jenkins.\nThanks to CloudBees for sponsoring the creation of this blog post.</p>\n</div>\n<div class=\"paragraph\">\n<p>Mark and Darin joined Hope Lynch and Joost van der Griendt to share additional topics in a CloudBees on-demand recording, <a href=\"https://www.cloudbees.com/events/software-delivery-professional-series/optimizing-jenkins-enterprise\">\"Optimizing Jenkins for the Enterprise\"</a>.\nRegister for the on-demand recording to receive more information on configuration as code, plugin management, and Pipelines.</p>\n</div>\n</div>\n</div>"
}