{
  "id": "2021-11-2021-11-09-guava-upgrade",
  "url": "/blog/2021/11/01/2021-11-09-guava-upgrade/",
  "title": "Guava library upgrade (breaking changes!)",
  "date": "2021-11-01",
  "authors": [
    "basil"
  ],
  "tags": [
    "jenkins",
    "core",
    "developer",
    "announcement"
  ],
  "summary": "Jenkins has upgraded the Guava library to the latest version. As a result, plugins must be upgraded for compatibility.",
  "opengraph_image": "/images/post-images/2021-11-guava-upgrade/guava-upgrade-opengraph.png",
  "content_html": "<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2021-11-guava-upgrade/guava-upgrade.png\" alt=\"Guava Upgrade\"></span></p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins bundles <a href=\"https://guava.dev/\">Guava</a>, a core Java library from Google.\nBeginning with Jenkins 2.320 (released on November 10, 2021), Jenkins has upgraded the Guava library from\n<a href=\"https://github.com/google/guava/releases/tag/v11.0.1\">11.0.1</a> (released on January 9, 2012) to\n<a href=\"https://github.com/google/guava/releases/tag/v31.0.1\">31.0.1</a> (released on September 27, 2021).\nPlugins have already been prepared to support the new version of Guava in <a href=\"https://issues.jenkins.io/issues/?jql=labels%20in%20(JEP-233)\">JEP-233</a>.\n<strong>Use the Plugin Manager to upgrade all plugins before <em>and</em> after upgrading to Jenkins 2.320.</strong></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"#motivation\"></a>Motivation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Many security-conscious organizations using, or planning to use, Jenkins run off-the-shelf security scanners to look for known vulnerabilities.\nThese commonly flag the obsolete Guava library as susceptible to a serialization-related vulnerability (<a href=\"https://github.com/google/guava/wiki/CVE-2018-10237\">CVE-2018-10237</a>) and recommend upgrading.\nWhile Jenkins uses <a href=\"/blog/2018/03/15/jep-200-lts/\">JEP-200</a> to form an explicit list of allowed classes for deserialization,\nand the two Guava classes affected by CVE-2018-10237 are not and will never be added to the list,\nit is time-consuming for the <a href=\"/security/team/\">security team</a> to respond to purported security reports\nand for users to justify exemptions from policy to use Jenkins anyway.</p>\n</div>\n<div class=\"paragraph\">\n<p>Furthermore, the decade-old version of Guava has long been a maintenance burden for Jenkins developers.\nIn a world where Dependabot offers upgrades to libraries released just hours before,\nit is unpleasant to be working with dependencies that are many years old.</p>\n</div>\n<div class=\"paragraph\">\n<p>For more information, see <a href=\"https://github.com/jenkinsci/jep/blob/master/jep/233/README.adoc\">JEP-233</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"upgrading\"><a class=\"anchor\" href=\"#upgrading\"></a>Upgrading</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The vast majority of plugins have already been prepared to support the new version of Guava in <a href=\"https://issues.jenkins.io/issues/?jql=labels%20in%20(JEP-233)\">JEP-233</a>.\nJenkins users need only upgrade plugins to compatible versions as documented in the \"Released As\" field in Jira.\n<strong>It is critical to use the Plugin Manager to upgrade all plugins before <em>and</em> after upgrading to Jenkins 2.320.</strong>\nFailure to upgrade plugins to compatible versions may result in <code>ClassNotFoundException</code>, <code>NoClassDefFoundError</code>, or other low-level Java errors.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"reporting-issues\"><a class=\"anchor\" href=\"#reporting-issues\"></a>Reporting issues</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you find a regression in a plugin, please file a bug report in Jira:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://issues.jenkins.io/issues/?jql=labels%20in%20(JEP-233)%20and%20status%20not%20in%20(resolved%2C%20closed)\">Open JEP-233 issues</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>When reporting an issue, include the following information:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Use the <code>JEP-233</code> label.</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> list of installed plugins as suggested in the <a href=\"/doc/book/system-administration/diagnosing-errors/#how-to-report-a-bug\">bug reporting guidelines</a>.</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> stack trace, if relevant.</p>\n</li>\n<li>\n<p>Provide steps to reproduce the issue <em>from scratch</em> on a minimal Jenkins installation; the scenario should fail when the steps are followed on Jenkins 2.320 or later and pass when the steps are followed on Jenkins 2.319 or earlier.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>If you maintain a Jenkins plugin with an open JEP-233 issue,\nthen please check if there is a pull request awaiting merge or release.\nIf you use an unmaintained Jenkins plugin with an open JEP-233 issue,\nconsider stepping up and <a href=\"/doc/developer/plugin-governance/adopt-a-plugin/\">adopting the plugin</a> to release a compatible version.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We expect to see a bit of disruption from these changes\nbut hope that in the long run they will save time for core and plugin developers\nand lead to a more secure and stable tool.\nPlease reach out on the <a href=\"/mailing-lists/\">developers' list</a> with any questions or suggestions.</p>\n</div>\n</div>\n</div>"
}