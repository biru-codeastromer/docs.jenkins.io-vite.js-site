{
  "id": "2022-08-2022-08-05-manage-jenkins-agents-with-podtemplate",
  "url": "/blog/2022/08/01/2022-08-05-manage-jenkins-agents-with-podtemplate/",
  "title": "Manage Jenkins agents with Kubernetes native PodTemplate",
  "date": "2022-08-01",
  "authors": [
    "linuxsuren"
  ],
  "tags": [
    "casc"
  ],
  "summary": "Jenkins has great integration with Kubernetes.",
  "opengraph_image": "/images/logo-title-opengraph.png",
  "content_html": "<div class=\"paragraph\">\n<p>Jenkins has great integration with Kubernetes. No matter the controller or agents, they all work well in Kubernetes Pods.\n<a href=\"https://github.com/jenkinsci/configuration-as-code-plugin\">Configuration as Code</a> is an awesome idea.\nPeople don’t need to open the UI page of Jenkins again and again.\nWe can put all the\nsystem configuration into a git repository. You might already feel tired to edit a super huge Kubernetes YAML file if there are\nmany many Jenkins agents that need to be maintained. It’s pretty likely to make a mistake in a big YAML file.</p>\n</div>\n<div class=\"paragraph\">\n<p>I’m going to provide a solution to make our life easier maintaining Jenkins .\nYou only need to update a ConfigMap if you want to make\nany changes to the Jenkins system configuration. And you only need to create a Kubernetes native PodTemplate resource if you want\nto add a new Jenkins agent. To achieve this goal, you only need to install an extra Kubernetes deployment.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please allow me to show you how to do it. Before going forward, let’s assume you already have a Kubernetes cluster, and you have\nenough permission to access the relevant resources.</p>\n</div>\n<div class=\"paragraph\">\n<p>Firstly, put all the Jenkins system config into a ConfigMap, such as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">apiVersion: v1\ndata:\n  jenkins_user.yaml: |\n    jenkins:\n      mode: EXCLUSIVE\n      numExecutors: 0\n      scmCheckoutRetryCount: 2\n      disableRememberMe: true\n      clouds:\n        - kubernetes:\n            name: \"kubernetes\"\n            serverUrl: \"https://kubernetes.default\"\n            skipTlsVerify: true\nkind: ConfigMap\nmetadata:\n  name: jenkins-casc-config\n  namespace: kubesphere-devops-system</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Secondly, let your Jenkins load its configuration from a ConfigMap. Please see also the following important parts:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">spec:\n  template:\n    spec:\n      containers:\n      - image: ghcr.io/linuxsuren/jenkins:lts\n        env:\n        - name: CASC_JENKINS_CONFIG\n          value: \"/var/jenkins_home/casc_configs/\"          # loading config file from a directory that was mount from a ConfigMap\n        volumeMounts:\n        - mountPath: /var/jenkins_home/casc_configs\n          name: casc-config                                 # mount from a volume\n      volumes:\n      - configMap:\n          defaultMode: 420\n          name: jenkins-casc-config                         # clamin a ConfigMap volume, all the CasC YAML content will be here\n        name: casc-config</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>then, the core part is the Kubernetes controller. Please see the following code snippet:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jenkins-agent\n  namespace: kubesphere-devops-system\nspec:\n  template:\n    spec:\n      containers:\n      - image: kubespheredev/devops-controller:dev-v3.2.1-rc.3-6726130\n        name: controller\n        args:\n        - --enabled-controllers\n        - all=false,jenkinsagent=true,jenkinsconfig=true        # only enable the necessary features of this controller</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This controller will watch all the PodTemplates (containing the label <code>jenkins.agent.pod</code>), then convert it to Jenkins-style PodTemplate, merge it into\nthe CasC YAML file finally.</p>\n</div>\n<div class=\"paragraph\">\n<p>When everything is setup, you can try to add a Kubernetes native PodTemplate. A few seconds later, you can use it in your Pipeline.\nConsidering there are many potential technical details, I already put all the necessary files to <a href=\"https://github.com/devops-ws/learn-kustomization/tree/main/jenkins\">this git repository</a>.\nPlease feel free to mainain <a href=\"https://github.com/kubesphere/ks-devops/tree/master/controllers/jenkins/config\">this project</a> if it\nis helpful in your work.</p>\n</div>"
}