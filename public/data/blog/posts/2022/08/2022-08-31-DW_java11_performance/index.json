{
  "id": "2022-08-2022-08-31-DW_java11_performance",
  "url": "/blog/2022/08/01/2022-08-31-DW_java11_performance/",
  "title": "Moving Jenkins to a New Frontier of Performance with Java 11 - DevOps World 2022",
  "date": "2022-08-01",
  "authors": [
    "ryansmith303"
  ],
  "tags": [
    "events",
    "contribute",
    "performance",
    "java11",
    "devopsworld",
    "devopsworld2022"
  ],
  "summary": "It&#8217;s 2022, and the Jenkins project is approaching 18 years old, boasts over 1,800 plugins and over 1 million users around the world, and is widely considered the most popular automation server in use today. The latest hurdle we&#8217;ve cleared was delivering Java 11 support, partially motivated by Oracle&#8217;s ending of public support for Java 8 back in March ofâ€¦",
  "opengraph_image": "/images/post-images/Jenkins-DevOps.png",
  "content_html": "<div class=\"paragraph\">\n<p>It&#8217;s 2022, and the Jenkins project is approaching 18 years old, boasts over 1,800 plugins and over 1 million users around the world, and is widely considered the most popular automation server in use today.\nThe latest hurdle we&#8217;ve cleared was delivering Java 11 support, partially motivated by Oracle&#8217;s ending of public support for Java 8 back in March of 2022.</p>\n</div>\n<div class=\"paragraph\">\n<p>Starting as a <a href=\"/blog/2018/06/08/jenkins-java10-hackathon/\">hack-a-thon</a> project in 2018, the Jenkins community <a href=\"/blog/2019/03/11/let-s-celebrate-java-11-support/\">announced full support</a>\nfor Java 11 in March of 2019, and new versions of Jenkins since the <a href=\"/blog/2022/06/28/require-java-11/\">June 2022 release now require Java 11</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>So what does this mean exactly?\nWell, for starters, Java 8 was released in 2014 and had become outdated in terms of new features and security enhancements that were happening in many key third-party libraries consumed by the Jenkins project.\nThe requirements to move to Java 9, Java 10, or Java 11 were becoming more and more painful from a development standpoint.\nThis led to an <a href=\"https://www.oracle.com/java/technologies/java-se-support-roadmap.html\">unprecedented response from Oracle</a>, stating they would extend fee-based support for JDK8 into 2030.\nHowever, the benefits of moving to newer versions of Java were clear, most notably surrounding performance.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"java-memory-management\"><a class=\"anchor\" href=\"#java-memory-management\"></a>Java memory management</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>It&#8217;s one of the core tenets of the programming language, removing the complexity of memory management from the developer&#8217;s responsibilities.\nAt the core of the JVM (Java Virtual Machine) is the garbage collector.\nThe garbage collector frees up memory when objects are no longer needed, allowing space for new objects to be created.\nWhile the G1GC garbage collector is our recommended GC for Jenkins, it was not the default for Java 8.\nOnly in Java 9 and later did G1GC become default.\nNow with Java 11 there are many improvements to the G1GC collector which deliver significant gains in performance.</p>\n</div>\n<div class=\"paragraph\">\n<p>Join us at DevOps World in-person this year in Orlando, Florida, where Dylan Dewhurst and I will be presenting our learnings about the benefits of moving Jenkins from Java 8 to Java 11.\nWe will provide data showing the performance improvements this shift has brought.\nWe will showcase some experimental garbage collectors that we hope to see utilized in the next generation of JVM&#8217;s, and we will show you how to move your Jenkins instance from Java 8 to Java 11 successfully.</p>\n</div>\n<div class=\"imageblock right\">\n<div class=\"content\">\n<img src=\"/images/post-images/DW_2022.png\" alt=\"DW 2022\">\n</div>\n</div>\n</div>\n</div>"
}