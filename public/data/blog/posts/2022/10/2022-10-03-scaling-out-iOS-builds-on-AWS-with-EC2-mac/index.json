{
  "id": "2022-10-2022-10-03-scaling-out-iOS-builds-on-AWS-with-EC2-mac",
  "url": "/blog/2022/10/01/2022-10-03-scaling-out-iOS-builds-on-AWS-with-EC2-mac/",
  "title": "Scaling out iOS builds on AWS with EC2 mac",
  "date": "2022-10-01",
  "authors": [
    "xparticle"
  ],
  "tags": [
    "community",
    "contribute",
    "aws",
    "aws-ec2-mac",
    "mac",
    "iOS",
    "baremetal",
    "type-2-virtualization"
  ],
  "summary": "Scaling out iOS builds on AWS with EC2 mac Introduction The number of mobile application subscriptions are increasing annually, trending towards 8 billion and combined number of apps in the app stores are close to 6 million.",
  "opengraph_image": "/images/post-images/Jenkins-DevOps.png",
  "content_html": "<div class=\"imageblock right\">\n<div class=\"content\">\n<img src=\"/images/post-images/Jenkins-DevOps.png\" alt=\"Jenkins DevOps\">\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"scaling-out-ios-builds-on-aws-with-ec2-mac\"><a class=\"anchor\" href=\"#scaling-out-ios-builds-on-aws-with-ec2-mac\"></a>Scaling out iOS builds on AWS with EC2 mac</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h3>\n<div class=\"paragraph\">\n<p>The number of mobile application subscriptions are\n<span class=\"underline\">increasing</span> annually, trending towards 8 billion and\ncombined number of apps in the app stores are close to <span class=\"underline\">6\nmillion</span>. Mobile application development has become prevalent, not just\nfor consumer facing businesses but also with the remote workforce. Many\nlarge enterprises also support an internal app store catering to\norganization specific functionalities. As a result of this growth\ncombined with the cloud first approach, there is a need to deploy mobile\napplication development infrastructure with scale in mind from day 1.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let’s start by looking at a skeleton view of typical iOS continuous\nintegration and continuous delivery (CI/CD) pipelines. For the purpose\nof this blog, we can split it into two distinct phases, (1) Local\nIntegrated Development Environment (IDE) based design and development of\nthe iOS app which typically takes place on a macOS device, and\n(2) Building, testing, and publishing the app to the Appstore. This can\noccur on the same macOS device if it is with a a single developer\nproject, however team based development, typically runs on separate\nbuild and test infrastructure. Although some aspects of this discussion\ncan be applied to stand up a fleet of developer machines for phase 1,\nthe focus will be placed on the topic at hand which is scalable build\npipelines for the second phase.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image1.png\" alt=\"image\" width=\"622\" height=\"194\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-1: iOS Application development steps</p>\n</div>\n<div class=\"paragraph\">\n<p>Amazon EC2 Mac instances allow customers to bootstrap macOS environments\nin the cloud and use these for building, testing, signing, and\npublishing iOS applications with the security, scalability, and\nflexibility of the cloud. EC2 Mac instances are offered as bare-metal\ninstances running on top of single-tenant, Dedicated Hosts in compliance\nwith macOS licensing.</p>\n</div>\n<div class=\"paragraph\">\n<p>Integration with services like AWS Auto Scaling and AWS Systems Manager\nwith the SSM agent included in the Amazon Machine Images (AMIs), means\nthat the fundamental building blocks to facilitate automation needed for\nsetting up a CI/CD pipeline for iOS app builds is readily available. The\nAWS Partner Network (APN) is a global community of partners that\nleverages programs, expertise, and resources to build, market, and sell\ncustomer offerings. AWS Marketplace is built to accelerate innovation\navailable via the cloud while balancing the needs for speed and agility\nwith governance and control. Both software delivery automation products\nlike CI from CloudBees and virtualization solution like Anka from Veertu\nare offered on AWS Marketplace. These products work with the fundamental\nbuilding blocks to further remove the undifferentiated heavy lifting of\nscaling out the iOS app build workloads. Let’s look at the options to\nscale out build pipelines with EC2 Mac instances.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"queuing-builds-using-sqs-and-aws-systems-manager\"><a class=\"anchor\" href=\"#queuing-builds-using-sqs-and-aws-systems-manager\"></a>Queuing builds using SQS and AWS Systems Manager</h3>\n<div class=\"paragraph\">\n<p>EC2 Mac instances based AMIs have a Systems Manager agent included. This\nenables EC2 Mac instances to become a managed node under the Systems\nManager inventory. We can then use “Run Command”, a capability of AWS\nSystems Manager, to remotely and securely run automation scripts on EC2\nMac instances. In this case, we will use Run Command to execute our\nbuild scripts. Configuring the event source trigger for Run Command\ncould be achieved by a simple well-known pattern utilizing CodeCommit,\nSNS topic, SQS queue and Lambda worker as depicted below.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image2.png\" alt=\"image\" width=\"625\" height=\"272\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-2: Multiple Build Jobs invoked by SSM Agent on EC2 Mac.</p>\n</div>\n<div class=\"paragraph\">\n<p>This pattern can be extended to a fleet of EC2 Macs instances all while\nrelying on Systems Manager capabilities to retrieve the state of the\nfleet and invoke operations on individual nodes. Complex scenarios with\nmultiple build pipelines would necessitate the need for a more feature\nrich build orchestrator than the rudimentary event-based sourcing\npattern shown. For that, let’s look at what we can achieve with a\npopular automation server called Jenkins.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"orchestrating-multiple-builds-with-jenkins\"><a class=\"anchor\" href=\"#orchestrating-multiple-builds-with-jenkins\"></a>Orchestrating multiple builds with Jenkins</h3>\n<div class=\"paragraph\">\n<p>Jenkins has a powerful extension and plugin system that allows\ndevelopers to write plugins affecting nearly every aspect of Jenkins'\nbehavior. Jenkins can be run on AWS in several different ways, directly\non EC2, using ECS Fargate as serverless or even EKS. To focus more on\nthe iOS builds let’s assume a simple single node Jenkins setup running\non EC2 Linux like shown in Figure-3. Using plugins like\n<span class=\"underline\">Configuration as code</span>, <span class=\"underline\">SSH build agents</span> you\ncan define several parameters that simplifies deploying Jenkins to AWS,\nmore on this here</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image3.png\" alt=\"image\" width=\"616\" height=\"220\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-3: Multiple Build Jobs invoked by Jenkins Agent on EC2 Mac\ninstances.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins has the notion of a node, which in this case is an EC2 Mac\ninstance, and executors, think of them as multiple processes within the\nnode. If you configure the number of executors on the node as 2, you can\nin theory run two Xcode build jobs on a single EC2 Mac instance. Jenkins\nwill handle the job orchestration as well as queuing up multiple jobs\nfor each executor on the node. You can have several iOS build pipelines\nconsuming the same build infrastructure. However, once the amount of\ntime the build jobs waiting in the queue for an executor to be available\nincreases, you may want to scale out into another EC2 Mac instance.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"auto-scaling-with-ec2-mac-instances\"><a class=\"anchor\" href=\"#auto-scaling-with-ec2-mac-instances\"></a>Auto-scaling with EC2 Mac instances</h3>\n<div class=\"paragraph\">\n<p>AWS Auto Scaling lets you build scaling plans that automate how groups\nof different resources respond to changes in demand. One of the features\nincludes manual scaling operations typically used when you want an\nexternal event to make the decision of scaling up or down the number of\ninstances in the group. In the case of scaling out Jenkins iOS builds,\nthe queue depth can be one of those variables. EC2 fleet plugin has\nseveral options, including scaling up based on jobs waiting in the queue\nand scaling down when nodes are idle.</p>\n</div>\n<div class=\"paragraph\">\n<p>Adding a new launched EC2 Mac instance from the auto scaling group to\nthe Jenkins controller is achieved by either SSH-based or JNLP-based\nregistration. More on those <span class=\"underline\">here</span>. Note however\nthat EC2 Mac dedicated hosts require a 24-hour minimum allocation\nperiod, adhering to the macOS Software Licensing Agreement\n(<span class=\"underline\">SLA</span>), before they can be released.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image4.png\" alt=\"image\" width=\"620\" height=\"282\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-4: Multiple EC2 Mac instance executor nodes under an Auto Scaling\ngroup.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"type-2-virtualization-with-ec2-mac-instances\"><a class=\"anchor\" href=\"#type-2-virtualization-with-ec2-mac-instances\"></a>Type-2 virtualization with EC2 Mac instances</h3>\n<div class=\"paragraph\">\n<p>Apple Silicon and macOS has virtualization and a hypervisor framework\nbuilt into it that lets you create guest virtual machines (VM) on top of\nthe host. EC2 Mac instances are bare metal EC2 instances and will let\nyou use this virtualization features to run up to 2 guest VM’s adhering\nto the macOS SLA’s. <span class=\"underline\">Anka build</span> is one option that lets you\nleverage this granularity along with their CI/CD plugin for Jenkins to\norchestrate multiple build jobs across a fleet of EC2 Mac instances.\nAnother option is <span class=\"underline\">Tart</span> that integrates into Cirrus labs CI\nto accomplish similar goals. Here is a quick depiction on how this would\nwork from a Jenkins perspective, removing the well documented additional\ncomponents included in the individual products to make this happen.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image5.png\" alt=\"image\" width=\"622\" height=\"442\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-4: Type-2 virtualization enabling two guest virtual machines on\nEC2 Mac.</p>\n</div>\n<div class=\"paragraph\">\n<p>An example of how to combine the benefits of these several layers of\nscale out from AWS Autoscaling and macOS type-2 virtualization into one\ncohesive build fleet is illustrated in the diagram below.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-30-scaling-out-iOS-builds-on-AWS-with-EC2-mac/image6.png\" alt=\"image\" width=\"615\" height=\"291\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Figure-5: Combining all scale-out options together.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion:</h3>\n<div class=\"paragraph\">\n<p>In this blog post we have walked through several options available to\nscale out iOS builds using Amazon EC2 Mac instances. We have also looked\nat the integration options available with a popular automation tool,\nJenkins. Several of the options discussed here are implemented as\nsolutions published by AWS with links available in the reference section\nfor further reading.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"references\"><a class=\"anchor\" href=\"#references\"></a>References</h3>\n<div class=\"paragraph\">\n<p>Refer to these individual articles to dive deep into the many aspects\nand options discussed in this blog and some more.</p>\n</div>\n<div class=\"paragraph\">\n<p>Anka Type-2 virtualization: <a href=\"https://aws.amazon.com/blogs/compute/getting-started-with-anka-on-ec2-mac-instances/\" class=\"bare\">https://aws.amazon.com/blogs/compute/getting-started-with-anka-on-ec2-mac-instances/</a></p>\n</div>\n<div class=\"paragraph\">\n<p>SQS based build agent: <a href=\"https://github.com/sebsto/swift-build-agent-sqs\" class=\"bare\">https://github.com/sebsto/swift-build-agent-sqs</a></p>\n</div>\n<div class=\"paragraph\">\n<p>iOS pipeline with ec2 mac: <a href=\"https://aws.amazon.com/blogs/compute/unify-your-ios-mobile-app-ci-cd-pipeline-with-amazon-ec2-mac-instances-2/\" class=\"bare\">https://aws.amazon.com/blogs/compute/unify-your-ios-mobile-app-ci-cd-pipeline-with-amazon-ec2-mac-instances-2/</a></p>\n</div>\n<div class=\"paragraph\">\n<p>TeamCity: <a href=\"https://aws.amazon.com/blogs/apn/implementing-macos-build-agents-into-teamcity-using-amazon-ec2-mac-instances/\" class=\"bare\">https://aws.amazon.com/blogs/apn/implementing-macos-build-agents-into-teamcity-using-amazon-ec2-mac-instances/</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Auto-scaling: <a href=\"https://aws.amazon.com/blogs/compute/implementing-autoscaling-for-ec2-mac-instances/\" class=\"bare\">https://aws.amazon.com/blogs/compute/implementing-autoscaling-for-ec2-mac-instances/</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Virtualbuddy: <a href=\"https://github.com/insidegui/VirtualBuddy\" class=\"bare\">https://github.com/insidegui/VirtualBuddy</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Tart: <a href=\"https://github.com/cirruslabs/tart\" class=\"bare\">https://github.com/cirruslabs/tart</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Ec2-macos-init: <a href=\"https://github.com/aws/ec2-macos-init\" class=\"bare\">https://github.com/aws/ec2-macos-init</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Harness: <a href=\"https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/define-macos-build-infra-with-anka-registry/\" class=\"bare\">https://developer.harness.io/docs/continuous-integration/use-ci/set-up-build-infrastructure/vm-build-infrastructure/define-macos-build-infra-with-anka-registry/</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Fastlane: <a href=\"https://docs.fastlane.tools/\" class=\"bare\">https://docs.fastlane.tools/</a></p>\n</div>\n</div>\n</div>\n</div>"
}