{
  "id": "2022-06-2022-06-28-require-java-11",
  "url": "/blog/2022/06/01/2022-06-28-require-java-11/",
  "title": "Jenkins requires Java 11 or newer",
  "date": "2022-06-01",
  "authors": [
    "basil"
  ],
  "tags": [
    "announcement",
    "core",
    "developer",
    "jenkins",
    "platform-sig"
  ],
  "summary": "Beginning with Jenkins 2.357, Jenkins requires Java 11.",
  "opengraph_image": "/images/post-images/2022-06-require-java-11/jenkins-requires-java-11.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><span class=\"image right center\"><img src=\"/images/post-images/2022-06-require-java-11/jenkins-requires-java-11.png\" alt=\"Jenkins requires Java 11\" width=\"400px\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The Jenkins project is committed to delivering a world-class platform experience for end users and developers alike.\nAt the core of this experience is <a href=\"https://www.java.com/\">Java</a>, an <a href=\"https://dl.acm.org/doi/10.1145/154766.155364\">object-oriented</a> programming language with a cross-platform runtime in the form of the <a href=\"https://en.wikipedia.org/wiki/Java_virtual_machine\">Java virtual machine (JVM)</a>.\nSince its inception, the Jenkins project has been a major consumer of Java, distributing over 1,800 plugins to an installed base of over 300,000 controllers,\nand Jenkins regularly appears on <a href=\"https://blogs.oracle.com/javamagazine/post/the-top-25-greatest-java-apps-ever-written\">lists of the top Java applications of all time</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Beginning with Jenkins 2.357 (released on June 28, 2022) and the forthcoming 2.361.1 LTS release, Jenkins requires Java 11 or newer.</strong>\nAdditionally, beginning with Jenkins 2.355 (released on June 14, 2022) and Jenkins 2.346.1 LTS (released on June 22, 2022), Jenkins supports Java 17.\nPlugins have already been prepared in <a href=\"https://issues.jenkins.io/browse/JENKINS-68446\">JENKINS-68446</a>.\n<strong>Use the Plugin Manager to upgrade all plugins before <em>and</em> after upgrading to Jenkins 2.357.</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>Long-time Jenkins users and Java developers may recall previous migrations to Java 7 and Java 8.\nWhile these migrations were not trivial, they pale in comparison to the magnitude of the migration to Java 9 and beyond.\nJava 9 represents a <a href=\"https://en.wikipedia.org/wiki/Sea_change_(idiom)\">sea change</a> in the Java ecosystem across many dimensions.\nNot only are there changes to licensing policies, versioning schemes, release cadences, and long-term support (LTS) cycles,\nbut also there are a number of significant technical changes to the language and runtime (e.g., <a href=\"https://openjdk.org/projects/jigsaw/\">Project Jigsaw</a>),\nnot all of them retaining the high levels of compatibility that characterized previous releases.\nAlthough these evolutionary changes are likely to be in the best interests of the Java community in the long term,\nit is nevertheless incumbent on the community to be aware of the impact and to plan accordingly.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post, we will discuss the Jenkins project's migration to Java 11 and Java 17,\nreflecting on it in the context of previous Java migrations within the Jenkins project and the Java community more broadly.\nWe will summarize the benefits and risks and describe the upgrade process.\nFinally, we will share a glimpse at what is coming in future releases.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"history\"><a class=\"anchor\" href=\"#history\"></a>History</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Since its inception in 2005, the Jenkins (then Hudson) project has gone through a number of Java migrations.\nTo a large degree, the present migration is consistent with historical precedent within the Jenkins project.\nFor years the Jenkins project has published <a href=\"http://stats.jenkins.io\">anonymous usage statistics</a>,\nas described in <a href=\"https://brokenco.de/2019/05/23/jenkins-usage-stats.html\">a piece by R. Tyler Croy</a> and <a href=\"https://github.com/jenkins-infra/jenkins-usage-stats\">recently revised by Andrew Bayer</a>,\nwhich enable us to quantify past and present trends.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"data\"><a class=\"anchor\" href=\"#data\"></a>Data</h3>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-06-require-java-11/jvms.png\" alt=\"JVMS by Date\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"analysis\"><a class=\"anchor\" href=\"#analysis\"></a>Analysis</h3>\n<div class=\"paragraph\">\n<p>The above data reveals that the lifecycle of each major Java version is clearly a Gaussian function.\nEach major version of Java is released by the vendor,\nbegins a phase of rapidly growing adoption,\nreaches a usage peak,\nloses support from the Jenkins project,\nbegins a decline in usage,\ndeclines in usage to a terminal state,\nand finally reaches vendor end-of-life (EOL),\nin roughly that order.</p>\n</div>\n<table class=\"tableblock frame-all grid-all stretch\">\n<colgroup>\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n<col style=\"width: 20%;\">\n</colgroup>\n<thead>\n<tr>\n<th class=\"tableblock halign-left valign-top\"></th>\n<th class=\"tableblock halign-left valign-top\">Java 6</th>\n<th class=\"tableblock halign-left valign-top\">Java 7</th>\n<th class=\"tableblock halign-left valign-top\">Java 8</th>\n<th class=\"tableblock halign-left valign-top\">Java 11</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Vendor release date</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">December 11, 2006</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">July 7, 2011</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">March 18, 2014</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">September 25, 2018</p></td>\n</tr>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Rapid adoption</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">October 2009<br>\n(11,193 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">February 2013<br>\n(10,997 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">February 2015<br>\n(12,210 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">November 2019<br>\n(10,094 installations)</p></td>\n</tr>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Peak usage</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">March 2013<br>\n(47,244 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">June 2015<br>\n(68,681 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">February 2021<br>\n(261,468 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">N/A</p></td>\n</tr>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Jenkins weeklies require next major version</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">May 2015<br>\n(21,798 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">April 2017<br>\n(40,569 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">June 2022<br>\n(185,286 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">N/A</p></td>\n</tr>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Terminal decline in usage</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">May 2016<br>\n(10,283 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">March 2019<br>\n(10,123 installations)</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">N/A</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">N/A</p></td>\n</tr>\n<tr>\n<th class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">Vendor End of Life (EOL)</p></th>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">December 31, 2015</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\">July 31, 2019</p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a href=\"https://adoptium.net/support/\">At least November 2026</a></p></td>\n<td class=\"tableblock halign-left valign-top\"><p class=\"tableblock\"><a href=\"https://adoptium.net/support/\">At least October 2024</a></p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"paragraph\">\n<p>Extrapolating further, one can observe the following trends:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>It takes at least a year for Jenkins users to begin to adopt a new release of Java.</p>\n</li>\n<li>\n<p>Once Jenkins users begin to adopt a new version of Java, usage of the preceding Java version eventually reaches a peak and begins to decline.</p>\n</li>\n<li>\n<p>The Jenkins project has historically started requiring a new Java version roughly halfway through the period of decline of the preceding Java version.</p>\n</li>\n<li>\n<p>Once Jenkins requires a given Java version, usage of the preceding Java version continues to decline until it reaches a terminal stage of decline.</p>\n</li>\n<li>\n<p>The abovementioned terminal stage of decline typically correlates with the end of active support from the Java vendor.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h3>\n<div class=\"paragraph\">\n<p>Critically, the Jenkins project has never required a given version of Java until the preceding version is clearly declining in usage.\nThis reduces risk by ensuring that the majority of users are successfully running the new version in production.\nConversely, the requirement of a new Java version for Jenkins users incentivizes the remaining users to upgrade\nand prevents users who are reluctant to upgrade from putting the project at risk by continuing to rely on a version that is reaching vendor end-of-life (EOL).</p>\n</div>\n<div class=\"paragraph\">\n<p>The requirement for Java 11 is consistent with historical precedent.\nUsage of Java 8 peaked in February 2021 and has been declining since then.\nMeanwhile, adoption of Java 11 has been increasing rapidly since November 2019 but has not yet reached a peak.\nThe time is right to require Java 11.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"a-new-era-for-java\"><a class=\"anchor\" href=\"#a-new-era-for-java\"></a>A new era for Java</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The release of Java 9 heralded a new era in the evolution of the Java Platform.\nIn addition to new features (e.g., <a href=\"https://openjdk.org/projects/jigsaw/\">Project Jigsaw</a>), it introduced a new versioning scheme and release cadence.\nOriginally, there was a new major version released every few years.\nAfter Java 9, the release schedule changed to a new major version every six (6) months, with a Long Term Support (LTS) release of Java selected every few major versions.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"java-8-forever-always\"><a class=\"anchor\" href=\"#java-8-forever-always\"></a>Java 8, Forever & Always?</h3>\n<div class=\"paragraph\">\n<p>Members of the Jenkins community, spearheaded by Oleg Nenashev, <a href=\"/blog/2018/06/08/jenkins-java10-hackathon/\">began working on Java 11 support in 2018</a>.\nAt the time, Java 9, 10, and 11 had not yet achieved significant levels of adoption.\nIn <a href=\"https://engineering.linkedin.com/blog/2022/linkedin-s-journey-to-java-11\">a piece on LinkedIn's journey to Java 11</a>, Jesse Jie provides the following anecdote:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\nAs an anecdote, some sessions at the Oracle Code One conference in late 2019 asked attendees if their products were using Java 9 or higher\nto which only about 20% of the room said that they were; few major companies had adopted Java 11 either.\n</blockquote>\n<div class=\"attribution\">\n— Jesse Jie\n</div>\n</div>\n<div class=\"paragraph\">\n<p>These observations match our own experience in the Jenkins project.\nMany users are choosing to stay on Java 8, and Java vendors are responding in turn by extending support for Java 8:\nto May 2026 (in the case of <a href=\"https://adoptium.net/support/\">Adoptium</a>, <a href=\"https://aws.amazon.com/corretto/faqs/\">Amazon Corretto</a>, and <a href=\"https://www.ibm.com/support/pages/semeru-runtimes-support\">IBM Semeru</a>) and to December 2030 (in the case of <a href=\"https://www.azul.com/products/azul-support-roadmap/\">Azul</a> and <a href=\"https://www.oracle.com/java/technologies/java-se-support-roadmap.html\">Oracle</a>).\nThis is an unprecedented level of support for a version of Java originally released in 2014.</p>\n</div>\n<div class=\"paragraph\">\n<p>While the Jenkins project could remain on Java 8 for the foreseeable future, this would be imprudent for several reasons.\nFirst, many key third-party libraries consumed by the Jenkins project (e.g., <a href=\"https://www.eclipse.org/jetty/\">Jetty</a>, <a href=\"https://www.eclipse.org/jgit/\">JGit</a>, <a href=\"https://spring.io/blog/2021/09/02/a-java-17-and-jakarta-ee-9-baseline-for-spring-framework-6\">Spring Framework</a>, and <a href=\"https://spring.io/projects/spring-security\">Spring Security</a>) are beginning to require newer versions of Java,\nand staying on Java 8 puts the Jenkins project at risk of eventually not being able to receive security updates from upstream projects.</p>\n</div>\n<div class=\"paragraph\">\n<p>Furthermore, significant runtime improvements have been made to the Java Platform in recent years.\nFor example, LinkedIn saw <a href=\"https://engineering.linkedin.com/blog/2022/linkedin-s-journey-to-java-11\">drastic performance improvements</a> when migrating to Java 11,\nand Adoptium saw <a href=\"https://twitter.com/sxaTech/status/1537764804416380929\">significant memory usage improvements</a> when migrating to Java 11 (on Jenkins, no less!).\nRecent Java runtimes provide a number of improvements to <a href=\"https://www.cs.cmu.edu/~fp/courses/15411-f07/misc/gc-survey.pdf\">garbage collection</a>, among other areas.</p>\n</div>\n<div class=\"paragraph\">\n<p>Finally, Jenkins takes pride in its strong development community, and staying on a current version of Java helps attract and retain developers.\nAs one developer put it in <a href=\"https://groups.google.com/g/jenkinsci-dev/c/sw_WepGw0Pk/m/L_UN2jWUXW4J\">a 2015 mailing list post</a>:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\nIn the context of recruiting (OSS) developers, I think Java moves slowly enough (especially cf. C#) to damage its mindshare\nwithout additionally making it all less fun by making everyone act like a corporate IT developer stuck on an obsolete platform.\nThat just drives people to work on CI systems that don't have that constraint.\n</blockquote>\n<div class=\"attribution\">\n— Nigel Magnay\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"trouble-with-jaxb\"><a class=\"anchor\" href=\"#trouble-with-jaxb\"></a>Trouble with JAXB</h3>\n<div class=\"paragraph\">\n<p>Prior to Java 11, <a href=\"https://github.com/eclipse-ee4j/jaxb-ri\">Java Architecture for XML Binding (JAXB)</a> was part of the Java Platform, and one could use it without adding a third-party dependency.\nBeginning with Java 11, JAXB is no longer a part of the Java Platform and requires adding a third-party dependency.\nThanks to work done several years ago by Baptiste Mathus and others, <a href=\"https://plugins.jenkins.io/jaxb/\">a JAXB Jenkins plugin is available</a>,\nwhich provides the JAXB library to Jenkins plugins in the form of a plugin-to-plugin dependency.</p>\n</div>\n<div class=\"paragraph\">\n<p>The vast majority of plugins have already been prepared to support Java 11 via the JAXB plugin in <a href=\"https://issues.jenkins.io/browse/JENKINS-68446\">JENKINS-68446</a>.\nJenkins users need only upgrade plugins to compatible versions as documented in the <strong>Released As</strong> field in Jira.\n<strong>It is critical to use the Plugin Manager to upgrade all plugins before <em>and</em> after upgrading to Jenkins 2.357.</strong>\nFailure to upgrade plugins to compatible versions may result in <code>ClassNotFoundException</code>, <code>NoClassDefFoundError</code>, or other low-level Java errors.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"dr-openjdk-or-how-i-learned-to-stop-worrying-and-love-java-9-and-beyond\"><a class=\"anchor\" href=\"#dr-openjdk-or-how-i-learned-to-stop-worrying-and-love-java-9-and-beyond\"></a>Dr. OpenJDK or: How I Learned to Stop Worrying and Love Java 9 and Beyond</h3>\n<div class=\"paragraph\">\n<p>The world of Java development was shaken in 2019 when Oracle changed the licensing policy for Java 8.\nRecent years have seen the proliferation of a number of different Java vendors:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://adoptium.net/\">Adoptium</a> (then <a href=\"https://adoptopenjdk.net/\">AdoptOpenJDK</a>)</p>\n</li>\n<li>\n<p><a href=\"https://aws.amazon.com/corretto/\">Amazon Corretto</a></p>\n</li>\n<li>\n<p><a href=\"https://www.azul.com/products/core/\">Azul Platform Core</a> (then Zulu)</p>\n</li>\n<li>\n<p><a href=\"https://bell-sw.com/pages/downloads/\">BellSoft Liberica JDK</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.ibm.com/languages/java/semeru-runtimes/\">IBM Semeru</a></p>\n</li>\n<li>\n<p><a href=\"https://www.microsoft.com/openjdk\">Microsoft OpenJDK</a></p>\n</li>\n<li>\n<p><a href=\"https://www.oracle.com/java/\">Oracle Java</a></p>\n</li>\n<li>\n<p><a href=\"https://developers.redhat.com/products/openjdk/download\">Red Hat OpenJDK</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Yes, even Microsoft now has a build of OpenJDK.</p>\n</div>\n<div class=\"paragraph\">\n<p>The presence of so many options can be initially daunting.\nIn recent years, the Jenkins project has been using and recommending Adoptium/Eclipse Temurin,\nwhich is the Java vendor used in <a href=\"https://hub.docker.com/r/jenkins/jenkins/\">the official Jenkins Docker images</a> and the Java vendor used to power the <a href=\"/projects/infrastructure/\">Jenkins project's infrastructure</a>.\nReciprocally, we are also pleased to note that Adoptium builds are done with Jenkins.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"java-11-vs-java-17\"><a class=\"anchor\" href=\"#java-11-vs-java-17\"></a>Java 11 vs. Java 17</h3>\n<div class=\"paragraph\">\n<p>At the center of the vast majority of the abovementioned Java distributions is the <a href=\"https://openjdk.org/\">OpenJDK</a> project, which brings us to our final point.\nThroughout the development of this project, we repeatedly encountered issues that were resolved in Java 17 but not yet backported to Java 11.\nAs good citizens of the open source community, we <a href=\"https://github.com/openjdk/jdk11u-dev/pulls?q=author%3Abasil\">contributed backports where applicable for the benefit of Jenkins users and the broader Java community</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Java 17 support in Jenkins is brand new, and it has not yet reached a stage of rapid adoption within the Jenkins community.\nNevertheless, our experience has been that Java 17 is usually a more reliable choice than Java 11.\nWe enthusiastically invite the Jenkins community to begin adopting Java 17,\nand we can say with confidence that the migration from Java 11 to Java 17 will not be nearly as painful as the migration from Java 8 to Java 11.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"upgrading-to-java-11-or-17\"><a class=\"anchor\" href=\"#upgrading-to-java-11-or-17\"></a>Upgrading to Java 11 or 17</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"order-of-operations\"><a class=\"anchor\" href=\"#order-of-operations\"></a>Order of operations</h3>\n<div class=\"paragraph\">\n<p>Beginning with Jenkins 2.357 (released on June 28, 2022) and the forthcoming 2.361.1 LTS release,\nJenkins requires Java 11 or newer on both the controller JVM (i.e., the JVM running <code>jenkins.war</code>) and agent JVMs (i.e., JVMs running <code>remoting.jar</code>).</p>\n</div>\n<div class=\"paragraph\">\n<p>This does not imply that you need to build your application with the same version of Java.\nYou can continue to use any desired JDK to build your application,\nso long as the JVM used for running Jenkins itself is version 11 or newer.\nFor example, the Global Tool Configuration page can still be used to provide a JDK 8 installation for building your application.\nSimilarly, you can set up ephemeral or static agents with two installations of Java:\nJava 11 or newer to run <code>remoting.jar</code> for Jenkins and Java 8 to build your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>Since Jenkins 2.296, we have been recommending that users run the controller on Java 11.\nPrior to Jenkins 2.357 and Jenkins 2.361.1, running the controller on Java 11 and agents on Java 8, though not recommended, did not result in errors.\nBeginning with Jenkins 2.357 and Jenkins 2.361.1, running the controller on Java 11 and agents on Java 8 will result in the following error:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>Error: A JNI error has occurred, please check your installation and try again\nException in thread \"main\" java.lang.UnsupportedClassVersionError: hudson/remoting/Launcher has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0\n\tat java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:756)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:473)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:418)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:351)\n\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:601)</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Therefore, it is critical to upgrade both the controller <em>and</em> agents to Java 11 or newer prior to upgrading Jenkins to 2.357 or 2.361.1.\nUse the <a href=\"https://plugins.jenkins.io/versioncolumn/\">Versions Node Monitors</a> plugin to verify that agents are running a compatible version of Java.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"docker-images\"><a class=\"anchor\" href=\"#docker-images\"></a>Docker images</h3>\n<div class=\"paragraph\">\n<p>The official Jenkins Docker images for <a href=\"https://hub.docker.com/r/jenkins/jenkins/\">the controller</a> and <a href=\"https://hub.docker.com/r/jenkins/inbound-agent/\">agents</a> have been based on Java 11 for many months,\nwith Java 8 available as a fallback and Java 17 available in preview mode.\nBeginning with Jenkins 2.357, the Java 8 images will be retired and the Java 17 images will transition from preview to general availability (GA).\nUsers of the official Jenkins Docker images need not install or configure Java on their own, as it comes preinstalled in the image.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are using a Docker image to run both the agent Java process (i.e., <code>remoting.jar</code>) and your own application build and your application build still requires Java 8,\nyou will need to provide a Java 11 or newer runtime for the Jenkins agent process and a Java 8 environment for your application build.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"os-packages\"><a class=\"anchor\" href=\"#os-packages\"></a>OS packages</h3>\n<div class=\"paragraph\">\n<p>Users of the <a href=\"/download/\">official Jenkins OS packages for Debian, Red Hat, and SUSE Linux distributions</a> should note that these packages are agnostic to the Java vendor.\nIn other words, you must bring your own Java package.\nOne straightforward way to do this is to install Java 11 from your Linux distribution, as described on the package download site:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/debian/\">Debian</a></dt>\n<dd>\n<p><code>apt-get install fontconfig openjdk-11-jre</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/redhat/\">Red Hat</a></dt>\n<dd>\n<p><code>yum install fontconfig java-11-openjdk</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/opensuse/\">openSUSE</a></dt>\n<dd>\n<p><code>zypper install dejavu-fonts fontconfig java-11-openjdk</code></p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>By virtue of not requiring any custom repositories, this is certainly the simplest method (and the one used by the Jenkins project's <a href=\"https://github.com/jenkinsci/packaging/tree/f7c48c9bdc39bce6a8259403d97b0ce337084a37/molecule/default\">packaging tests</a>),\nbut it does not give the user a high degree of control over the Java runtime environment.\nAs mentioned previously, the official Jenkins Docker images use Adoptium/Eclipse Temurin (as does the Jenkins infrastructure project).\nEnthusiastic users may wish to install Java from Adoptium or another vendor.\nAdoptium recently began providing Linux installation packages, as described in <a href=\"https://blog.adoptium.net/2021/12/eclipse-temurin-linux-installers-available/\">a piece by George Adams</a>.\nUltimately, the choice of which Java vendor to use is your own, as long as that vendor provides Java 11 or Java 17.\nRefer to your chosen Java vendor for installation instructions.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you have installed a suitable version of Java, configure Jenkins to use that Java runtime.\nThe most straightforward way is to configure that version of Java as the default version of Java at the operating system (OS) level:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/debian/\">Debian</a></dt>\n<dd>\n<p><code>update-alternatives --config java</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/redhat/\">Red Hat</a></dt>\n<dd>\n<p><code>alternatives --config java</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/opensuse/\">openSUSE</a></dt>\n<dd>\n<p><code>update-alternatives --config java</code></p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, users who do not wish to change the default version of Java can customize the <code>JAVA_HOME</code> or <code>JENKINS_JAVA_CMD</code> environment variable as part of the Jenkins <code>systemd(1)</code> service unit.\nRefer to the <a href=\"/doc/book/system-administration/systemd-services/\">Managing systemd services</a> section of the Jenkins documentation for more information.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"garbage-collection-options\"><a class=\"anchor\" href=\"#garbage-collection-options\"></a>Garbage collection options</h3>\n<div class=\"paragraph\">\n<p>Users who have customized Java garbage collection options should note that these options have changed in recent versions of Java.\nRefer to the following <a href=\"https://support.cloudbees.com/hc/en-us/articles/222446987-Prepare-Jenkins-for-Support\">CloudBees Support article</a> for the recommended garbage collection options for Java 11:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>-XX:+AlwaysPreTouch\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath=${PATH}\n-XX:+UseG1GC\n-XX:+UseStringDeduplication\n-XX:+ParallelRefProcEnabled\n-XX:+DisableExplicitGC\n-XX:+UnlockDiagnosticVMOptions\n-XX:+UnlockExperimentalVMOptions\n-Xlog:gc*=info,gc+heap=debug,gc+ref*=debug,gc+ergo*=trace,gc+age*=trace:file=${PATH}/gc.log:utctime,pid,level,tags:filecount=2,filesize=100M\n-XX:ErrorFile=${PATH}/hs_err_%p.log\n-XX:+LogVMOutput\n-XX:LogFile=${PATH}/jvm.log</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThese options are explained in-depth in the <a href=\"https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE\">Oracle Java documentation</a> as well as the <a href=\"https://docs.cloudbees.com/docs/admin-resources/latest/jvm-troubleshooting/\">CloudBees Jenkins JVM guide</a>.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"reporting-issues\"><a class=\"anchor\" href=\"#reporting-issues\"></a>Reporting issues</h3>\n<div class=\"paragraph\">\n<p>If you find a regression in a plugin, please file a bug report in Jira:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-67688\">JENKINS-67688: Java 11 Phase 5: Require Java 11 or newer</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>When reporting an issue, include the following information:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Use the <a href=\"https://issues.jenkins.io/browse/JENKINS-67688\">JENKINS-67688</a> epic.</p>\n</li>\n<li>\n<p>Provide the output of <code>java -version</code> (e.g., OpenJDK 64-Bit Server VM build 11.0.15+10-Ubuntu-0ubuntu0.22.04.1)</p>\n</li>\n<li>\n<p>Provide the name, version, and architecture of the operating system you are using (e.g., Ubuntu 20.04.4 LTS x86_64).</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> list of installed plugins as suggested in the <a href=\"/doc/book/system-administration/diagnosing-errors/#how-to-report-a-bug\">bug reporting guidelines</a>.</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> stack trace, if relevant.</p>\n</li>\n<li>\n<p>Provide steps to reproduce the issue <em>from scratch</em> on a minimal Jenkins installation; the scenario should fail on Jenkins 2.356 or earlier when the steps are followed on Java 11 or Java 17 and pass when the steps are followed on Java 8.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"future-work\"><a class=\"anchor\" href=\"#future-work\"></a>Future work</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We expect to see usage of Java 11 continue to grow until it reaches a peak.\nWe expect to see usage of Java 8 continue to decline until it reaches a terminal state, as was the case for Java 7 and Java 6.\nWe expect to see usage of Java 17 transition from minimal levels to significant levels.\nTo reach our goal of Java 17 as the recommended Java version, we need cooperation from both Jenkins users and contributors alike.\nThe development work for Java 17 support is tracked in the following Jira epics:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-67908\">JENKINS-67908: Java 17 Phase 1: Support Java 17</a></p>\n</li>\n<li>\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-67909\">JENKINS-67909: Java 17 Phase 2: Deprecate support for Java 11</a></p>\n</li>\n<li>\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-67907\">JENKINS-67907: Java 17 Phase 3: Require Java 17 or newer</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>If you have made it this far through this post, you are clearly enthusiastic about the Jenkins platform experience.\nIf you have never contributed, why not?\nWe would love to work with you.\nJoin one of our <a href=\"/sigs/platform/\">Platform Special Interest Group (SIG)</a> meetings to learn more.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion-2\"><a class=\"anchor\" href=\"#conclusion-2\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We expect to see a bit of disruption from these changes but hope that in the long term they will be in the best interests of the Jenkins community.\nPlease reach out on the <a href=\"/mailing-lists/\">developers' list</a> with any questions or suggestions.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"acknowledgments\"><a class=\"anchor\" href=\"#acknowledgments\"></a>Acknowledgments</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As noted above, members of the Jenkins community began working on Java 11 support in 2018, well before the present author's involvement in the project\nand well beyond the present author's ability to identify and name everyone who was involved in the effort.\nIn addition to the many plugin maintainers who merged and released JAXB fixes in a timely fashion,\nwe would like to thank the following regular contributors for their recent efforts:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Adrien Lecharpentier</p>\n</li>\n<li>\n<p>Alexander Brandes</p>\n</li>\n<li>\n<p>Alex Earl</p>\n</li>\n<li>\n<p>Andrew Bayer</p>\n</li>\n<li>\n<p>Baptiste Mathus</p>\n</li>\n<li>\n<p>Carroll Chiou</p>\n</li>\n<li>\n<p>Damien Duportal</p>\n</li>\n<li>\n<p>Daniel Beck</p>\n</li>\n<li>\n<p>Devin Nusbaum</p>\n</li>\n<li>\n<p>Dr. Ullrich Hafner</p>\n</li>\n<li>\n<p>Jesse Glick</p>\n</li>\n<li>\n<p>Kevin Martens</p>\n</li>\n<li>\n<p>Mark Waite</p>\n</li>\n<li>\n<p>Oleg Nenashev</p>\n</li>\n<li>\n<p>Olivier Lamy</p>\n</li>\n<li>\n<p>Tim Jacomb</p>\n</li>\n<li>\n<p>Vincent Latombe</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Thank you! It would not have been possible without you.</p>\n</div>\n</div>\n</div>"
}