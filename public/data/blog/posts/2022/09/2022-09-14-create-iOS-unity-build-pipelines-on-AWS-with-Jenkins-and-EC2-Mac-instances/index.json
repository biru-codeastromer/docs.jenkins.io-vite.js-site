{
  "id": "2022-09-2022-09-14-create-iOS-unity-build-pipelines-on-AWS-with-Jenkins-and-EC2-Mac-instances",
  "url": "/blog/2022/09/01/2022-09-14-create-iOS-unity-build-pipelines-on-AWS-with-Jenkins-and-EC2-Mac-instances/",
  "title": "Create iOS Unity build pipelines on AWS with Jenkins and EC2 Mac instances",
  "date": "2022-09-01",
  "authors": [
    "kursonsk",
    "glenduca"
  ],
  "tags": [
    "contributor-summit",
    "events",
    "community",
    "contribute",
    "devopsworld2022",
    "aws",
    "game-development",
    "mac",
    "aws-ec2-mac",
    "mac"
  ],
  "summary": "Create iOS Unity build pipelines on AWS with Jenkins and EC2 Mac instances Every mobile game, whether it is a multiplayer or standalone game, must build binaries. Developers of high budget, high profile AAA and AA games tend to lean towards managing a build farm, whereas independent developers (indies) may rely on local or third-party solutions. Managing compute infrastructure is…",
  "opengraph_image": "/images/post-images/Jenkins-DevOps.png",
  "content_html": "<div class=\"imageblock right\">\n<div class=\"content\">\n<img src=\"/images/post-images/Jenkins-DevOps.png\" alt=\"Jenkins DevOps\">\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"create-ios-unity-build-pipelines-on-aws-with-jenkins-and-ec2-mac-instances\"><a class=\"anchor\" href=\"#create-ios-unity-build-pipelines-on-aws-with-jenkins-and-ec2-mac-instances\"></a>Create iOS Unity build pipelines on AWS with Jenkins and EC2 Mac instances</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Every mobile game, whether it is a multiplayer or standalone game, must\nbuild binaries. Developers of high budget, high profile AAA and AA games\ntend to lean towards managing a build farm, whereas independent\ndevelopers (indies) may rely on local or third-party solutions. Managing\ncompute infrastructure is a time consuming and ongoing task for many\ncompanies and developers, especially in relation to iOS builds, which\nrequire applications to be signed before submission to the App Store.\nGiven the overhead required to run and maintain a local build\nenvironment, it rarely makes sense to maintain physical build farms for\nmany teams.</p>\n</div>\n<div class=\"paragraph\">\n<p>Amazon EC2 Mac instances launched at re:Invent 2020, introduced macOS as\na supported instance type for the first time. Later in 2022, Apple\nM1-based Mac instances were released, enabling Apple silicon in the\ncloud alongside the x86 architecture. Today, EC2 Mac instances are being\nleveraged by thousands of customers today to build and run their macOS\nworkloads on the AWS cloud. By using EC2 Mac instances in combination\nwith EC2 Spot instances and Jenkins CI/CD, Unity developers were able to\nbuild scalable, cost efficient, and fast iOS pipelines for building,\ntesting, signing, and publishing to the App Store.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this blog post, we discover how to build a scalable and\ncost-efficient iOS build pipeline on AWS that can be deployed within\nhours.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"overview-of-solution\"><a class=\"anchor\" href=\"#overview-of-solution\"></a>Overview of solution</h3>\n<div class=\"paragraph\">\n<p>This solution is possible due to Unity`s ability to split a build\nprocess into two parts:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Xcode Project preparation: a first phase involving processing\ncompute-intensive images, videos, music, and compiling additional\nassets.</p>\n</li>\n<li>\n<p>Xcode Build, packaging, and signature: the second and final phase of\nbuilding an iOS app which must be done using macOS, an EC2 Mac instance\nin our solution.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The high-level architecture looks like the following:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image1.png\" alt=\"image\" width=\"624\" height=\"217\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>We will build upon these concepts and will use EC2 Spot instances for\nthe compute-heavy phase of asset compilation in conjunction with the EC2\nAutoscaling feature. We will also use an EC2 Mac instance to complete\nthe second, final Xcode build step. For the whole pipeline,\norchestration is done with Jenkins CI/CD. We\nwill also use the ability of the Unity engine to be Dockerized to\nimplement scalability and flexibility.</p>\n</div>\n<div class=\"paragraph\">\n<p>Services and dependencies used in our solution are shown on the\nfollowing diagram:</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"\"><a class=\"anchor\" href=\"#\"></a><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image2.png\" alt=\"image\" width=\"624\" height=\"250\"></span></h3>\n\n</div>\n<div class=\"sect2\">\n<h3 id=\"key-pieces\"><a class=\"anchor\" href=\"#key-pieces\"></a>Key pieces</h3>\n<div class=\"paragraph\">\n<p>In this blog I will not explain the solution step by step; instead, I\nwill emphasize key pieces of the solution, which you can setup on your\nown. You can follow the whole procedure by going through the workshop\n<a href=\"https://catalog.us-east-1.prod.workshops.aws/workshops/43e96ac6-6d4f-4d99-af97-3ac2a5987391/en-US/020-build-farms/060-labs-unity-mac\">here</a>,\na repository with code and a sample project can be found\n<a href=\"https://github.com/aws-samples/unity-aws-ec2-mac-build-farm\">here</a>.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"networking-template\"><a class=\"anchor\" href=\"#networking-template\"></a>Networking template</h4>\n<div class=\"paragraph\">\n<p>To setup the whole solution, I have created the following\n<a href=\"https://static.us-east-1.prod.workshops.aws/public/b40b1644-6805-40c7-888e-7a5b080112ab/static/templates/template_full.yaml\">CloudFormation\ntemplate</a>. It prepares the environment by creating a VPC, subnets, a\nJenkins Manager installation and an EC2 bastion host. To deploy the\nstack in us-east-2 (Ohio) region, click the button:\n<span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image3.png\" alt=\"image\" width=\"112\" height=\"21\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The stack incorporates VPC with two availability zones (AZs), and with\ntwo private and two public subnets. To follow best practices, we will\nplace Jenkins Manager and execution nodes within the private subnet. The\nstack also sets up a bastion host in order to access resources in the\nprivate subnet.</p>\n</div>\n<div class=\"paragraph\">\n<p>Internal resources will use NAT gateway to reach the internet in two\navailability zones to reduce inter-AZ traffic costs.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image4.png\" alt=\"image\" width=\"624\" height=\"295\"></span></p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"unity-container-and-build-server\"><a class=\"anchor\" href=\"#unity-container-and-build-server\"></a>Unity container and build server</h4>\n<div class=\"paragraph\">\n<p>The demonstration\n<a href=\"https://github.com/aws-samples/unity-aws-ec2-mac-build-farm\">repository</a>\nincludes a sample Unity project to build. The Unity engine can be\ncontainerized—the Linux-based solution uses Docker to pull a specific\nUnity version from a repository, set up a license, and build the Xcode\nproject. Since the process is compute-heavy, the types of instance used\nin this case is a C5.4xlarge instance, which are compute-optimized\ninstances.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Unity part that needs to be legally validated</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>In order to build a Unity project and create an Xcode project in a\nproduction environment, you will need a license. For that, Unity\nprovides several options: in our example, we will use “Unity Build\nServer” licenses. (You can read more\n<a href=\"https://unity.com/products/unity-build-server\">here</a>.) Here are some AWS\ncloud-specific steps to implement in order to ensure the Build Server is\nsetup in resilient way.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Build server installations maintain a number of “seats” or licenses\nwhich are loaned to workers and released after the build process is\ndone; however, the build server is bound to number of cores on the\ninstance, as well as the network interface’s MAC address. This means\nthat once you “bind” seats to an instance of Build Server and you need\nto launch it on a new instance, if the number of cores or network\ninterface do not match, you will lose your seats. In order to avoid such\na problem, you’ll need to provision an additional ENI, attach it to the\ninstance, and use its MAC address to bind Build Server to that ENI’s\naddress. Once that is done, you can launch new instances from AMIs with\nBuild server, attach the ENI, and your licenses are secure and assigned.</p>\n</li>\n<li>\n<p>To ensure that the process is automated, set up an autoscaling group\n(ASG) with the Build Server AMI— a single instance—and set it to attach\nthe specific ENI to any new instance each time it is launched.</p>\n</li>\n<li>\n<p>For a multi-AZ setup, you need two separate build servers with their\nown distinct seat groups.</p>\n</li>\n<li>\n<p>You can expose Build Server via\n<a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html\">AWS Service\nEndpoint</a> by setting up a Network Load Balancer in front of the Build\nServer instance’s ASG and providing a link to the endpoint to your\nconsumers.</p>\n</li>\n<li>\n<p>Unity editor within workers need to be configured in order to connect\nto Build server. This can be achieved by providing configuration file\neach time a Docker container is started via Jenkinsfile. Configuration\nmight look like the following:</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">{\n    \"licensingServiceBaseUrl\": \"\\{http(s)://\\{server dns name}}\",\n    \"enableEntitlementLicensing\": true,\n    \"enableFloatingApi\": true,\n    \"clientConnectTimeoutSec\": 5,\n    \"clientHandshakeTimeoutSec\": 10\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>and the file should be saved as\n'/usr/share/unity3d/config/services-config.json' of the container. The\nLicense server DNS name can be stored in Secrets Manager.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>End of Unity Part</strong></p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"ec2-mac-and-secrets-manager\"><a class=\"anchor\" href=\"#ec2-mac-and-secrets-manager\"></a>EC2 Mac and Secrets Manager</h4>\n<div class=\"paragraph\">\n<p>In order to build and sign iOS applications, we need an EC2 Mac\ninstance. To launch an Amazon EC2 Mac instance, you must first allocate\na dedicated host in Amazon EC2. A dedicated host is a physical server\nthat is wholly allocated for your use. Please keep in mind that\ncurrently EC2 Mac dedicated hosts cannot be released earlier than 24\nhours after being launched. There is no restriction on how often you can\nlaunch an EC2 Mac instance on a dedicated host, however. Depending on\nthe architecture (mac1 for x86, mac2 for Apple silicon), you will need\ndifferent dedicated hosts.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image5.png\" alt=\"image\" width=\"624\" height=\"117\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Once the instance is launched, you will need to enable VNC to connect to\nit via the graphical user interface (GUI). That process is described\n<a href=\"https://catalog.us-east-1.prod.workshops.aws/workshops/43e96ac6-6d4f-4d99-af97-3ac2a5987391/en-US/020-build-farms/060-labs-unity-mac/015-environment-and-ec2-mac/040-ec2-mac-setup/020-enable-graphical-remote-desktop\">here</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image6.png\" alt=\"image\" width=\"624\" height=\"499\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>EC2 Mac instances use most of the same tools that you have already been\nusing with other EC2 instances. These instances live in the VPC, support\nIAM, support user data, and can boot from EBS volumes, so you can create\ngolden AMIs with all the required software installed; for example,\nXcode. EC2 Mac instances can be configured by Systems Manager, for\nexample to install patches. It is also integrated with Cloudwatch for\nlogs. Basically, treat it the same as any EC2 instance that you need to\nconfigure and then use as a part of the unattended CI/CD pipeline to run\nyour builds.</p>\n</div>\n<div class=\"paragraph\">\n<p>In our case, the instance also needs to have Java and Xcode installed,\nas well as an IAM role to call to other services, such as Amazon Secrets\nManager.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"build-signing-and-aws-secrets-manager\"><a class=\"anchor\" href=\"#build-signing-and-aws-secrets-manager\"></a>Build signing and AWS Secrets Manager</h4>\n<div class=\"paragraph\">\n<p>To sign the build for the App Store, we need to have a signing\ncertificate and a provisioning profile. It is possible to also generate\nan application package that can later be signed by another certificate.\nThis is common for companies that want to separate test environments’\ncertificates from their production environment.</p>\n</div>\n<div class=\"paragraph\">\n<p>The development certificate, its password, and the provisioning profile\ncan be stored in AWS Secrets Manager, a great way to save your secrets\nand have secure access to resources.</p>\n</div>\n<div class=\"paragraph\">\n<p>To set up a temporary keychain with signature files, you can use either\n<a href=\"https://fastlane.tools/\">Fastlane</a> or create the temporary keychain\nmanually.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"linux-worker-instances\"><a class=\"anchor\" href=\"#linux-worker-instances\"></a>Linux worker instances</h4>\n<div class=\"paragraph\">\n<p>In order for Linux workers to be able to run build instructions from\nJenkins, several features have to be enabled for Linux worker instances:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Docker engine and Java must be installed</p>\n</li>\n<li>\n<p>The attached EBS storage has to be large enough to incorporate the\ndocker images</p>\n</li>\n<li>\n<p>The instance’s security group should allow communication from Jenkins\nManager node port 22 (Manager node uses ssh to connect to the worker and\nsetup agent)</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"jenkins-setup\"><a class=\"anchor\" href=\"#jenkins-setup\"></a>Jenkins setup</h4>\n<div class=\"paragraph\">\n<p>Jenkins uses a manager node to orchestrate builds. Build jobs will run\neither on EC2 Mac or on EC2 Spot instances managed by the EC2 Fleet\nplugin. Jenkins manager stores configurations, provides a user\ninterface, and orchestrates build jobs. It can also store build\nartifacts, however I find it’s better to use Amazon S3 as it provides\nvirtually unlimited storage, and can easily be used from within Jenkins\npipeline.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image7.png\" alt=\"image\" width=\"624\" height=\"319\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>In order to orchestrate Linux build instances, Jenkins needs the\nfollowing plugins:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image8.png\" alt=\"image\" width=\"624\" height=\"195\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>Docker</strong> and <strong>Docker pipeline</strong> plugins allow us to run docker\npipeline steps. These are required to launch Unity containers and run\nthe first part of the build within.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <strong>EC2 Fleet</strong> plugin allows for simple integration with Autoscaling\ngroups, significantly reducing the overhead of launching new instances,\nstarting a Jenkins agent, and running a build. The EC2 Fleet plugin is\ndecoupled from the Auto Scaling group, which allows for full control of\nthe kinds of instances to be launched. This way, we can utilize the full\npower of Spot instances as temporary workers, thus significantly\nreducing costs.</p>\n</div>\n<div class=\"paragraph\">\n<p>In order to orchestrate Mac instances, the instance has to have port 22\nenabled as well as Java installed. You can add the instance manually, or\nlaunch it via CloudFormation or Terraform and use the self-registration\nmethod described <a href=\"/doc/book/managing/nodes/\">here</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Please note that currently dynamic provisioning of EC2 Mac instances via\nAuto Scaling groups is not possible due to the minimum 24 hour\nreservation time for which an EC2 Mac dedicated host has to be reserved.\nHowever, we can use several Jenkins executors on a single EC2 Mac\ninstance:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image9.png\" alt=\"image\" width=\"624\" height=\"336\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Also, labels can be used in order to separate kinds of workers within a\npipeline. Note that on a screenshot above I use label “mac”.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"build-pipeline-and-running-a-build\"><a class=\"anchor\" href=\"#build-pipeline-and-running-a-build\"></a>Build pipeline and running a build</h4>\n<div class=\"paragraph\">\n<p>Every Jenkins pipeline can be described using a <strong>Jenkinsfile</strong> file. It\nis a YAML-formatted document which describes all the steps for the\npipeline. You can read more\n<a href=\"/doc/book/pipeline/jenkinsfile/\">here</a>. I already\nhave such a file stored in my repository. The file contents are\nfollowing:</p>\n</div>\n<details>\n<summary class=\"title\">Click to reveal the Jenkinsfile</summary>\n<div class=\"content\">\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent none\n\n    environment {\n        UNITY_PROJECT_DIR='UnityProjectSample'\n        IMAGE='unityci/editor'\n        UNITY_VERSION='2021.3.6f1-ios-1.0'\n        // Build parameters\n        UNITY_LICENSE_FILE='UNITY_LICENSE_FILE'\n        PROVISIONING_PROFILE_NAME='UnityBuildSample-profile'\n        // secret from Secrets Manager\n        TEAM_ID_KEY='TEAM_ID'\n        LICENSE_SERVER_ENDPOINT='LICENSE_SERVER_ENDPOINT'\n        SIGNING_CERT='SIGNING_CERT'\n        SIGNING_CERT_PRIV_KEY='SIGNING_CERT_PRIV_KEY'\n        SIGNING_CERT_PRIV_KEY_PASSPHRASE='SIGNING_CERT_PRIV_KEY_PASSPHRASE'\n        APPLE_WWDR_CERT='APPLE_WWDR_CERT'\n        PROVISIONING_PROFILE='PROVISIONING_PROFILE'\n    }\n\n    stages {\n        stage('build Unity project on spot') {\n            agent {\n                docker {\n                    image 'unityci/editor:2021.3.6f1-ios-1.0'\n                    args '-u root:root'\n                }\n            }\n            steps {\n                // install stuff for Unity, build xcode project, archive the result\n                sh '''\n                    printenv\n                    echo \"===Installing stuff for unity\"\n                    apt-get update\n                    apt-get install -y curl unzip zip\n                    curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o\n                    \"awscliv2.zip\"\n                    unzip -o awscliv2.zip\n                    ./aws/install\n                    apt-get install sudo\n                    # Following section can be uncommented if Unity Build server is used\n                    # just to push it through\n                    # sudo mkdir -p /usr/share/unity3d/config/\n                    # endpoint=`aws secretsmanager get-secret-value \\\n                    # --secret-id $LICENSE_SERVER_ENDPOINT --output text --query\n                    # 'SecretString' | cut -d '\"' -f4`\n                    # configfile='\\{\n                    # \"licensingServiceBaseUrl\": \"'$endpoint'\",\n                    # \"enableEntitlementLicensing\": true,\n                    # \"enableFloatingApi\": true,\n                    # \"clientConnectTimeoutSec\": 5,\n                    # \"clientHandshakeTimeoutSec\": 10\n                    # }'\n                    # Copying Unity .ulf license file from S3 to container\n                    # aws s3 cp \"s3://$\\{S3_BUCKET}/Unity_2021.3.6f1-ios-1.0.ulf\"\n                    # \"/root/.local/share/unity3d/Unity/Unity_lic.ulf\"\n                    # mkdir -p \"/root/.local/share/unity3d/Unity\"\n                    # aws secretsmanager get-secret-value --secret-id $UNITY_LICENSE_FILE\n                    # --output text --query SecretBinary |\n                    # base64 -d &gt; \"/root/.local/share/unity3d/Unity/Unity_lic.ulf\"\n                    # echo \"===Building Xcode project\"\n                    # We also pull in additional repository with actual Unity Project.\n                    # We have several configuration files for our build configuration\n                    # You can find those in UnityProjectSample folder\n                    rm nodulus -rf\n                    git clone https://github.com/Hyperparticle/nodulus.git\n                    cp -nR nodulus/* UnityProjectSample/\n                    cd $UNITY_PROJECT_DIR\n                    mkdir -p ./iOSProj\n                    mkdir -p ./Build/iosBuild\n                    xvfb-run --auto-servernum --server-args='-screen 0 640x480x24' \\\n                        /opt/unity/Editor/Unity \\\n                        -quit \\\n                        -batchmode \\\n                        -nographics \\\n                        -executeMethod ExportTool.ExportXcodeProject \\\n                        -buildTarget iOS \\\n                        -customBuildTarget iOS \\\n                        -customBuildName iosBuild \\\n                        -customBuildPath ./Build/iosBuild \\\n                        -logFile /dev/stdout\n                    echo \"===Zipping Xcode project\"\n                    zip -r iOSProj iOSProj\n                    '''\n                    // pick up archive xcode project\n                    dir(\"$\\{env.UNITY_PROJECT_DIR}\") {\n                        stash includes: 'iOSProj.zip', name: 'xcode-project'\n                    }\n                }\n                post {\n                    always {\n                        sh \"chmod -R 777 .\"\n                    }\n                }\n            }\n            stage('build and sign iOS app on mac')\\{\n                // we don't need the source code for this stage\n                options {\n                    skipDefaultCheckout()\n                }\n                agent {\n                    label \"mac\"\n                }\n                environment {\n                    HOME_FOLDER='/Users/jenkins'\n                    PROJECT_FOLDER='iOSProj'\n                }\n                steps {\n                    unstash 'xcode-project'\n                    sh '''\n                    pwd\n                    ls -l\n                    # Remove old project and unpack a new one\n                    rm -rf $\\{PROJECT_FOLDER}\n                    unzip iOSProj.zip\n                    '''\n\n                    // create export options file\n                    writeFile file: \"$\\{env.PROJECT_FOLDER}/ExportOptions.plist\", text: \"\"\"\n                    &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n                    &lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n                    \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n                    &lt;plist version=\"1.0\"&gt;\n                        &lt;dict&gt;\n                            &lt;key&gt;signingStyle&lt;/key&gt;\n                            &lt;string&gt;manual&lt;/string&gt;\n                        &lt;/dict&gt;\n                    &lt;/plist&gt;\n                \"\"\"\n\n                sh '''\n                PATH=$PATH:/usr/local/bin\n                cd $\\{PROJECT_FOLDER}\n                # Update project settings\n                # sed -i \"\" 's|^#!/bin/sh|#!/bin/bash|' MapFileParser.sh\n                # extra backslash for groovy\n                TEAM_ID=`aws secretsmanager get-secret-value \\\n                    --secret-id $TEAM_ID_KEY --output text --query 'SecretString' | cut -d '\"' -f4`\n                # extra backslash for groovy\n                sed -i \"\" \"s/DEVELOPMENT_TEAM = \\\\\"\\\\\"/DEVELOPMENT_TEAM = $TEAM_ID/g\" Unity-iPhone.xcodeproj/project.pbxproj\n                #############################################\n                # setup certificates in a temporary keychain\n                #############################################\n\n                echo \"===Setting up a temporary keychain\"\n                pwd\n                # Unique keychain ID\n                MY_KEYCHAIN=\"temp.keychain.`uuidgen`\"\n                MY_KEYCHAIN_PASSWORD=\"secret\"\n                security create-keychain -p \"$MY_KEYCHAIN_PASSWORD\" \"$MY_KEYCHAIN\"\n                # Append the temporary keychain to the user search list\n                # double backslash for groovy\n                security list-keychains -d user -s \"$MY_KEYCHAIN\" $(security list-keychains -d user | sed s/\\\\\"//g)\n                # Output user keychain search list for debug\n                security list-keychains -d user\n                # Disable lock timeout (set to \"no timeout\")\n                security set-keychain-settings \"$MY_KEYCHAIN\"\n                # Unlock keychain\n                security unlock-keychain -p \"$MY_KEYCHAIN_PASSWORD\" \"$MY_KEYCHAIN\"\n                echo \"===Importing certs\"\n                # Import certs to a keychain; bash process substitution doesn't work with security for some reason\n                aws secretsmanager get-secret-value --secret-id $SIGNING_CERT --output text --query SecretBinary | base64 -d -o /tmp/cert &amp;&amp; security -v import /tmp/cert -k \"$MY_KEYCHAIN\" -T \"/usr/bin/codesign\"\n                rm /tmp/cert\n                PASSPHRASE=`aws secretsmanager get-secret-value \\\n                    --secret-id $SIGNING_CERT_PRIV_KEY_PASSPHRASE --output text --query 'SecretString' | cut -d '\"' -f4`\n                aws secretsmanager get-secret-value --secret-id $SIGNING_CERT_PRIV_KEY --output text --query SecretBinary |\nbase64 -d -o /tmp/priv.p12 &amp;&amp;\n                security -v import /tmp/priv.p12 -k \"$MY_KEYCHAIN\" -P \"$PASSPHRASE\" -t priv -T \"/usr/bin/codesign\"\n                rm /tmp/priv.p12; PASSPHRASE=''\n                #aws secretsmanager get-secret-value --secret-id $APPLE_WWDR_CERT --output text --query SecretBinary | \\\n                # base64 -d -o /tmp/cert &amp;&amp;\n                # security -v import /tmp/cert -k \"$MY_KEYCHAIN\"\n                # rm /tmp/cert\n                # Dump keychain for debug\n                security dump-keychain \"$MY_KEYCHAIN\"\n                # Set partition list (ACL) for a key\n                security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MY_KEYCHAIN_PASSWORD $MY_KEYCHAIN\n                # Get signing identity for xcodebuild command\n                security find-identity -v -p codesigning $MY_KEYCHAIN\n                # double backslash for groovy\n                CODE_SIGN_IDENTITY=`security find-identity -v -p codesigning $MY_KEYCHAIN | awk '/ *1\\\\)/ \\{print $2}'`\n                echo code signing identity is $CODE_SIGN_IDENTITY\n                security default-keychain -s $MY_KEYCHAIN\n                #############################################\n                # setup provisioning profile\n                #############################################\n                echo ===setting up a provisioning profile\n                pwd\n                # # if the provisioning profile already exists, don't overwrite\n                # PROV_PROFILE_FILENAME=\"$\\{HOME}/Library/MobileDevice/Provisioning Profiles/$\\{PROVISIONING_PROFILE_NAME}.mobileprovision\"\n                # if [ ! -f \"$PROV_PROFILE_FILENAME\" ]; then\n                # aws secretsmanager get-secret-value --secret-id $PROVISIONING_PROFILE --output text --query SecretBinary | \\\n                # base64 -d -o \"$\\{PROV_PROFILE_FILENAME}\"\n                # fi\n                # # lock, since multiple jobs can use the same provisioning profile\n                # if [ -f \"$\\{PROV_PROFILE_FILENAME}.lock\" ]; then\n                # n=`cat \"$\\{PROV_PROFILE_FILENAME}.lock\"`\n                # n=$((n+1))\n                # else\n                # n=1\n                # fi\n                # echo $n &gt; \"$\\{PROV_PROFILE_FILENAME}.lock\"\n                #############################################\n                # Build\n                #############################################\n                echo ===Building\n                pwd\n                # xcodebuild -scheme Unity-iPhone -sdk iphoneos -configuration AppStoreDistribution archive -archivePath \"$PWD/build/Unity-iPhone.xcarchive\" CODE_SIGN_STYLE=\"Manual\" PROVISIONING_PROFILE_SPECIFIER_APP=\"$PROVISIONING_PROFILE_NAME\" CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY OTHER_CODE_SIGN_FLAGS=\"--keychain=$MY_KEYCHAIN\" -UseModernBuildSystem=0\n                xcodebuild -scheme Unity-iPhone -sdk iphoneos -configuration AppStoreDistribution archive -archivePath \"$PWD/build/Unity-iPhone.xcarchive\" CODE_SIGN_STYLE=\"Manual\" CODE_SIGN_IDENTITY=$CODE_SIGN_IDENTITY OTHER_CODE_SIGN_FLAGS=\"--keychain=$MY_KEYCHAIN\" -UseModernBuildSystem=0 CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO\n                # Generate ipa\n                echo ===Exporting ipa\n                pwd\n                # xcodebuild -exportArchive -archivePath \"$PWD/build/Unity-iPhone.xcarchive\" -exportOptionsPlist ExportOptions.plist -exportPath \"$PWD/build\"\n                #############################################\n                # Upload\n                #############################################\n                # Upload to S3\n                # /usr/local/bin/aws s3 cp ./build/*.ipa s3://$\\{S3_BUCKET}/\n                #############################################\n                # Cleanup\n                #############################################\n                # Delete keychain - should be moved to a post step, but this would require a global variable or smth\n                security delete-keychain \"$MY_KEYCHAIN\"\n                # Delete a provisioning profile if no jobs use it anymore\n                n=0\n                if [ -f \"$\\{PROV_PROFILE_FILENAME}.lock\" ]; then\n                n=`cat \"$\\{PROV_PROFILE_FILENAME}.lock\"`\n                n=$((n-1))\n                echo $n &gt; \"$\\{PROV_PROFILE_FILENAME}.lock\"\n                fi\n                if [ \"$n\" -le \"0\" ]; then\n                rm -f \"$\\{PROV_PROFILE_FILENAME}\"\n                rm -f \"$\\{PROV_PROFILE_FILENAME}.lock\"\n                fi\n                '''\n            }\n            post {\n                always {\n                    sh '''\n                    #############################################\n                    # cleanup\n                    #############################################\n                    zip -r iOSProj/build/Unity-iPhone.zip iOSProj/build/Unity-iPhone.xcarchive\n                    rm -rf iOSProj/build/Unity-iPhone.xcarchive\n                    '''\n                    archiveArtifacts artifacts: '**/Unity-iPhone.zip', onlyIfSuccessful: true, caseSensitive: false\n                }\n            }\n        }\n    }\n    post {\n        success {\n            echo 'Success ^_^'\n        }\n        failure {\n            echo 'Failed :('\n        }\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n</details>\n<div class=\"paragraph\">\n<p>The key pieces of the file:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>agent – describes which instances the build should run on. In my case\nlabel “mac” is used to separate EC2 Mac instances from Spot instances</p>\n</li>\n<li>\n<p>environment – describes environment variables used by the build</p>\n</li>\n<li>\n<p>stage(‘Name’) – describes separate stage</p>\n</li>\n<li>\n<p>docker – describes docker image that is pulled and is later used to\nrun Unity build in</p>\n</li>\n<li>\n<p>xvfb-run /opt/unity/Editor/Unity – runs unity editor in headless mode\nwithin a container</p>\n</li>\n<li>\n<p>security create-keychain – creates private keychain to store secrets\nlike signing certificate. The keychain is later deleted.</p>\n</li>\n<li>\n<p>To pass Artifacts between stages, Jenkins` <strong>stash</strong> function is used</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>And once done, the basic pipeline should look like the following:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image10.png\" alt=\"image\" width=\"624\" height=\"247\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"final-architecture\"><a class=\"anchor\" href=\"#final-architecture\"></a>Final architecture</h3>\n<div class=\"paragraph\">\n<p>Once the all the key pieces mentioned in this post are assembled, the\nfinal picture is as following:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-09-14-Create-iOS-Unity-build-pipelines/image11.png\" alt=\"image\" width=\"624\" height=\"344\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Also refer to the\n<a href=\"https://d1.awsstatic.com/architecture-diagrams/ArchitectureDiagrams/unity-build-pipeline-ios-games-on-aws-cloud-ra.pdf?did=wp_card&amp;trk=wp_card\">full\ndiagram</a> with additional details explained. For this diagram, we assume\nthat code and Docker images are located within the AWS account as well,\nto reduce data transfer charges and improve latency.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"main-solution-benefits-and-costs\"><a class=\"anchor\" href=\"#main-solution-benefits-and-costs\"></a>Main solution benefits and costs</h3>\n<div class=\"paragraph\">\n<p>There are several factors that are important to consider when building\nthis solution:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Unity version control.<br>\nThis solution allows for flexible control of which Unity version is used\nfor the build. By simply using tagging for Docker images, the pipeline\ncan run different versions of Unity without changing the configuration\nof the pipeline in general.</p>\n</li>\n<li>\n<p>Flexible Xcode version control<br>\nBy utilizing AMI images for EC2 Mac, it is possible to build a library\nof iOS and preinstalled Xcode versions to quickly launch on EC2 Mac\nhosts. This process can be further automated by using tools like Packer\nor EC2 Image Builder to create AMIs for different versions of\nenvironments.</p>\n</li>\n<li>\n<p>Cost benefits when using Spot instances and using less Mac instances<br>\nSince this solution implements a split-build approach, it allows us to\ntake 30 to 70% of the computing time from EC2 Mac instances. This allows\nfor better parallelization of builds and reduces time required by the\nEC2 Mac instance to process the code, resulting in much faster builds in\ngeneral. Spot instances are also used instead of on-demand instances.\nThus, depending on a build, the approach can reduce the cost by around\n30-40%.</p>\n</li>\n<li>\n<p>It is also possible to setup “layers” of EC2 Mac instances by using\nseveral Macs for development and production builds separately, this\nallows for secure separation of environments.</p>\n</li>\n<li>\n<p>Automatization of the pipeline via versioned Jenkinsfiles and Amazon\nCloudFormation templates allows for consistent and controllable approach\nto build environments.</p>\n</li>\n</ol>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h3>\n<div class=\"paragraph\">\n<p>This post explains key pieces of the of cost-effective Unity build\npipeline. It utilizes a mechanism of separation of the build to Linux\ninstances and EC2 Mac instances. The compute-heavy part can be done on\ncost-efficient Spot instances, which reduces load to Mac instances and\nallows for more parallel builds at a time. We went through Unity and iOS\nbuild environments, key elements, licensing, workers and overall CI/CD\nprocess automation with Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>This approach has already been adopted by our Game tech clients:\n<a href=\"https://aws.amazon.com/ec2/instance-types/mac/customers/\" class=\"bare\">https://aws.amazon.com/ec2/instance-types/mac/customers/</a> - Riot Games,\nPokemon Company and others. The pipelines speed being improved up to\n400% (Pokemon Company), Improving management time (Riot games) and\nreduced complexity (Jamcity).</p>\n</div>\n<div class=\"paragraph\">\n<p>We will be speaking more on this topic at the <a href=\"/blog/2022/09/13/jenkins-contributor-summit-2022-agenda-orlando-florida/\">Jenkins Contributor Summit</a>, on September 27 at <a href=\"https://reg.devopsworld.com/flow/cloudbees/devopsworld22/Landing/page/welcome\">DevOps World in Orlando, Florida</a>. Hope to see you there!</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Suggested tags:</strong>\n<a href=\"https://aws.amazon.com/blogs/gametech/tag/amazon-game-development/\">Amazon Game Development</a>,\nAmazon EC2 Mac,\n<a href=\"https://aws.amazon.com/blogs/gametech/tag/aws-for-games/\">AWS for Games</a>,\n<a href=\"https://aws.amazon.com/blogs/gametech/tag/aws-game-development/\">AWS game development</a>,\n<a href=\"https://aws.amazon.com/blogs/gametech/tag/aws-game-tech/\">AWS Game Tech</a>,\n<a href=\"https://aws.amazon.com/blogs/gametech/tag/unity/\">Unity</a></p>\n</div>\n</div>\n</div>\n</div>"
}