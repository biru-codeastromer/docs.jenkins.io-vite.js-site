{
  "id": "2022-12-2022-12-27-run-jenkins-agent-as-a-service",
  "url": "/blog/2022/12/01/2022-12-27-run-jenkins-agent-as-a-service/",
  "title": "Create a new Jenkins node, and run your Jenkins agent as a service",
  "date": "2022-12-01",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "systemd",
    "agent",
    "node"
  ],
  "summary": "Table of Contents Pre-requisites Java Jenkins user Docker Create a new node in Jenkins Node creation in the UI Node configuration Run your Jenkins agent as a service In this tutorial, we will review how to start a Jenkins agent as a Linux service with.",
  "opengraph_image": "/images/post-images/2022-12-27-run-jenkins-agent-as-a-service/curl-and-java-launch-agent.svg",
  "content_html": "<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">Table of Contents</div>\n<ul class=\"sectlevel1\">\n<li><a href=\"#pre-requisites\">Pre-requisites</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#jenkins-user\">Jenkins user</a></li>\n<li><a href=\"#docker\">Docker</a></li>\n</ul>\n</li>\n<li><a href=\"#create-a-new-node-in-jenkins\">Create a new node in Jenkins</a>\n<ul class=\"sectlevel2\">\n<li><a href=\"#node-creation-in-the-ui\">Node creation in the UI</a></li>\n<li><a href=\"#node-configuration\">Node configuration</a></li>\n</ul>\n</li>\n<li><a href=\"#run-your-jenkins-agent-as-a-service\">Run your Jenkins agent as a service</a></li>\n</ul>\n</div>\n<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In this tutorial, we will review how to start a Jenkins agent as a Linux service with <code>systemd</code>.\nWhen using <code>Docker</code> for my agents, entering the correct options on the command line should cause the agents to restart automatically.\nSometimes, such as when you want to use the famous <a href=\"/doc/book/pipeline/docker/\"><code>Dockerfile: true</code></a> option, you need to start the agent manually with a <code>java</code> command and not with Docker (for various security reasons).\nThen you need to restart it manually if you have to reboot, or if you forget to use <code>nohup</code> to start it in the background, and then close the terminal.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"pre-requisites\"><a class=\"anchor\" href=\"#pre-requisites\"></a>Pre-requisites</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let’s say we’re starting with a fresh Ubuntu 22.04 Linux installation.\nTo get an agent working, we'll need to do some preparation.\nJava is necessary for this process, and  Docker allows us to use Docker for our agents instead of installing everything directly on the machine.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"java\"><a class=\"anchor\" href=\"#java\"></a>Java</h3>\n<div class=\"paragraph\">\n<p>Currently, openjdk 11 is recommended, and openjdk 17 is supported.\nLet’s go with openjdk 17:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo apt-get update\nsudo apt install -y --no-install-recommends openjdk-17-jdk-headless</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let’s now verify if <code>java</code> works for us:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">java -version\nopenjdk version \"17.0.3\" 2022-04-19\nOpenJDK Runtime Environment (build 17.0.3+7-Ubuntu-0ubuntu0.22.04.1)\nOpenJDK 64-Bit Server VM (build 17.0.3+7-Ubuntu-0ubuntu0.22.04.1, mixed mode, sharing)</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"jenkins-user\"><a class=\"anchor\" href=\"#jenkins-user\"></a>Jenkins user</h3>\n<div class=\"paragraph\">\n<p>While creating an agent, be sure to separate rights, permissions, and ownership for users.\nLet’s create a user for Jenkins:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo adduser --group --home /home/jenkins --shell /bin/bash jenkins</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"docker\"><a class=\"anchor\" href=\"#docker\"></a>Docker</h3>\n<div class=\"paragraph\">\n<p>Now, to get a recent version of Docker, we should install the <code>docker-ce</code> package and a few others with a particular repo.\nFirst, let’s add the needed dependencies to add the repo:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo apt-get install ca-certificates curl gnupg lsb-release</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>In my case, these packages were already installed and up to date.\nThe next step is to add Docker’s official GPG key:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, we can set up the repo:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The last thing to do is to update the list of available packages, and then install the latest version of Docker:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you’re - like me - running a recent version of Ubuntu or Debian, you won’t need to create the <code>docker</code> group, because it has been created with the installation of Docker.\nOn the contrary, you can then issue a <code>sudo groupadd docker</code> command to create the <code>docker</code> group.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, let’s add our current user to the <code>docker</code> group:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo usermod -aG docker $USER</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And if you’re not using the default user, but <code>jenkins</code>, you can do the same:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo usermod -aG docker jenkins\nsudo usermod -aG sudo jenkins</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now log out, and log back in so that your group membership is updated.\nIf you get any error, just reboot the machine, this sometimes happens.\n<code>¯_(ツ)_/¯</code></p>\n</div>\n<div class=\"paragraph\">\n<p>Mandatory ``Hello World!'' Docker installation test:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n2db29710123e: Pull complete\nDigest: sha256:53f1bbee2f52c39e41682ee1d388285290c5c8a76cc92b42687eecf38e0af3f0\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Nice!</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"create-a-new-node-in-jenkins\"><a class=\"anchor\" href=\"#create-a-new-node-in-jenkins\"></a>Create a new node in Jenkins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Quoting the official <a href=\"/doc/book/managing/nodes/\">documentation</a>,</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Nodes are the \"machines\" on which build agents run.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>and also:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Agents manage the task execution on behalf of the Jenkins controller by using executors.\nAn agent is actually a small (170KB single jar) Java client process that connects to a Jenkins controller and is assumed to be unreliable.\nAn agent can use any operating system that supports Java.\nTools required for builds and tests are installed on the node where the agent runs; they can be installed directly or in a container (Docker or Kubernetes).</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>To conclude:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>In practice, nodes and agents are essentially the same but it is good to remember that they are conceptually distinct.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>We will now create a new node in Jenkins, using our Ubuntu machine as the node, and then launch an agent on this node.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"node-creation-in-the-ui\"><a class=\"anchor\" href=\"#node-creation-in-the-ui\"></a>Node creation in the UI</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Go to your Jenkins dashboard</p>\n</li>\n<li>\n<p>Go to <em>Manage Jenkins</em> option in the main menu</p>\n</li>\n<li>\n<p>Go to <em>Manage Nodes and clouds</em> item</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-02-run-jenkins-agent-as-a-service/manage-nodes-and-clouds.png\" alt=\"Jenkins UI\" title=\"Manage Nodes and Clouds\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Go to New Node option in the side menu</p>\n</li>\n<li>\n<p>Fill in the <em>Node name</em> (<em>My New Ubuntu 22.04 Node with Java and Docker installed</em> for me) and type (<em>Permanent Agent</em> for me)</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-02-run-jenkins-agent-as-a-service/new-node.png\" alt=\"Jenkins UI\" title=\"New node\"></span></p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Click on the <em>Create</em> button</p>\n</li>\n<li>\n<p>In the <em>Description</em> field, enter if you want a human-readable description of the node (<em>My New Ubuntu 22.04 Node with Java and Docker installed</em> for me) -</p>\n</li>\n<li>\n<p>Let <code>1</code> as the number of executors for the time being.\nA good value to start with would be the number of CPU cores on the machine (unfortunately for me, it’s <code>1</code>) - As <em>Remote root directory</em>, enter the directory where you want to install the agent (<code>/home/jenkins</code> for me)</p>\n</li>\n</ul>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>An agent should have a directory dedicated to Jenkins.\nIt is best to use an absolute path, such as <code>/var/jenkins</code> or <code>c:\\jenkins</code>.\nThis should be a path local to the agent machine.\nThere is no need for this path to be visible from the controller.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Regarding the <em>Labels</em> field, enter the labels you want to assign to the node (<code>ubuntu linux docker jdk17</code> for me), which makes four labels.\nThis will help you group multiple agents into one logical group)</p>\n</li>\n<li>\n<p>For the <em>Usage</em> now, choose <em>Use this node as much as possible</em> for the time being, you will be able to restrict later on the kind of jobs that can be run on this node.</p>\n</li>\n<li>\n<p>The last thing to set up now: choose <em>Launch agent by connecting it to the controller</em> .\nThat means that you will have to launch the agent on the node itself and that the agent will then connect to the controller.\nThat’s pretty handy when you want to build Docker images, or when your process will use Docker images…\nYou could also have the controller launch an agent directly via Docker remotely, but then you would have to use Docker in Docker, which is complicated <em>and</em> insecure.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"node-configuration\"><a class=\"anchor\" href=\"#node-configuration\"></a>Node configuration</h3>\n<div class=\"paragraph\">\n<p>The <em>Save</em> button will create the node within Jenkins, and lead you to the <em>Manage nodes and clouds</em> page.\nYour new node will appear <em>brown</em> in the list, and you can click on it to see its details.\nThe details page displays your java command line to start the agent.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-02-run-jenkins-agent-as-a-service/java-command-to-launch-the-agent.png\" alt=\"Jenkins UI\" title=\"Command to launch the agent\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>This command looks like that for me:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">curl -sO http://my_ip:8080/jnlpJars/agent.jar\njava -jar agent.jar -jnlpUrl http://my_ip:8080/computer/My%20New%20Ubuntu%2022%2E04%20Node%20with%20Java%20and%20Docker%20installed/jenkins-agent.jnlp -secret my_secret -workDir \"/home/jenkins\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-27-run-jenkins-agent-as-a-service/curl-and-java-launch-agent.svg\" alt=\"Terminal\" title=\"New agent starting\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>You can now go back into Jenkins’ UI, select the <strong>Back to List</strong> menu item on the left side of the screen, and see that your new agent is running.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-02-run-jenkins-agent-as-a-service/new-node-looks-fine.png\" alt=\"Jenkins UI\" title=\"New node looks fine\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>After this is running, there are a few more actions that need to be completed.\nWhenever you close the terminal you launched the agent with, the agent will stop.\nIf you ever have to reboot the machine after a kernel update, you will have to restart the agent manually too.\nTherefore, you should keep the agent running by declaring it as a service.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"run-your-jenkins-agent-as-a-service\"><a class=\"anchor\" href=\"#run-your-jenkins-agent-as-a-service\"></a>Run your Jenkins agent as a service</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Create a directory called <code>jenkins</code> or <code>jenkins-service</code> in your home directory or anywhere else where you have access, for example <code>/usr/local/jenkins-service</code>.\nIf the new directory does not belong to the current user home, give it the right owner and group after creation.\nFor me, it would look like the following:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo mkdir -p /usr/local/jenkins-service\nsudo chown jenkins /usr/local/jenkins-service</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Move the <code>agent.jar</code> file that you downloaded earlier with the <code>curl</code> command to this directory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mv agent.jar /usr/local/jenkins-service</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now (in <code>/usr/local/jenkins-service</code>) create a <code>start-agent.sh</code> file with the Jenkins <code>java</code> command we’ve seen earlier as the file’s content.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">#!/bin/bash\ncd /usr/local/jenkins-service\n# Just in case we would have upgraded the controller, we need to make sure that the agent is using the latest version of the agent.jar\ncurl -sO http://my_ip:8080/jnlpJars/agent.jar\njava -jar agent.jar -jnlpUrl http://my_ip:8080/computer/My%20New%20Ubuntu%2022%2E04%20Node%20with%20Java%20and%20Docker%20installed/jenkins-agent.jnlp -secret my_secret -workDir \"/home/jenkins\"\nexit 0</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Make the script executable by executing <code>chmod +x start-agent.sh</code> in the directory.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now create a <code>/etc/systemd/system/jenkins-agent.service</code> file with the following content:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">[Unit]\nDescription=Jenkins Agent\n\n[Service]\nUser=jenkins\nWorkingDirectory=/home/jenkins\nExecStart=/bin/bash /usr/local/jenkins-service/start-agent.sh\nRestart=always\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We still have to enable the daemon with the following command:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo systemctl enable jenkins-agent.service</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let’s have a look at the system logs before starting the daemon:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">journalctl -f &</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now start the daemon with the following command.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo systemctl start jenkins-agent.service</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We can see some interesting logs in the <code>journalctl</code> output:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">Aug 03 19:37:27 ubuntu-machine systemd[1]: Started Jenkins Agent.\nAug 03 19:37:27 ubuntu-machine sudo[8821]: pam_unix(sudo:session): session closed for user root\nAug 03 19:37:28 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:28 PM org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir\nAug 03 19:37:28 ubuntu-machine bash[8826]: INFO: Using /home/jenkins/remoting as a remoting work directory\nAug 03 19:37:28 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:28 PM org.jenkinsci.remoting.engine.WorkDirManager setupLogging\nAug 03 19:37:28 ubuntu-machine bash[8826]: INFO: Both error and output logs will be printed to /home/jenkins/remoting\nAug 03 19:37:28 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:28 PM hudson.remoting.jnlp.Main createEngine\nAug 03 19:37:28 ubuntu-machine bash[8826]: INFO: Setting up agent: My New Ubuntu 22.04 Node with Java and Docker installed\nAug 03 19:37:28 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:28 PM hudson.remoting.Engine startEngine\nAug 03 19:37:28 ubuntu-machine bash[8826]: INFO: Using Remoting version: 3046.v38db_38a_b_7a_86\nAug 03 19:37:28 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:28 PM org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir\nAug 03 19:37:28 ubuntu-machine bash[8826]: INFO: Using /home/jenkins/remoting as a remoting work directory\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Locating server among [http://controller_ip:58080/]\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM org.jenkinsci.remoting.engine.JnlpAgentEndpointResolver resolve\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Remoting server accepts the following protocols: [JNLP4-connect, Ping]\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Agent discovery successful\nAug 03 19:37:29 ubuntu-machine bash[8826]:   Agent address: controller_ip\nAug 03 19:37:29 ubuntu-machine bash[8826]:   Agent port:    50000\nAug 03 19:37:29 ubuntu-machine bash[8826]:   Identity:      31:c4:f9:31:46:c3:eb:72:64:a3:c7:d6:c7:ea:32:2f\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Handshaking\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Connecting to controller_ip:50000\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Trying protocol: JNLP4-connect\nAug 03 19:37:29 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:29 PM org.jenkinsci.remoting.protocol.impl.BIONetworkLayer$Reader run\nAug 03 19:37:29 ubuntu-machine bash[8826]: INFO: Waiting for ProtocolStack to start.\nAug 03 19:37:30 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:30 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:30 ubuntu-machine bash[8826]: INFO: Remote identity confirmed: 31:c4:f9:31:46:c3:eb:72:64:a3:c7:d6:c7:ea:32:2f\nAug 03 19:37:30 ubuntu-machine bash[8826]: Aug 03, 2022 7:37:30 PM hudson.remoting.jnlp.Main$CuiListener status\nAug 03 19:37:30 ubuntu-machine bash[8826]: INFO: Connected</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We can now check the status with the command below, and the output should be similar to what is shown here.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sudo systemctl status jenkins-agent.service\n● jenkins-agent.service - Jenkins Agent\n     Loaded: loaded (/etc/systemd/system/jenkins-agent.service; enabled; vendor preset: enabled)\n     Active: active (running) since Wed 2022-08-03 19:37:27 UTC; 4min 0s ago\n   Main PID: 8825 (bash)\n      Tasks: 22 (limit: 1080)\n     Memory: 63.1M\n        CPU: 9.502s\n     CGroup: /system.slice/jenkins-agent.service\n             ├─8825 /bin/bash /usr/local/jenkins-service/start-agent.sh\n             └─8826 java -jar agent.jar -jnlpUrl http://controller_ip:8080/computer/My%20New%20Ubuntu%2022%2E04%20Node%20with%20Java%20and%20Docker%20installed/jenkins-agent.jnlp -secret my_secret></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Just for fun, we can now reboot the machine and see in the UI if the agent is still running once the boot is finished!</p>\n</div>\n</div>\n</div>"
}