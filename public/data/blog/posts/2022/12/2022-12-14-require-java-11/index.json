{
  "id": "2022-12-2022-12-14-require-java-11",
  "url": "/blog/2022/12/01/2022-12-14-require-java-11/",
  "title": "Jenkins plugin development requires Java 11 or newer",
  "date": "2022-12-01",
  "authors": [
    "basil"
  ],
  "tags": [
    "announcement",
    "developer",
    "jenkins"
  ],
  "summary": "Beginning with 4.52, the plugin build toolchain requires Java 11 or newer and Jenkins 2.361 or newer.",
  "opengraph_image": "/images/post-images/2022-12-require-java-11/jvms.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"java-platform-update\"><a class=\"anchor\" href=\"#java-platform-update\"></a>ðŸš€ Java Platform update</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Jenkins has <a href=\"/blog/2022/06/28/require-java-11/\">required Java 11 or newer</a>\nsince <a href=\"https://github.com/jenkinsci/jenkins/releases/tag/jenkins-2.361.1\">2.361.1 LTS</a> (released on September 7, 2022)\nand has supported Java 17 since <a href=\"https://github.com/jenkinsci/jenkins/releases/tag/jenkins-2.346.1\">2.346.1 LTS</a> (released on June 16, 2022).\nAt the time, more users were running Jenkins on Java 8 than on Java 11,\nand a negligible number of users were running Jenkins on Java 17.\nIn recent months, usage of Java 11 has surpassed usage of Java 8,\nand usage of Java 17 has entered a phase of rapid adoption:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2022-12-require-java-11/jvms.png\" alt=\"JVMS by date as of November 2022\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>With all <em>known</em> production issues on Java 17 resolved, we continue to encourage users to upgrade to Java 17,\nparticularly in light of the fact that many Java vendors plan to stop providing free public updates for Java 11 <a href=\"https://en.wikipedia.org/wiki/Java_version_history#Release_table\">on or after October 2024</a>.\nReport any issues running on Java 17 in <a href=\"https://issues.jenkins.io/browse/JENKINS-67908\">JENKINS-67908</a>.\nThe <a href=\"https://plugins.jenkins.io/versioncolumn/\">Versions Node Monitors</a> plugin, which helps keep track of Java versions across agents, has also been recently updated.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"changes-for-plugin-developers\"><a class=\"anchor\" href=\"#changes-for-plugin-developers\"></a>ðŸ‘· Changes for plugin developers</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>With the migration to Java 11 now well underway for both end users and Jenkins core alike,\nthe focus has shifted to the plugin development toolchain.\nWith <a href=\"/doc/developer/plugin-development/choosing-jenkins-baseline/\">the developer documentation</a> now recommending 2.361.4 as a baseline for plugins,\nthis raises the question about when to require Java 11 for plugin development.</p>\n</div>\n<div class=\"paragraph\">\n<p>Historically the Jenkins project has supported old baselines for a long time in the plugin build toolchain,\nwith recent versions of the plugin build toolchain supporting baselines up to two (2) years old.\nThis provides a high degree of flexibility for plugin maintainers and ultimately end users.\nFor the reasons given on <a href=\"https://groups.google.com/g/jenkinsci-dev/c/pjfvsMw-EMM/m/OIw_hveUBwAJ\">the developer mailing list</a>, however,\nthis level of compatibility could not be preserved throughout the transition to Java 11.\nWe therefore took the decision to require a baseline of 2.361 or newer for plugins in recent releases of the plugin build toolchain,\nabout a year ahead of our usual timeline.\nThis unusually aggressive timeline does not represent a change in policy for the Jenkins project\nbut is rather an exception to the rule to facilitate migration to a number of breaking changes in the upstream Java community.</p>\n</div>\n<div class=\"paragraph\">\n<p>Such a transition constitutes a <a href=\"https://en.wikipedia.org/wiki/Flag_day_(computing)\">flag day</a>, or breaking change.\nBelow are answers to frequently asked questions,\ninspired by Uma Chingunde's excellent framework for <a href=\"https://umach.medium.com/communicating-organizational-changes-6277e4b47cff\">communicating organizational changes</a> and building on the excellent <a href=\"https://community.jenkins.io/t/solving-failing-parent-pom-upgrade-from-4-51-to-4-52-cheatsheet/4958\">cheat sheet</a> started by Jean-Marc Meessen.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-is-the-change\"><a class=\"anchor\" href=\"#what-is-the-change\"></a>What is the change?</h3>\n<div class=\"paragraph\">\n<p>Beginning with <a href=\"https://github.com/jenkinsci/plugin-pom/releases/tag/plugin-4.52\">4.52</a>,\nthe plugin build toolchain requires Java 11 or newer and Jenkins 2.361 or newer.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"when-is-the-change-effective\"><a class=\"anchor\" href=\"#when-is-the-change-effective\"></a>When is the change effective?</h3>\n<div class=\"paragraph\">\n<p>The change is effective as of plugin parent POM 4.52, which was released on December 1, 2022.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"why-is-it-happening\"><a class=\"anchor\" href=\"#why-is-it-happening\"></a>Why is it happening?</h3>\n<div class=\"paragraph\">\n<p>Due to a large number of breaking changes in the upstream Java community,\nit became impractical to support both Java 8 and Java 11 in the same build toolchain.\nFor more details, see <a href=\"https://groups.google.com/g/jenkinsci-dev/c/pjfvsMw-EMM/m/OIw_hveUBwAJ\">the developer mailing list</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"who-is-affected-by-the-change\"><a class=\"anchor\" href=\"#who-is-affected-by-the-change\"></a>Who is affected by the change?</h3>\n<div class=\"paragraph\">\n<p>This change affects all plugin developers,\nparticularly those who receive updates to the plugin build toolchain via Dependabot pull requests.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-action-do-i-need-to-take\"><a class=\"anchor\" href=\"#what-action-do-i-need-to-take\"></a>What action do I need to take?</h3>\n<div class=\"paragraph\">\n<p>At a high level, three actions need to be taken, the third of which depends on the first two:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Adjust the <code>Jenkinsfile</code> to use Java 11 or newer, removing any Java 8 configuration(s).</p>\n</li>\n<li>\n<p>Update the baseline to 2.361 or newer.</p>\n</li>\n<li>\n<p>Update the plugin parent POM to 4.52 or newer.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>We will elaborate on each of these three points below.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"adjust-the-jenkinsfile-to-use-java-11-or-newer\"><a class=\"anchor\" href=\"#adjust-the-jenkinsfile-to-use-java-11-or-newer\"></a>Adjust the <code>Jenkinsfile</code> to use Java 11 or newer</h4>\n<div class=\"paragraph\">\n<p>First, consult the matrix of build configurations in the plugin's <code>Jenkinsfile</code>.\nThe goal is to ensure the plugin is building on Java 11 and 17 and not on Java 8,\nas recommended in <a href=\"https://github.com/jenkinsci/archetypes/blob/master/common-files/Jenkinsfile\">the latest version of the archetype</a>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">buildPlugin(\n  useContainerAgent: true, // Set to `false` if you need to use Docker for containerized tests\n  configurations: [\n    [platform: 'linux', jdk: 17],\n    [platform: 'windows', jdk: 11],\n])</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Note the explicit <code>configurations</code> entry with two versions: Java 11 and 17.\nIf there is an explicit configuration for Java 8, remove it&#8201;â€”&#8201;Java 8 is no longer supported as of plugin parent POM 4.52.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>If you are not already using container agents, we recommend adding <code>useContainerAgent: true</code> (but this is not mandatory).\nDoing so results in <code>ci.jenkins.io</code> spawning a <a href=\"https://github.com/jenkins-infra/documentation/blob/main/ci.adoc#container-agents\">container agent</a> for executing the build instead of a virtual machine,\nwhich is usually faster to start and reduces costs for the Jenkins project.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Some older <code>Jenkinsfile</code>s may not have an explicit list of configurations:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">buildPlugin()</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Such builds will use <a href=\"https://github.com/jenkins-infra/pipeline-library/blob/master/vars/buildPlugin.groovy\">the defaults for <code>buildPlugin()</code></a>,\nwhich (at the time of this writing) are Java 8 on Linux and Windows.\nSince plugin parent POM 4.52 and newer require Java 11, such a configuration is incompatible,\nand it should be changed to an explicit configuration that includes Java 11 and 17 as shown above.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nAt some point in the future, the default may change from Java 8 to Java 11; however, such a change was considered premature at the time of this writing.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Note that changes to a plugin's <code>Jenkinsfile</code> require write access to take effect in pull request builds.\nIf you submit a pull request to a repository to which you do not have write access,\nany <code>Jenkinsfile</code> changes will be ignored with this message:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p><code>Jenkinsfile</code> has been modified in an untrusted revision</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>Pending <a href=\"https://issues.jenkins.io/browse/JENKINS-46795\">JENKINS-46795</a>,\nthe pull request will need to be refiled by someone with write access\nto ensure the <code>Jenkinsfile</code> changes take effect.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"update-the-baseline-to-2-361-or-newer\"><a class=\"anchor\" href=\"#update-the-baseline-to-2-361-or-newer\"></a>Update the baseline to 2.361 or newer</h4>\n<div class=\"paragraph\">\n<p>The process for updating the baseline is described in <a href=\"/doc/developer/plugin-development/choosing-jenkins-baseline/\">the developer documentation</a>.\nTo summarize, set the <code>jenkins.version</code> property in <code>pom.xml</code> to 2.361 or newer:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><properties>\n  <jenkins.version>2.361.4</jenkins.version>\n</properties></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The baseline is often encoded in one other place in <code>pom.xml</code>: the version of the <a href=\"https://github.com/jenkinsci/bom\">plugin BOM</a>.\nCheck the <code><dependencyManagement></code> section for an entry with the group ID <code>io.jenkins.tools.bom</code> and an artifact ID that starts with <code>bom-</code>.\nIf there is such an entry,\nand if it is using a line older than the baseline,\nthen update it to match the baseline.\nFor the latest version, see <a href=\"https://github.com/jenkinsci/bom/releases\">the list of BOM releases</a>.\nAt the time of this writing, the latest version is 1750.v0071fa_4c4a_e3:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>io.jenkins.tools.bom</groupId>\n      <artifactId>bom-2.361.x</artifactId>\n      <version>1750.v0071fa_4c4a_e3</version>\n      <scope>import</scope>\n      <type>pom</type>\n    </dependency>\n  </dependencies>\n</dependencyManagement></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For more information about the plugin BOM, see its <a href=\"https://github.com/jenkinsci/bom\"><code>README</code></a>.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"update-the-plugin-parent-pom-to-4-52-or-newer\"><a class=\"anchor\" href=\"#update-the-plugin-parent-pom-to-4-52-or-newer\"></a>Update the plugin parent POM to 4.52 or newer</h4>\n<div class=\"paragraph\">\n<p>Having completed the above prerequisites,\nthe plugin parent POM can be successfully upgraded to 4.52 or newer.\nFor the latest version, see <a href=\"https://github.com/jenkinsci/plugin-pom/releases\">the list of plugin parent POM releases</a>.\nAt the time of this writing, the latest version is 4.53:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><parent>\n  <groupId>org.jenkins-ci.plugins</groupId>\n  <artifactId>plugin</artifactId>\n  <version>4.53</version>\n  <relativePath />\n</parent></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"java-level\"><a class=\"anchor\" href=\"#java-level\"></a>Java level</h4>\n<div class=\"paragraph\">\n<p>Some plugins may have a <code>Jenkinsfile</code> with an older <code>javaLevel</code> property,\nand some plugins may have a <code>pom.xml</code> file with a <code>java.level</code> property.\nThese have been deprecated since <a href=\"https://github.com/jenkinsci/plugin-pom/releases/tag/plugin-4.40\">plugin parent POM 4.40</a>.\nIf present, they should be deleted.\nAt the time of this writing, their presence will log a warning.</p>\n</div>\n<div class=\"admonitionblock warning\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-warning\" title=\"Warning\"></i>\n</td>\n<td class=\"content\">\nAt some point in the future, this warning will be changed to an error and will fail the build.\n</td>\n</tr>\n</table>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"other-flag-days\"><a class=\"anchor\" href=\"#other-flag-days\"></a>Other flag days</h4>\n<div class=\"paragraph\">\n<p>When updating the plugin parent POM from a version older than 4.39,\nyou may run into an error like the following:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>[ERROR] Failed to execute goal <code>org.jenkins-ci.tools:maven-hpi-plugin:3.38:hpi</code> (<code>default-hpi</code>) on project <code>azure-credentials</code>: Missing <code>target/classes/index.jelly</code>. Delete any <code><description></code> from <code>pom.xml</code> and create <code>src/main/resources/index.jelly</code></p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>This was a flag day introduced in <a href=\"https://github.com/jenkinsci/plugin-pom/releases/tag/plugin-4.39\">4.39</a>.\nSee the release notes for more information.</p>\n</div>\n<div class=\"paragraph\">\n<p>Similarly, be on the lookout for warnings like these:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>[WARNING] <code><connection>scm:git:git://github.com/${gitHubRepo}.git</connection></code> is invalid because <code>git://</code> URLs are deprecated. Replace it with <code><connection>scm:git:https://github.com/${gitHubRepo}.git</connection></code>. In the future this warning will be changed to an error and will break the build.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>Now is a good time to address them as suggested, though doing so is not mandatory.</p>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"is-there-an-example-i-can-follow\"><a class=\"anchor\" href=\"#is-there-an-example-i-can-follow\"></a>Is there an example I can follow?</h3>\n<div class=\"paragraph\">\n<p>Yes! Consult <a href=\"https://github.com/jenkinsci/text-finder-plugin/pull/138\">jenkinsci/text-finder-plugin#138</a> for an example.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-happens-if-i-fail-to-take-action\"><a class=\"anchor\" href=\"#what-happens-if-i-fail-to-take-action\"></a>What happens if I fail to take action?</h3>\n<div class=\"paragraph\">\n<p>Nothing will happen in the immediate future if you do not cross this flag day.\nYou can still build and release plugins with Java 8 and their current baseline.\nIn the long term, however, an out-of-date plugin build toolchain creates the risk of plugin compatibility testing (PCT) failures\nand negatively impacts the Jenkins core development team.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you neglect to update the baseline to 2.361 or newer, you will receive the following error:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>This version of <code>maven-hpi-plugin</code> requires Jenkins 2.361 or later.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>If you neglect to update the <code>Jenkinsfile</code> to remove any Java 8 configurations (or try to build locally with Java 8),\nyou will receive a low-level class version error:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>[ERROR] Failed to execute goal <code>org.jenkins-ci.tools:maven-hpi-plugin:3.38:validate</code> (<code>default-validate</code>) on project <code>text-finder</code>: Execution <code>default-validate</code> of goal <code>org.jenkins-ci.tools:maven-hpi-plugin:3.38:validate</code> failed: Unable to load the mojo <code>validate</code> in the plugin <code>org.jenkins-ci.tools:maven-hpi-plugin:3.38</code> due to an API incompatibility: <code>org.codehaus.plexus.component.repository.exception.ComponentLookupException</code>: <code>org/jenkinsci/maven/plugins/hpi/ValidateMojo</code> has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</p>\n</div>\n</blockquote>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"whom-should-i-contact-for-help\"><a class=\"anchor\" href=\"#whom-should-i-contact-for-help\"></a>Whom should I contact for help?</h3>\n<div class=\"paragraph\">\n<p>If you have doubts or if the information in this post does not work for you,\ndo not hesitate to discuss the matter on <a href=\"https://groups.google.com/g/jenkinsci-dev/c/pjfvsMw-EMM/m/OIw_hveUBwAJ\">the developer mailing list</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-future-work-is-planned\"><a class=\"anchor\" href=\"#what-future-work-is-planned\"></a>What future work is planned?</h3>\n<div class=\"paragraph\">\n<p>We recognize that maintaining plugin builds can be onerous for many,\nespecially when crossing flag days like this.\nLike <a href=\"http://www.linker-aliens.org\">linkers and loaders</a>,\nJenkins plugin build maintenance is a sub-specialty within a sub-specialty.\nIn the long term, we aspire and hope to automate much of this build maintenance\nto allow the community to focus its attention on the delivery of features and bug fixes.\nIn the meantime, we appreciate the community's patience and support as we pass through these periods of transition.</p>\n</div>\n</div>\n</div>\n</div>"
}