{
  "id": "2025-03-2025-03-26-design-post",
  "url": "/blog/2025/03/26/2025-03-26-design-post/",
  "title": "Redesigning Jenkins (Part One)",
  "date": "2025-03-26",
  "authors": [
    "janfaracik"
  ],
  "tags": [
    "jenkins",
    "user-experience",
    "ux"
  ],
  "summary": "Jenkins is the most used CI/CD platform in the world.",
  "opengraph_image": "/images/post-images/2025/03/2025-03-26-design-post/opengraph.png",
  "content_html": "<div class=\"imageblock center\">\n<div class=\"content\">\n<img src=\"/images/post-images/2025/03/2025-03-26-design-post/banner.png\" alt=\"banner\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins is the most used CI/CD platform in the world. It's one of the oldest, most mature systems in\ncontinuous integration and delivery, and it powers software pipelines across critical industries like finance,\nhealthcare, and government.\nWith over a million lines of code, more than 2,000 plugins, and millions of users,\nJenkins is less a \"tool\" and more of a global infrastructure backbone.</p>\n</div>\n<div class=\"paragraph\">\n<p>And because of all that - making changes is hard. Really hard.</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"part-one-the-problem\"><a class=\"anchor\" href=\"#part-one-the-problem\"></a>Part One - The Problem</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The web has evolved significantly since Jenkins' inception - and as a result of that we've been carrying a lot of\nlegacy technology along the way.</p>\n</div>\n<div class=\"paragraph\">\n<p>We’ve carried forward legacy technologies like <a href=\"http://prototypejs.org\">Prototype.js</a>, <a href=\"https://yui.github.io/yui2/\">YUI 2</a>,\n<a href=\"https://lesscss.org\">LESS</a>, fragments of <a href=\"https://jquery.com\">early jQuery</a>, and a patchwork of UI components from\ndifferent eras of frontend development. The result? A frontend stack that's tough to maintain, painful to extend, and a\nreal barrier for contributors.</p>\n</div>\n<div class=\"paragraph\">\n<p>That's not a knock on Jenkins - it's just the reality of any large, long-lived platform.\nOver time, the ground shifts beneath you.\nWhat was best practice in 2005 becomes technical debt in 2025.</p>\n</div>\n<div class=\"paragraph\">\n<p>So, we knew something had to change.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"maintaining-compatibility\"><a class=\"anchor\" href=\"#maintaining-compatibility\"></a>Maintaining compatibility</h3>\n<div class=\"paragraph\">\n<p>In modernizing the Jenkins frontend, our foremost priority has been to preserve backwards compatibility,\nmaintain platform stability, and ensure that no production pipelines are disrupted as a result of UI or\nframework changes.\nGiven Jenkins' role in powering mission-critical CI/CD workflows across global\nenterprises, even small regressions can have far-reaching impact.</p>\n</div>\n<div class=\"paragraph\">\n<p>To achieve this, our approach has been pragmatic, cautious, and highly incremental.\nRather than introducing disruptive overhauls, we have focused on gradually modernizing the codebase over a period\nof several years, ensuring each change is thoroughly tested and validated in real-world use cases.</p>\n</div>\n<div class=\"paragraph\">\n<p>All enhancements are subject to comprehensive automated testing, including compatibility checks against\nJenkins' vast plugin ecosystem.\nIn addition, our weekly release cycle provides early visibility into changes and allows us to gather feedback\nfrom a broad subset of users before changes are widely adopted.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"resetting-the-foundations\"><a class=\"anchor\" href=\"#resetting-the-foundations\"></a>Resetting the foundations</h3>\n<div class=\"paragraph\">\n<p>Before we could take on the bigger challenges, we needed to start with the basics.\nA major part of this work has involved modernizing the foundations of the Jenkins frontend - removing outdated\ntechnologies, cleaning up legacy code, and laying the groundwork for a more flexible, maintainable, and\nfuture-proof platform.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first significant milestone in the modernization of the Jenkins frontend was the removal of Prototype.js, a\nlegacy JavaScript framework that had long been a constraint on adopting modern JavaScript syntax and practices.\nPrototype.js had been deeply intertwined with core components of the Jenkins UI, acting as a technical barrier\nto progress and modernization. Its removal, as outlined in\n<a href=\"/blog/2023/05/12/removing-prototype-from-jenkins/\">Basil's blog post</a>, marked the end of a major blocker and\nunlocked the ability to implement long-awaited updates and improvements.\nThis change has not only improved code readability and maintainability but also enabled the Jenkins frontend to\nembrace more contemporary JavaScript standards, fostering a cleaner and more robust development environment.</p>\n</div>\n<div class=\"paragraph\">\n<p>One of the most impactful changes was the removal of Yahoo User Interface (YUI), a legacy JavaScript library that had\nbeen <em>deeply</em> embedded throughout various areas of the Jenkins UI and its plugins.\nYUI’s presence significantly complicated the frontend architecture and asset management. Removing it was a\nsubstantial undertaking, but it drastically streamlined the asset tree and reduced technical debt across the codebase. As of <a href=\"/changelog/2.492.1/\">Jenkins 2.492.1</a>, YUI is now disabled by default.\nThis effort culminated in a major cleanup of the codebase, with <a href=\"https://github.com/jenkinsci/jenkins/pull/10135\">over <em>85,000 lines of code removed</em></a>, significantly simplifying the platform and paving the\nway for more modern, maintainable development practices.</p>\n</div>\n<div class=\"paragraph\">\n<p>Another important step in modernizing the Jenkins frontend has been the migration from\n<a href=\"https://github.com/jenkinsci/jenkins/pull/7850\">LESS to SCSS</a>, a small but meaningful improvement in our styling\narchitecture.\nSCSS offers better language features, stronger community support, and better compatibility with modern\ntooling.\nWe've also been modularizing our legacy CSS into discrete, maintainable style modules, making it easier to\nenforce consistency, isolate concerns, and improve reusability.</p>\n</div>\n<div class=\"paragraph\">\n<p>We have also undertaken a broader initiative to standardize the use of modern JavaScript across the Jenkins codebase,\nembracing ES6+ syntax, modular architecture, and improved use of browser-native APIs.\nThis shift has been pivotal in improving code readability, maintainability, and performance. Legacy inline scripts and\nglobally scoped functions are gradually being replaced with well-structured, reusable JavaScript modules, bringing the\nfrontend architecture in line with modern development practices.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-approach\"><a class=\"anchor\" href=\"#the-approach\"></a>The approach</h3>\n<div class=\"paragraph\">\n<p>We've deliberately avoided introducing new complex frameworks and heavyweight dependencies.\nModern JavaScript - just plain, native JS - is more than capable these days.\nWith modern JavaScript we can write expressive, maintainable code without any additional overhead.</p>\n</div>\n<div class=\"paragraph\">\n<p>That doesn't mean we're afraid of modern tooling - just that we're selective.\nThe goal is to lower the barrier to entry for contributors, not raise it. Jenkins has hundreds of people around the\nworld contributing in all kinds of ways - we don't want our frontend stack to be a gatekeeper.</p>\n</div>\n<div class=\"paragraph\">\n<p>Every one of these changes helps reduce complexity, improve maintainability, and pave the way for more ambitious\nUI improvements.\nSome of these changes might seem small from the outside, but collectively they've laid a new foundation\nfor Jenkins.\nThis is the groundwork that makes future UX improvements possible - things like cleaner plugin integration,\nimproved accessibility, better navigation, and modern UI components.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"whats-next\"><a class=\"anchor\" href=\"#whats-next\"></a>What's next</h3>\n<div class=\"paragraph\">\n<p>In Part Two, we'll dive deeper into the design decisions behind some of the new UI features, how we're improving the\ndeveloper experience, and what we're doing to ensure compatibility across the plugin ecosystem without slowing\ndown progress.</p>\n</div>\n<hr>\n<div class=\"paragraph\">\n<p>If you want to get involved in the UI and UX discussions of Jenkins join the <a href=\"/sigs/ux\">User Experience SIG</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Take advantage of new components and patterns in your plugin via the <a href=\"https://weekly.ci.jenkins.io/design-library/\">Design Library</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can watch our monthly meetings on <a href=\"https://www.youtube.com/playlist?list=PLN7ajX_VdyaOnsIIsZHsv_fM9QhOcajWe\">YouTube</a> and you can view in-progress work on <a href=\"https://github.com/jenkinsci/jenkins/pulls?q=is%3Apr+is%3Aopen+label%3Aweb-ui\">GitHub</a>.</p>\n</div>\n</div>\n</div>\n</div>"
}