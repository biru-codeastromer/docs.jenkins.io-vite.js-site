{
  "id": "2025-05-2025-05-22-jenkins-on-android",
  "url": "/blog/2025/05/22/2025-05-22-jenkins-on-android/",
  "title": "Android and Jenkins: What Is the Limit? Part Two.",
  "date": "2025-05-22",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "jenkins",
    "android",
    "aarch64",
    "termux"
  ],
  "summary": "I know it's been over two years since the first article of this series, but hey, life happens.",
  "opengraph_image": "/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/love-part-2-16-9.png",
  "content_html": "<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/love-part-2-16-9.png\" alt=\"jenkins hugging bugdroid\" width=\"500\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>I know it's been over two years since <a href=\"/blog/2023/03/30/android-and-jenkins/\">the first article</a> of this series, but hey, life happens!\nI've been juggling quite a few things that are more important for the Jenkins project.\nLet's face it, nobody's losing sleep over running Jenkins on Android.\nBut hey, sometimes you just gotta indulge in a bit of tech whimsy, am I right?</p>\n</div>\n<div class=\"paragraph\">\n<p>So, here we are, diving back into this almost frivolous experiment to see just how far we can push the Jenkins-Android interaction.\nThere are essentially two ways to stretch the boundaries with Jenkins and Android:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Building Android apps with Jenkins</p>\n</li>\n<li>\n<p>Running Jenkins on an Android device</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Now, the first option has already had its moment in the spotlight in another series of articles, so we're turning our attention to the latter.\nWhy, you might ask?\nWell, because why not? Because we're tech enthusiasts, and if there's a crazy idea floating around, we're going to give it a try!</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"setting-up-a-jenkins-controller-on-android\"><a class=\"anchor\" href=\"#setting-up-a-jenkins-controller-on-android\"></a>Setting up a Jenkins controller on Android</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>In <a href=\"/blog/2023/03/30/android-and-jenkins/\">the previous article</a>, we already laid the groundwork for running a Jenkins agent on Android.\nWe installed <a href=\"https://wiki.termux.com/\">Termux</a>, <a href=\"https://www.openssh.com/\">OpenSSH</a>, and <a href=\"/blog/2023/03/30/android-and-jenkins/#installing-java-on-termux\">Java</a> on the Android device, and confirmed that the agent could be reached from a grown-up Jenkins controller.\nWe even got it to run a FreeStyle pipeline that spat out the result of the <code>uname -a</code> command.<br>\nQuite the achievement, huh?</p>\n</div>\n<div class=\"paragraph\">\n<p>For this experiment, we're sticking with my old Redmi Note 7, still chugging along with Android 10.\nNow, keep in mind, this device got benched because it couldn't keep up with my daily pace, so it's not exactly a powerhouse for Jenkins.\nSure, I could've slapped Linux on it instead, but where's the fun in taking the easy route, right?\nLet's see if we can kickstart a Jenkins controller on this bad boy!</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"launching-the-controller-via-java-command\"><a class=\"anchor\" href=\"#launching-the-controller-via-java-command\"></a>Launching the controller via Java command</h3>\n<div class=\"paragraph\">\n<p>Now, I've dabbled with memory-constrained devices before, and I know a Jenkins controller can work with a measly 1GB of RAM.\nI have no clue how much of that sweet memory pie the Android system will serve up to Termux, or how much Termux will pass along to the JVM, but hey, let's roll the dice!\nWhen I SSH in from my PC, here's what I see:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">☎  Jenkins@localhost:~ $free -h\n               total        used        free      shared  buff/cache   available\nMem:           3.6Gi       2.1Gi        80Mi       3.0Mi       1.5Gi       1.3Gi\nSwap:          2.2Gi       1.6Gi       623Mi</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Looks like we're sitting on a cozy 3.6GB of RAM, which should be just about enough to wrangle a Jenkins controller into submission.\nLet's fire it up using the trusty <code>jenkins.war</code> file, the lazy dev's best friend!<br>\nBut first, a quick pit stop to grab the <a href=\"https://get.jenkins.io/war-stable/latest/jenkins.war\">latest LTS version of Jenkins</a>.<br>\n<a href=\"/download/#downloading-jenkins\">The official documentation</a> says it's <code>2.504.1</code> at the time of writing, but, you know, details.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg install curl</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now, with our newfound love for curl, let's snag that <code>jenkins.war</code> file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">curl -L -O https://get.jenkins.io/war-stable/latest/jenkins.war</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The next step is to grab a newer version of Java, as things have changed quite a lot since our first experiment!</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg install fontconfig freetype openjdk-21 ttf-dejavu</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Installing fonts with your JDK may feel like inviting a violinist to a rock concert — but Jenkins insists.\nWithout them, it simply refuses to show up.</p>\n</div>\n<div class=\"paragraph\">\n<p>With the file safely in our grasp, it's showtime!\nLet's unleash Jenkins upon this unsuspecting Android device:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">java -jar jenkins.war</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The familiar lines start flowing:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">☎  Jenkins@localhost:~$ java -jar jenkins.war\nRunning from: /data/data/com.termux/files/home/jenkins.war\nwebroot: /data/data/com.termux/files/home/.jenkins/war\n2025-05-20 20:09:14.289+0000 [id=1]     INFO    winstone.Logger#logInternal: Beginning extraction from war file\n2025-05-20 20:09:16.517+0000 [id=1]     WARNING o.e.j.ee9.nested.ContextHandler#setContextPath: Empty contextPath\n2025-05-20 20:09:16.697+0000 [id=1]     INFO    org.eclipse.jetty.server.Server#doStart: jetty-12.0.19; built: 2025-04-01T13:28:40.005Z; git: 23436cd577b4238238eb192683dfc2b1476c6b87; jvm 21.0.7\n2025-05-20 20:09:18.588+0000 [id=1]     INFO    o.e.j.e.w.StandardDescriptorProcessor#visitServlet: NO JSP Support for /, did not find org.eclipse.jetty.ee9.jsp.JettyJspServlet\n2025-05-20 20:09:18.752+0000 [id=1]     INFO    o.e.j.s.DefaultSessionIdManager#doStart: Session workerName=node0\n2025-05-20 20:09:20.372+0000 [id=1]     INFO    hudson.WebAppMain#contextInitialized: Jenkins home directory: /data/data/com.termux/files/home/.jenkins found at: $user.home/.jenkins\n2025-05-20 20:09:21.099+0000 [id=1]     INFO    o.e.j.s.handler.ContextHandler#doStart: Started oeje9n.ContextHandler$CoreContextHandler@1ff55ff{Jenkins v2.504.1,/,b=file:///data/data/com.termux/files/home/.jenkins/war/,a=AVAILABLE,h=oeje9n.ContextHandler$CoreContextHandler$CoreToNestedHandler@351f2244{STARTED}}\n2025-05-20 20:09:21.133+0000 [id=1]     INFO    o.e.j.server.AbstractConnector#doStart: Started ServerConnector@38a1a26{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2025-05-20 20:09:21.185+0000 [id=1]     INFO    org.eclipse.jetty.server.Server#doStart: Started oejs.Server@3b0c9195{STARTING}[12.0.19,sto=0] @9778ms\n2025-05-20 20:09:21.189+0000 [id=37]    INFO    winstone.Logger#logInternal: Winstone Servlet Engine running: controlPort=disabled\n2025-05-20 20:09:21.632+0000 [id=36]    INFO    jenkins.model.Jenkins#<init>: Starting version 2.504.1\n2025-05-20 20:09:22.307+0000 [id=45]    INFO    jenkins.InitReactorRunner$1#onAttained: Started initialization\n2025-05-20 20:09:22.408+0000 [id=52]    INFO    jenkins.InitReactorRunner$1#onAttained: Listed all plugins\n2025-05-20 20:09:25.596+0000 [id=52]    INFO    jenkins.InitReactorRunner$1#onAttained: Prepared all plugins\n2025-05-20 20:09:25.612+0000 [id=52]    INFO    jenkins.InitReactorRunner$1#onAttained: Started all plugins\n2025-05-20 20:09:25.622+0000 [id=45]    INFO    jenkins.InitReactorRunner$1#onAttained: Augmented all extensions\n2025-05-20 20:09:26.201+0000 [id=49]    INFO    jenkins.InitReactorRunner$1#onAttained: System config loaded\n2025-05-20 20:09:26.204+0000 [id=56]    INFO    jenkins.InitReactorRunner$1#onAttained: System config adapted\n2025-05-20 20:09:26.207+0000 [id=56]    INFO    jenkins.InitReactorRunner$1#onAttained: Loaded all jobs\n2025-05-20 20:09:26.215+0000 [id=48]    INFO    jenkins.InitReactorRunner$1#onAttained: Configuration for all jobs updated\n2025-05-20 20:09:26.312+0000 [id=72]    INFO    hudson.util.Retrier#start: Attempt #1 to do the action check updates server\n2025-05-20 20:09:27.062+0000 [id=54]    INFO    jenkins.install.SetupWizard#init:\n\n*************************************************************\n*************************************************************\n*************************************************************\n\nJenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\na20b27ff6f684fa3bdf05d909e0bf1e4\n\nThis may also be found at: /data/data/com.termux/files/home/.jenkins/secrets/initialAdminPassword\n\n*************************************************************</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The web page is also looking familiar, except for the path where the password is stored:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/unlock-jenkins.png\" alt=\"standard first Jenkins screen\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>All seems well, until Jenkins throws a tantrum about the absence of a <code>/tmp</code> dir:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">/tmp does not exist.</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins throws a fit when it can’t find <code>/tmp</code>.\nWe’ll avoid the drama by setting <code>$PREFIX/tmp</code> as its temp playground later on.</p>\n</div>\n<div class=\"paragraph\">\n<p>Minor hiccup aside, the installation chugs along smoothly, and the default plugins find their cozy little corner.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/plugins-install.png\" alt=\"standard plugins install\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The journey nears its end, punctuated by the customary security warning about the use of the built-in node.\n<span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/security-issue.png\" alt=\"standard security warning\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Nothing to do with Termux, but we'll iron out the kinks later.</p>\n</div>\n<div class=\"paragraph\">\n<p>We’ll want to show off a bit later, so let’s get the plugin:platformlabeler[Platform Labeler] plugin ready.\nGo to \"<em>Manage Jenkins</em>\" > \"<em>Plugins</em>\" > \"<em>Available Plugins</em>\", search for it, check the box, and select the blue \"Install\" button. Yes, it’s that easy.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now go back to your console, and <kbd>Ctrl+C</kbd> so you firmly ask Jenkins to shut down.</p>\n</div>\n<div class=\"paragraph\">\n<p>Quite the milestone, huh?<br>\nWe've proven that we can kickstart a Jenkins controller using Termux on an Android device.<br>\nBut hold onto your hats, folks!\nWe're not done just yet.<br>\nNext up, we'll ensure this Jenkins controller can strut its stuff as a service, and then, we'll tweak it to kick off automatically at boot time.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"what-is-a-service-and-why-do-we-need-it\"><a class=\"anchor\" href=\"#what-is-a-service-and-why-do-we-need-it\"></a>What is a service, and why do we need it?</h3>\n<div class=\"paragraph\">\n<p>Now, we could just let Jenkins lurk in the shadows, but where's the fun in that?\nWhat if Android decides to play the ultimate prank and terminate Termux, or the device throws a fit and decides to reboot?\nWe'd be stuck manually resurrecting Jenkins every single time, and that's just not the cricket we signed up for.<br>\nSo, let's give Jenkins a promotion, shall we? Time to turn it into a proper service!</p>\n</div>\n<div class=\"paragraph\">\n<p>The standard Jenkins installation <a href=\"/blog/2022/03/25/systemd-migration/\">migrated from <code>init</code> to <code>systemd</code></a> a while back.\nUnfortunately, Termux isn't in on the <code>systemd</code> party, so we'll have to make do with the tools it offers.<br>\nEnter <a href=\"https://wiki.termux.com/wiki/Termux-services\">termux-services</a>, a handy collection of scripts for service wrangling.<br>\nInstead of cluttering up <code>~/.bashrc</code> or <code>~/.bash_profile</code>, we can now start and stop services with a flick of the wrist, thanks to termux-services.<br>\nThere's already a smorgasbord of existing services ready to roll, and just like with <code>systemd</code>, there's nothing stopping us from crafting a bespoke service for our beloved Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>To get termux-services up and running, execute:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg install termux-services runit\nservice-daemon start</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, give Termux a gentle nudge so that the service-daemon springs to life.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">exit</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Next up, to unleash the power of a service, fire off:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv-enable <service></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you're in the mood for a one-off joyride, a simple:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv up <service></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>will suffice.<br>\nAnd when it's time to hit the brakes, just tap into your inner traffic cop with:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv down <service></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Or, if you're feeling particularly ruthless, disable it altogether:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv-disable <service></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>A service is like a restless spirit shackled to this mortal realm if <code>$PREFIX/var/service/<service>/down</code> exists, so the <code>sv-enable</code> and <code>sv-disable</code> scripts play a little game of touch-and-go with this file.</p>\n</div>\n<div class=\"paragraph\">\n<p>Under the hood, termux-services taps into the mighty <a href=\"http://smarden.org/runit/\">runit</a> to reign in the chaos of services.<br>\nYou'll find a treasure trove of example scripts on the <a href=\"http://smarden.org/runit/runscripts.html\">runit website</a>.<br>\nIf you spot a script you fancy, or if you're feeling particularly creative, just follow these steps:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mkdir -p $PREFIX/var/service/<PKG>/log\nln -sf $PREFIX/share/termux-services/svlogger $PREFIX/var/service/<PKG>/log/run</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, tuck your run script snugly into <code>$PREFIX/var/service/<PKG>/run</code>, making sure it's ready for its close-up.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can then run</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv up <PKG></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>to breathe life into your creation.</p>\n</div>\n<div class=\"paragraph\">\n<p>The log files for these services bask in the limelight at <code>$PREFIX/var/log/sv/<PKG>/</code>, with the star of the show bearing the name \"current\".</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"turning-jenkins-into-a-service-for-smooth-sailing\"><a class=\"anchor\" href=\"#turning-jenkins-into-a-service-for-smooth-sailing\"></a>Turning Jenkins into a service for smooth sailing</h3>\n<div class=\"paragraph\">\n<p>Now that we've mastered the art of creating and deploying services with Termux, let's give our Jenkins controller a promotion.<br>\nFirst up, we need to whip up a script to kickstart Jenkins as a service.\nLet's call it <code>run</code> and tuck it snugly into the <code>$PREFIX/var/service/jenkins/</code> directory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">mkdir -p $PREFIX/var/service/jenkins\ncd $PREFIX/var/service/jenkins\ncat >> run <<EOF\n#!$PREFIX/usr/bin/bash\nJENKINS_LOG=/data/data/com.termux/files/home/.jenkins/logs/jenkins.log\n$PREFIX/usr/bin/java -Djava.io.tmpdir=$PREFIX/tmp -jar $HOME/jenkins.war --logfile=${JENKINS_LOG}\nEOF\nchmod +x run\nmkdir -p $HOME/.jenkins/logs\ntouch $HOME/.jenkins/logs/jenkins.log</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With our script ready, let's test if Jenkins plays nice as a service:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">sv-enable jenkins\nsv up jenkins</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Time to peek under the hood and see if Jenkins is revving up by checking the logs:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">tail -f $HOME/.jenkins/logs/jenkins.log&</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Voilà! Standard Jenkins logs, just like we're accustomed to seeing on a run-of-the-mill server.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">2025-05-18 14:13:27.380+0000 [id=1]     WARNING o.e.j.s.handler.ContextHandler#setContextPath: Empty contextPath\n2025-05-18 14:13:27.446+0000 [id=1]     INFO    org.eclipse.jetty.server.Server#doStart: jetty-10.0.20; built: 2024-01-29T20:46:45.278Z; git: 3a745c71c23682146f262b99f4ddc4c1bc41630c; jvm 17-internal+0-adhoc..src\n2025-05-18 14:13:27.727+0000 [id=1]     INFO    o.e.j.w.StandardDescriptorProcessor#visitServlet: NO JSP Support for /, did not find org.eclipse.jetty.jsp.JettyJspServlet\n2025-05-18 14:13:27.780+0000 [id=1]     INFO    o.e.j.s.s.DefaultSessionIdManager#doStart: Session workerName=node0\n2025-05-18 14:13:28.355+0000 [id=1]     INFO    hudson.WebAppMain#contextInitialized: Jenkins home directory: /data/data/com.termux/files/home/.jenkins found at: $user.home/.jenkins\n2025-05-18 14:13:28.524+0000 [id=1]     INFO    o.e.j.s.handler.ContextHandler#doStart: Started w.@216914{Jenkins v2.504.1,/,file:///data/data/com.termux/files/home/.jenkins/war/,AVAILABLE}{/data/data/com.termux/files/home/.jenkins/war}\n2025-05-18 14:13:28.538+0000 [id=1]     INFO    o.e.j.server.AbstractConnector#doStart: Started ServerConnector@395b56bb{HTTP/1.1, (http/1.1)}{0.0.0.0:8080}\n2025-05-18 14:13:28.570+0000 [id=1]     INFO    org.eclipse.jetty.server.Server#doStart: Started Server@13f17eb4{STARTING}[10.0.20,sto=0] @2771ms</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>With Jenkins now up and about, you can access it at the port 8080 on your trusty Android device.\n<span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/jenkins-home.png\" alt=\"standard Jenkins home page\" width=\"860\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"ensuring-availability-from-boot-for-uninterrupted-service\"><a class=\"anchor\" href=\"#ensuring-availability-from-boot-for-uninterrupted-service\"></a>Ensuring availability from boot for uninterrupted service</h3>\n<div class=\"paragraph\">\n<p>We've hit two major milestones:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Getting a Jenkins controller up and running on an Android device.</p>\n</li>\n<li>\n<p>Successfully running Jenkins as a service on the Android device whenever we fire up Termux.</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Pretty cool, right?<br>\nBut what if the device decides to throw a curveball and reboots?\nI know, this whole experiment is just a tech whimsy, but let's push the boundaries and see how far we can take it.\nFrankly, even if I'm just treating this as a fun experiment, I'd rather not deal with the hassle of launching Termux every time I reboot the device.<br>\nSo what's the logical next step?\nAdding the Jenkins service to the roster of auto-starting services when the device boots up.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"installation-of-termuxboot\"><a class=\"anchor\" href=\"#installation-of-termuxboot\"></a>Installation of Termux:Boot</h4>\n<div class=\"paragraph\">\n<p>First things first, let's get our hands on the Termux:Boot add-on from <a href=\"https://f-droid.org/packages/com.termux.boot/\">F-Droid</a>.\nImportant note: Keep your installations of Termux and add-ons strictly from one source, either Google Play or F-Droid.\nMixing them up can lead to compatibility issues due to different key-signing methods.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Install the Termux:Boot app.</p>\n</li>\n<li>\n<p>Head over to your Android settings and give Termux and Termux:Boot the green light by turning off battery optimizations for these apps.</p>\n</li>\n<li>\n<p>Give the Termux:Boot app a friendly tap to start it up.\nThis ensures it gets the memo to kick into action at boot time.</p>\n</li>\n<li>\n<p>Ready for some directory magic?\nLet's create the <code>~/.termux/boot/</code> directory: This is where you'll stash all the scripts you want to fire up on boot.</p>\n</li>\n</ol>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre>mkdir -p ~/.termux/boot/</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you've got a bunch of scripts, fear not — they'll line up and execute in a nice, orderly fashion.\n<strong>Pro tip</strong>: Keep your device wide awake by running <code>termux-wake-lock</code> right off the bat.\nFor example, to kickstart an sshd server and keep your device bright-eyed and bushy-tailed at boot, craft a little script like this one at <code>~/.termux/boot/start-sshd</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">#!/data/data/com.termux/files/usr/bin/sh\ntermux-wake-lock\nsshd</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Don't you forget to make it executable:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">chmod 755 ~/.termux/boot/start-sshd</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And if you're itching to have Termux-services do their thing at boot time, simply throw in:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">#!/data/data/com.termux/files/usr/bin/sh\ntermux-wake-lock\n. $PREFIX/etc/profile</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This nifty snippet will unleash all the services that are raring to go in termux-services.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"adding-jenkins-to-the-list-of-services-that-start-automatically\"><a class=\"anchor\" href=\"#adding-jenkins-to-the-list-of-services-that-start-automatically\"></a>Adding Jenkins to the list of services that start automatically</h4>\n<div class=\"paragraph\">\n<p>Now, let's add Jenkins to the list of services that start automatically when the device boots up.\nCraft a script named <code>~/.termux/boot/start-jenkins</code> and give it the following content:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">#!/data/data/com.termux/files/usr/bin/sh\ntermux-wake-lock\nsv up jenkins</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Without <code>chmod +x</code>, your <code>start-jenkins</code> script is just a very well-written suggestion.\nRun it, or Jenkins won’t be there when you reboot.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">chmod 755 $HOME/.termux/boot/start-jenkins</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And there you have it!\nJenkins is now part of the elite club of services that kick off automatically when the device boots up.\nNow, you can rest easy knowing that your Jenkins controller will be up and running, ready to tackle any task you throw its way.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"checking-jenkins-boot-up-performance\"><a class=\"anchor\" href=\"#checking-jenkins-boot-up-performance\"></a>Checking Jenkins' boot-up performance</h4>\n<div class=\"paragraph\">\n<p>To ensure that Jenkins is indeed strutting its stuff when the device boots up, let's put it to the test — give that device a good old reboot.<br>\nBut before you hit that restart button, make sure you've given termux-boot a hearty handshake at least once and sorted out all the necessary permissions.<br>\nThat means letting it run in the background and disabling battery optimization.\nAnd if you're rocking a phone with MIUI, well, hold onto your hats — you might need to do a little extra dance to get things grooving smoothly.<br>\nHead on over to the settings, and summon the magic word \"background\".\nHunt down an item called \"Background autostart\" and flip the switch for termux-boot and termux.<br>\nEt voilà! You've just unleashed the boot-time prowess of termux on MIUI.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adding-a-jenkins-agent-on-android\"><a class=\"anchor\" href=\"#adding-a-jenkins-agent-on-android\"></a>Adding a Jenkins agent on Android</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>So, Jenkins on Android is strutting its stuff, but it's throwing a fit about missing its sidekick, the agent.\nCan't have Jenkins sulking; let's get that agent up and running on Android, shall we?\n<span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/jenkins-complaining.png\" alt=\"Jenkins complaining about the absence of an agent\" width=\"860\"></span></p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"establishing-ssh-connection-for-agent-integration\"><a class=\"anchor\" href=\"#establishing-ssh-connection-for-agent-integration\"></a>Establishing SSH connection for agent integration.</h3>\n<div class=\"paragraph\">\n<p>Remember when we <a href=\"/blog/2023/03/30/android-and-jenkins/#setting-up-public-key-authentication\">conjured up an SSH key pair</a> for our Android device?\nWell, we're going to do it again for the agent.\nTime to add the public key to the <code>~/.ssh/authorized_keys</code> file on the Android device.<br>\nGet ready to unleash some command-line magic:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">☎  Jenkins@localhost:~ $ssh-keygen -t rsa -b 4096 -C \"jenkins-agent\"\nEnter file in which to save the key (/data/data/com.termux/files/home/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /data/data/com.termux/files/home/.ssh/id_rsa\nYour public key has been saved in /data/data/com.termux/files/home/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:rpaD/RohRXJsXAYTOahQWpIsih9vhzgl7G9PO23MujI jenkins-agent\nThe key's randomart image is:\n+---[RSA 4096]----+\n|ooo .+*=o        |\n|+=  .+*o         |\n|=o . ...         |\n|o = ..           |\n| o *... S        |\n|  = +..o         |\n|   + +o=.        |\n|    E.*+=        |\n|   . =BO.        |\n+----[SHA256]-----+\n☎  Jenkins@localhost:~ $cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCb+j8eUrnWLh4DWSY8C9t5iNa9AtcIn2oShDUi4ATLKcyPINAmCcDVw19uzhFd+J836iKEFScx9Qw7zuv9iNWEjxEERXyFHXt8A9lMf78aeK4dvDei60JEN5+28YO7ctlQ39+wzHXIMtrFiBTeIFpIjPqM1EskKqTq8ySty+TrozCySXnFgbceP9NN+KZSzqyoYpjgMgYVtUTMSbnggFuWxfQms9a7tBLqv2GJzLoYJnWajXtrRokctQ/JyRFCZND7zhCF4cjyoI505tRgBUp7E3KV7CYiETV+7gQ92dV7K9Lf0u0OVQ== jenkins-agent</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To add the generated public key to the authorized keys file, we can use the <code>cat</code> command to append the public key to the <code>~/.ssh/authorized_keys</code> file.\nHere's how we can do it:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This command will add the contents of the <code>id_rsa.pub</code> file (which is our public key) to the <code>authorized_keys</code> file.\nIf the <code>authorized_keys</code> file doesn't exist, no worries – it'll be conjured into existence for us.<br></p>\n</div>\n<div class=\"paragraph\">\n<p>Now, before we get too carried away with our newfound access, let's ensure our digital fortress is properly fortified.\nThe <code>~/.ssh</code> directory should flaunt permissions worthy of a royal decree: <code>700 (drwx------)</code>.\nMeanwhile, the <code>authorized_keys</code> file should be wrapped in the impenetrable cloak of <code>600 (-rw-------)</code> permissions.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you're feeling particularly wizardly, you can set these permissions using the <code>chmod</code> command:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">chmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let's infuse this with a touch of levity:</p>\n</div>\n<div class=\"paragraph\">\n<p>If you're still getting the password runaround when attempting to connect, there's a chance our SSH server isn't keen on our public key party trick.<br>\nTime to play detective!\nNavigate to the <code>$PREFIX/etc/ssh/sshd_config</code> file and make sure it hasn't ghosted us.\nLook for a line that reads like the magic incantation we need:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">PubkeyAuthentication yes</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If you've been tinkering with the <code>sshd_config</code> file, remember to give the SSH service a friendly nudge to let it know about the changes.\nNow that we've got the key to the kingdom, it's time to set up a VIP pass for Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Take a stroll over to the Jenkins controller and swing by \"<em>Manage Jenkins</em>\" > \"<em>Credentials</em>\" > \"<em>System</em>\".\nNext, hover over \"<em>Global credentials (unrestricted)</em>\" like a champ, select the down arrow, and select \"<em>Add Credentials</em>\".</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, choose \"<em>SSH Username with private key</em>\" as the type of credential, and let's fill in the details:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><em>Username</em>: <code><your termux user name></code></p>\n</li>\n<li>\n<p><em>Private Key</em>: <em>Enter directly</em>, and paste the content of the private key file <code>~/.ssh/id_rsa</code>.</p>\n</li>\n<li>\n<p><em>Passphrase</em>: Leave it empty.</p>\n</li>\n<li>\n<p><em>ID</em>: <code>jenkins-agent</code></p>\n</li>\n<li>\n<p><em>Description</em>: <code>Jenkins Agent SSH Key</code></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Select the white on blue \"<em>Create</em>\" button, and voilà!\nYou should now be the proud owner of a brand spanking new credential named \"jenkins-agent\".\nJenkins is now armed with this secret handshake to chat with the Android device (which, let's be honest, is basically chatting with itself).</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"configuring-the-agent-to-communicate-with-the-controller\"><a class=\"anchor\" href=\"#configuring-the-agent-to-communicate-with-the-controller\"></a>Configuring the agent to communicate with the controller</h3>\n<div class=\"paragraph\">\n<p>Alright, back in the driver's seat at \"<em>Manage Jenkins</em>\", let's give that shiny blue \"<em>Set up agent</em>\" button a good ol' click and dive into the adventure!</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/jenkins-complaining.png\" alt=\"Jenkins complaining about the absence of an agent\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Time to give our agent a name – I went with <code>Myself</code> because, well, it's cozy in here with the Android machine.\nSelect \"<em>Permanent Agent</em>\" as the mode.\n<span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/set-up-agent.png\" alt=\"Jenkins asking to set up an agent\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Now, hit \"<em>Create</em>\". You should now see a gazillion fields to fill in.\nFor the description, I went with something like <code>The smartphone itself</code> because, why not?\nFor the number of executors, I settled on <code>1</code>, but feel free to tweak it based on your machine's prowess.<br>\nThe remote root directory is set to <code>/data/data/com.termux/files/home</code> – that's our agent's humble abode, the Termux user's home turf.</p>\n</div>\n<div class=\"paragraph\">\n<p>As for labels, I went with <code>aarch64, android</code> – gotta give our Android buddy some identity, right?\nAnd for usage, let's go with \"<em>Use this node as much as possible</em>\" – it's eager to help!</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, for the grand finale, choose \"<em>Launch agent via SSH</em>\" as the launch method.<br>\nHost?<br>\nOh, just good ol' <code>localhost</code>, and for credentials, select our trusty <code>jenkins-agent</code> from earlier.</p>\n</div>\n<div class=\"paragraph\">\n<p>Oh, but wait!\nBefore we select that final \"<em>Save</em>\" button, we're diving into the \"<em>Advanced</em>\" settings because, well, we're adventurers!\nChange the port to <code>8022</code> and remember to update the \"<em>JavaPath</em>\" to <code>/data/data/com.termux/files/usr/bin/java</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Lastly, sprinkle in some digits – <code>60</code> for \"<em>Connection Timeout in Seconds</em>\", <code>10</code> for \"<em>Maximum Number of Retries</em>\", and <code>10</code> for \"<em>Seconds To Wait Between Retries</em>\".</p>\n</div>\n<div class=\"paragraph\">\n<p>Then, with a dramatic flourish, select \"<em>Save</em>\" and let the magic unfold!</p>\n</div>\n<div class=\"paragraph\">\n<p>After a bit of anticipation, select \"<em>Nodes</em>\" on the left, select \"<em>Myself</em>\", and give that \"<em>Log</em>\" button a tap and voilà!\nYou should see something like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">Remoting version: 3301.v4363ddcca_4e7\nLauncher: SSHLauncher\nCommunication Protocol: Standard in/out\nThis is a Unix agent\nAgent successfully connected and online</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/agent-connected.png\" alt=\"Jenkins agent connected\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>As you can see, the agent is connected, despite being on the same machine as the controller and running on top of Android.<br>\nNow, you can use this agent to run your builds on the Android device itself.\nBut…&#8203; there is still a problem with our configuration and we have some ameliorations to make.<br>\nOn the top right, you can still see a red warning:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Building on the built-in node can be a security issue. You should set the number of executors on the built-in node to 0.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>We'll have to address this issue.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"cleaning-up-the-configuration\"><a class=\"anchor\" href=\"#cleaning-up-the-configuration\"></a>Cleaning up the configuration</h3>\n<div class=\"paragraph\">\n<p>Alright, time to tackle that pesky security issue!\nHop on over to \"<em>Manage Jenkins</em>\" > \"<em>Nodes</em>\", and give a friendly selection to \"<em>Built-in Node</em>\".<br>\nOnce there, mosey on over to the left and hit up \"<em>Configure</em>\". Now, set the number of executors to a solid <code>0</code>.\nThen, seal the deal with a satisfying selection of \"<em>Save</em>\".<br>\nVoilà! Watch that red warning vanish into thin air like it's pulling a magic act!\n<span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/no-more-warning.png\" alt=\"No more warning about the built-in node\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>We've officially squashed that security bug and are all set to strut our stuff with our agent, free from any worries.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"creating-a-pipeline-from-a-github-repo\"><a class=\"anchor\" href=\"#creating-a-pipeline-from-a-github-repo\"></a>Creating a Pipeline from a GitHub repo</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now that Jenkins is up and running, let’s make it earn its keep.\nThink of Jenkins as your no-nonsense assistant — not much for small talk, but always ready to fetch your code and run your builds.</p>\n</div>\n<div class=\"paragraph\">\n<p>We’re going to create a new pipeline job via the classic UI, connect it to a GitHub repo, and have Jenkins fetch and build your code whenever you push changes.\nAutomation magic?\nAbsolutely.\nSorcery?\nMaybe just a little.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"installing-the-necessary-prerequisites\"><a class=\"anchor\" href=\"#installing-the-necessary-prerequisites\"></a>Installing the necessary prerequisites</h3>\n<div class=\"paragraph\">\n<p>Your butler won't lift a finger until the pantry is stocked.\nLet’s install the bare essentials:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">pkg install git maven</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setting-up-the-jenkins-pipeline\"><a class=\"anchor\" href=\"#setting-up-the-jenkins-pipeline\"></a>Setting Up the Jenkins Pipeline</h3>\n<div class=\"paragraph\">\n<p>Let’s convince Jenkins to do our bidding.</p>\n</div>\n<div class=\"paragraph\">\n<p>From the dashboard:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Select <em>New Item</em></p>\n</li>\n<li>\n<p>Name it something like <code>my-awesome-pipeline</code> (creativity optional)</p>\n</li>\n<li>\n<p>Select <em>Pipeline</em> as the type</p>\n</li>\n<li>\n<p>Select <em>OK</em></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Now scroll to the <em>Pipeline</em> section and decide your scripting fate: <em>Inline script</em>, or <em>Jenkinsfile from SCM</em>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"option-1-inline-scripted-pipeline\"><a class=\"anchor\" href=\"#option-1-inline-scripted-pipeline\"></a>Option 1: Inline (Scripted) Pipeline</h3>\n<div class=\"paragraph\">\n<p>Need quick results?\nChoose <em>Pipeline script</em> from the <em>Definition</em> dropdown and paste something like this:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent any\n    stages {\n        stage('Hello') {\n            steps {\n                echo 'Hello from Jenkins!'\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Hit <strong>Save</strong>, then <strong>Build Now</strong>.\nJenkins will do its thing — you’ll see a glorious Console Output filled with log lines, warnings, and possibly a tiny existential crisis.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/first-console-output.png\" alt=\"first Jenkins output console\" width=\"860\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"option-2-jenkinsfile-pipeline-from-scm\"><a class=\"anchor\" href=\"#option-2-jenkinsfile-pipeline-from-scm\"></a>Option 2: Jenkinsfile (Pipeline from SCM)</h3>\n<div class=\"paragraph\">\n<p>If you’re playing for keeps, store your pipeline code in your Git repo.</p>\n</div>\n<div class=\"paragraph\">\n<p>Create a <code>Jenkinsfile</code> at the root (or wherever makes sense), then:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Set <em>Definition</em> to <em>Pipeline script from SCM</em></p>\n</li>\n<li>\n<p>Choose <em>Git</em> as the SCM</p>\n</li>\n<li>\n<p>Enter your GitHub repo URL</p>\n</li>\n<li>\n<p>Set the <em>Script Path</em> (defaults to <code>Jenkinsfile</code>, or <code>jenkins/Jenkinsfile</code> if it’s nested)</p>\n</li>\n<li>\n<p>Save</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Now every time Jenkins builds, it’ll grab the latest code and follow the recipe in your Jenkinsfile like a dutiful butler consulting a particularly grumpy cookbook.</p>\n</div>\n<div class=\"paragraph\">\n<p>Too abstract?\nFear not — we’ll now use a real-world-ish example from the friendly folks at the <em>jenkins-docs</em> organization.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"building-a-real-project-from-github\"><a class=\"anchor\" href=\"#building-a-real-project-from-github\"></a>Building a real project from GitHub</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"confirming-mavens-existence\"><a class=\"anchor\" href=\"#confirming-mavens-existence\"></a>Confirming Maven's existence</h3>\n<div class=\"paragraph\">\n<p>We already have Java and Maven on board (thanks to our earlier setup). Let’s double-check:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">mvn --version\n\nApache Maven 3.9.9 (8e8579a9e76f7d015ee5ec7bfcdc97d260186937)\nMaven home: /data/data/com.termux/files/home/.sdkman/candidates/maven/current\nJava version: 21.0.7, vendor: Termux, runtime: /data/data/com.termux/files/usr/lib/jvm/java-21-openjdk\nDefault locale: en, platform encoding: UTF-8\nOS name: \"linux\", version: \"5.4.274-qgki-gfffde3ec8864\", arch: \"aarch64\", family: \"unix\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If Maven doesn’t respond, it’s either shy or not installed.\nAssuming it talks back, you’re good to go.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"creating-the-tutorial-project\"><a class=\"anchor\" href=\"#creating-the-tutorial-project\"></a>Creating the tutorial project</h3>\n<div class=\"paragraph\">\n<p>Let’s use this GitHub repo: <a href=\"https://github.com/jenkins-docs/simple-java-maven-app\" class=\"bare\">https://github.com/jenkins-docs/simple-java-maven-app</a>\nIt even includes a <code>Jenkinsfile</code> tucked away in the <code>jenkins/</code> directory — classy.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">pipeline {\n    agent any\n    options {\n        skipStagesAfterUnstable()\n    }\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n            post {\n                always {\n                    junit 'target/surefire-reports/*.xml'\n                }\n            }\n        }\n        stage('Deliver') {\n            steps {\n                sh './jenkins/scripts/deliver.sh'\n            }\n        }\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now, let’s hook that into Jenkins:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Select <em>+ New Item</em></p>\n</li>\n<li>\n<p>Name it something like <code>Maven Project</code> (or go wild)</p>\n</li>\n<li>\n<p>Select <em>Pipeline</em> and select <em>OK</em></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>In the next window:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Select <em>Pipeline</em> on the left</p>\n</li>\n<li>\n<p>In <em>Definition</em>, choose <em>Pipeline script from SCM</em></p>\n</li>\n<li>\n<p>Set <em>SCM</em> to <em>Git</em></p>\n</li>\n<li>\n<p>Paste <code><a href=\"https://github.com/jenkins-docs/simple-java-maven-app\" class=\"bare\">https://github.com/jenkins-docs/simple-java-maven-app</a></code> in the <em>Repository URL</em></p>\n</li>\n<li>\n<p>Set <em>Script Path</em> to <code>jenkins/Jenkinsfile</code></p>\n</li>\n<li>\n<p>Hit <em>Save</em></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>And finally — drumroll — select <em>Build Now</em>.\nDouble-check you’re not on a metered connection unless you really want to download half the internet via Maven.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2025/05/22/2025-05-22-jenkins-on-android/first-maven-build.png\" alt=\"first Maven build\" width=\"860\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>And there you have it!\nA full Jenkins build triggered from your Android phone, which, let’s be honest, used to spend its days just doomscrolling and charging.\nHigh five, mate!</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"reflecting-on-our-pipeline-journey\"><a class=\"anchor\" href=\"#reflecting-on-our-pipeline-journey\"></a>Reflecting on our Pipeline journey</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Well done, adventurer! Your Jenkins pipeline is now alive and kicking.</p>\n</div>\n<div class=\"paragraph\">\n<p>Your phone has turned from a useless paperweight into a superhero for your code.\nYou might not hear applause, but trust us, your future self is silently hero-worshipping you every time a green checkmark appears.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"onward-to-the-next-adventure\"><a class=\"anchor\" href=\"#onward-to-the-next-adventure\"></a>Onward to the next adventure…</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you thought hooking Jenkins to GitHub was fun, just wait.</p>\n</div>\n<div class=\"paragraph\">\n<p>Next up, maybe we’ll teach Jenkins to brew coffee when the build fails — because caffeine and CI go hand-in-hand, right?\nOr maybe we’ll set it up to flash the flashlight in Morse code to tell us the build status.\nThe future is weird, and we're here for it.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins learning kung-fu? Unlikely. Jenkins writing poetry in YAML? Worryingly plausible.\nOne thing’s for sure: we’ve officially crossed into “I didn’t know I could do that on a phone” territory.</p>\n</div>\n<div class=\"paragraph\">\n<p>So go ahead, pat yourself on the back (gently — we don’t want to smudge the screen), and rest easy knowing that you’ve wrangled Jenkins into running, building, and deploying from the palm of your hand.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now close Termux, lock your phone, and whisper to yourself:</p>\n</div>\n<div class=\"paragraph\">\n<p><em>\"I am the pipeline now.\"</em></p>\n</div>\n<div class=\"paragraph\">\n<p>Until next time, brave tinkerer.</p>\n</div>\n</div>\n</div>"
}