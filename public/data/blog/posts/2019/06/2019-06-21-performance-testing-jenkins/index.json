{
  "id": "2019-06-2019-06-21-performance-testing-jenkins",
  "url": "/blog/2019/06/01/2019-06-21-performance-testing-jenkins/",
  "title": "Micro-benchmarking Framework for Jenkins Plugins",
  "date": "2019-06-01",
  "authors": [
    "abhyudayasharma"
  ],
  "tags": [
    "jmh",
    "plugins",
    "benchmark",
    "performance",
    "developer",
    "gsoc",
    "gsoc2019"
  ],
  "summary": "I have been working on improving the performance of the Role Strategy Plugin as a part of my Google Summer of Code project.",
  "opengraph_image": "/images/logo-title-opengraph.png",
  "content_html": "<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I have been working on improving the performance of the Role Strategy Plugin as a part of my <a href=\"/projects/gsoc/2019/role-strategy-performance/\">Google Summer of Code project</a>.\nSince there was no existing way to measure performance and do benchmarks on Jenkins Plugins,\nmy work for the first phase of the project was to create a framework for running\nbenchmarks in Jenkins plugins with a Jenkins instance available. To make our job a bit easier,\nwe chose <a href=\"http://openjdk.java.net/jeps/230\">Java Microbenchmark Harness</a> for running these benchmarks. This\nallows us to reliably measure performance of our time-critical functions and will help make Jenkins perform faster\nfor everyone.</p>\n</div>\n<div class=\"paragraph\">\n<p>The micro-benchmarking framework was recently released in the Jenkins Unit Test Harness <a href=\"https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.50\">2.50</a>.\nThe blog post below shows how to run benchmarks in your plugins.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\"></a>Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The framework runs works by starting a temporary Jenkins instance for each fork of the JMH benchmark,\njust like <code>JenkinsRule</code> from Jenkins Test Harness. Benchmarks are run directly from your JUnit Tests which allows\nyou to fail builds on the fly and easily run benchmarks from your IDE, just like unit tests. You can easily\nconfigure your benchmarks by either using your Java methods, or by using Jenkins plugin:configuration-as-code[Configuration-as-Code plugin]\nand passing the path to your YAML file.</p>\n</div>\n<div class=\"paragraph\">\n<p>To run benchmarks from your plugins, you need to do the following:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>bump up the minimum required Jenkins version to 2.60.3 or above</p>\n</li>\n<li>\n<p>bump Plugin-POM to a version ≥ 3.46 or manually upgrade to Jenkins Test Harness ≥ 2.51.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Now, to run the benchmarks, you need to have a benchmark runner that contains a <code>@Test</code> so it can run\nlike a JUnit test. From inside a test method, you can use the <code>OptionsBuilder</code> provided by JMH to\nconfigure your benchmarks. For example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BenchmarkRunner {\n    @Test\n    public void runJmhBenchmarks() throws Exception {\n        ChainedOptionsBuilder options = new OptionsBuilder()\n                .mode(Mode.AverageTime)\n                .forks(2)\n                .result(\"jmh-report.json\");\n\n        // Automatically detect benchmark classes annotated with @JmhBenchmark\n        new BenchmarkFinder(getClass()).findBenchmarks(options);\n        new Runner(options.build()).run();\n    }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"sample-benchmarks\"><a class=\"anchor\" href=\"#sample-benchmarks\"></a>Sample benchmarks</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Now, you can write your first benchmark:</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Without any special setup</strong></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@JmhBenchmark\npublic class JmhStateBenchmark {\n    public static class MyState extends JmhBenchmarkState {\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        // benchmark code goes here\n        state.getJenkins().setSystemMessage(\"Hello world\");\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><strong>Using Configuration as Code</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>To use configuration as code, apart from the dependencies above you also need to add the following\nto your <code>pom.xml</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-xml\" data-lang=\"xml\"><dependency>\n    <groupId>io.jenkins</groupId>\n    <artifactId>configuration-as-code</artifactId>\n    <version>1.21</version>\n    <optional>true</optional>\n</dependency>\n<dependency>\n    <groupId>io.jenkins</groupId>\n    <artifactId>configuration-as-code</artifactId>\n    <version>1.21</version>\n    <classifier>tests</classifier>\n    <scope>test</scope>\n</dependency></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now configuring a benchmark is as simple as providing path to your YAML file and specifying the class\ncontaining the benchmark state.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">@JmhBenchmark\npublic class SampleBenchmark {\n    public static class MyState extends CascJmhBenchmarkState {\n        @NonNull\n        @Override\n        protected String getResourcePath() {\n            return \"config.yml\";\n        }\n\n        @NonNull\n        @Override\n        protected Class<?> getEnclosingClass() {\n            return SampleBenchmark.class;\n        }\n    }\n\n    @Benchmark\n    public void benchmark(MyState state) {\n        Jenkins jenkins = state.getJenkins(); // jenkins is configured and ready to be benchmarked.\n        // your benchmark code goes here...\n    }\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><strong>More Samples</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>As a part of this project, a few benchmarks have been created in the Role Strategy Plugin which show\nconfiguring the instances for various situations. You can find them\n<a href=\"https://github.com/jenkinsci/role-strategy-plugin/tree/master/src/test/java/jmh/benchmarks\">here</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"running-benchmarks\"><a class=\"anchor\" href=\"#running-benchmarks\"></a>Running Benchmarks</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><strong>Running benchmarks from Maven</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>To easily run benchmarks from Maven, a Maven profile to run the benchmarks has been created\nand is available starting Plugin-POM version 3.45. You can then run your benchmarks from the\ncommand line using <code>mvn test -Dbenchmark</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Running benchmarks on ci.jenkins.io</strong></p>\n</div>\n<div class=\"paragraph\">\n<p>If you have your plugins hosted on ci.jenkins.io, you can easily run benchmarks directly from your Jenkinsfile\nby using the <code>runBenchmarks()</code> method after the <code>buildPlugin()</code> step in your which is now available in\n<a href=\"https://github.com/jenkins-infra/pipeline-library\">Jenkins Pipeline library</a>.\nThis function also accepts the path to your generated JMH benchmark reports as an optional\nparameter and archives the benchmark results. Running benchmarks in pull request builds allows you to constantly\nmonitor the performance implications of a given change. For example, the Jenkinsfile from Role Strategy Plugin:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">buildPlugin()\nrunBenchmarks('jmh-report.json')</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"visualizing-benchmark-results\"><a class=\"anchor\" href=\"#visualizing-benchmark-results\"></a>Visualizing benchmark results</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Benchmark reports generated (in JSON) can be visualized using the either the plugin:jmh-report[JMH Report Plugin]\nor by passing the benchmark reports to the <a href=\"https://jmh.morethan.io\">JMH visualizer</a> web service. As an example, here is\na visualized report of some benchmarks from the Role Strategy Plugin:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/jmh-microbenchmark-framework/jmh-visualizer.png\" alt=\"Role Strategy Plugin benchmarks visualized by JMH Visualizer\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>These improvements seen above were obtained through a small <a href=\"https://github.com/jenkinsci/role-strategy-plugin/pull/81\">pull request</a>\nto the plugin and shows how even seemingly small changes can bring major performance improvements. Microbenchmarks\nhelp to find these hot-spots and estimate the impact of changes.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"some-tips-and-tricks\"><a class=\"anchor\" href=\"#some-tips-and-tricks\"></a>Some tips and tricks</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Since <code>BenchmarkRunner</code> class name in the example above does not qualify as a test according to Maven surefire plugin's\nnaming conventions, the benchmarks will not interfere with your JUnit tests.</p>\n</li>\n<li>\n<p>Benchmark methods need to be annotated by <code>@Benchmark</code> for JMH to detect them.</p>\n</li>\n<li>\n<p>Classes containing benchmarks are found automatically by the <code>BenchmarkFinder</code>\nwhen annotated with <code>@JmhBenchmark</code>.</p>\n</li>\n<li>\n<p>A reference to the Jenkins instance is available through either <code>JmhBenchmarkState#getJenkins()</code> or through\n<code>Jenkins.getInstance()</code> like you would otherwise do.</p>\n</li>\n<li>\n<p><code>JmhBenchmarkState</code> provides <code>setup()</code> and <code>tearDown()</code> methods which can be overridden to configure the\nJenkins instance according to your benchmark's requirements.</p>\n</li>\n<li>\n<p>The benchmark builds on ci.jenkins.io are currently throttled because of the limited availability of <code>highmem</code> nodes.</p>\n</li>\n<li>\n<p>The benchmark framework was made available in Jenkins Test Harness 2.50, it is recommended to use version <a href=\"https://github.com/jenkinsci/jenkins-test-harness/releases/tag/jenkins-test-harness-2.51\">2.51</a> as it includes some bug fixes.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"links-and-feedback\"><a class=\"anchor\" href=\"#links-and-feedback\"></a>Links and Feedback</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you have any feedback, comments or questions, please feel free to reach out to me through either\nthe <a href=\"https://app.gitter.im/#/room/#jenkinsci_role-strategy-plugin:gitter.im\">Role Strategy Plugin Gitter chat</a> or through\nthe <a href=\"mailto:jenkinsci-dev@googlegroups.com\">Jenkins Developer Mailing list</a>.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://drive.google.com/file/d/1gig6u64rzvSzGKjN_PTTXTkSXQ9Ah7E5/view?usp=sharing\">Presentation slides</a></p>\n</li>\n<li>\n<p><a href=\"https://youtu.be/lyfbmhQd0Ag?t=847\">Demo at Platform SIG meeting</a></p>\n</li>\n<li>\n<p>Documentation for the micro-benchmark framework:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://github.com/jenkinsci/jenkins-test-harness/blob/master/docs/jmh-benchmarks.adoc\">Writing benchmarks (Jenkins Test Harness)</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/benchmarks/jmh-benchmarks.md\">Preconfiguring benchmarks using JCasC</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkinsci/plugin-pom#running-benchmarks\">Running benchmarks using Plugin POM profile</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/jenkins-infra/pipeline-library#runbenchmarks\">Build Step for running benchmarks on ci.jenkins.io</a></p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>"
}