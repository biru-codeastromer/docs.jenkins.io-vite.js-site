{
  "id": "2024-06-2024-06-11-require-java-17",
  "url": "/blog/2024/06/01/2024-06-11-require-java-17/",
  "title": "Jenkins requires Java 17 or newer",
  "date": "2024-06-01",
  "authors": [
    "basil"
  ],
  "tags": [
    "announcement",
    "core",
    "developer",
    "jenkins"
  ],
  "summary": "Beginning with Jenkins 2.463, Jenkins requires Java 17 or newer.",
  "opengraph_image": "/images/post-images/2024/06/java17.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><span class=\"image right center\"><img src=\"/images/post-images/2024/06/java17.png\" alt=\"Jenkins requires Java 17\" width=\"400px\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p><strong>Beginning with the Jenkins 2.463 weekly release (scheduled for release on June 18, 2024), Jenkins requires Java 17 or newer.</strong>\nThe Jenkins 2.452.x LTS line will continue to require Java 11 or newer,\nas will the LTS line (possibly 2.462.1) that is scheduled for release on July 24, 2024,\nwhose baseline will be 2.462 (the last weekly release to support Java 11) or earlier.\nThe first LTS release to require Java 17 or newer will ship at the end of October 2024.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Jenkins core team generally recommends that all users adopt Java 17 or Java 21.\nIn recent months, usage of Java 17 has almost surpassed usage of Java 11, and usage of Java 21 is rapidly increasing:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2024/06/jvms.png\" alt=\"JVMs by Date\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>Weekly releases will require Java 17 or newer earlier than a previously announced date.\nThe motivating factor for this change of schedule is <a href=\"https://spring.io/blog/2024/03/01/support-timeline-announcement-for-spring-framework-6-0-x-and-5-3-x\">the August 31, 2024 EOL of the Spring Framework 5.3.x line</a>.\nJenkins relies heavily on Spring Security, and upgrading to the 6.x line necessitates a slew of breaking changes, including migrating to Java 17, Jetty 12, and Jakarta EE 9.\nIn order to mitigate risk, we are beginning the rollout of Java 17 in the June 18, 2024 weekly release.\nFurther details about the migration to Jetty 12 and Jakarta EE 9 are forthcoming.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"upgrading-to-java-17-or-21\"><a class=\"anchor\" href=\"#upgrading-to-java-17-or-21\"></a>Upgrading to Java 17 or 21</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Beginning with the Jenkins 2.463 weekly release (scheduled for release on June 18, 2024),\nJenkins requires Java 17 or newer on both the controller JVM (i.e., the JVM running <code>jenkins.war</code>) and agent JVMs (i.e., JVMs running <code>remoting.jar</code>).</p>\n</div>\n<div class=\"paragraph\">\n<p>This does not imply that you need to build your application with the same version of Java.\nYou can continue to use any desired JDK to build your application,\nas long as the JVM used for running Jenkins itself is version 17 or newer.\nFor example, the <strong>Global Tool Configuration</strong> page can still be used to provide a JDK 8 or 11 installation for building your application.\nSimilarly, you can set up ephemeral or static agents with two installations of Java:\nJava 17 or newer to run <code>remoting.jar</code> for Jenkins and Java 8 or 11 to build your application.</p>\n</div>\n<div class=\"paragraph\">\n<p>We have supported running the controller on Java 17 since the Jenkins 2.355 weekly release,\nand we have supported running the controller on Java 21 since the Jenkins 2.419 weekly release.\nPrior to the Jenkins 2.463 weekly release, running the controller on Java 17 and agents on Java 11, though not recommended, did not result in errors.\nBeginning with the Jenkins 2.463 weekly release, running the controller on Java 17 and agents on Java 11 will result in the following error:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>java.lang.UnsupportedClassVersionError: hudson/slaves/SlaveComputer$SlaveVersion has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0\n\tat java.base/java.lang.ClassLoader.defineClass1(Native Method)\n\tat java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1022)\n\tat java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:883)\n\tat hudson.remoting.RemoteClassLoader.loadClassFile(RemoteClassLoader.java:473)\n        ... 24 more</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Therefore, it is critical to upgrade both the controller <em>and</em> agents to Java 17 or newer prior to upgrading Jenkins to the 2.463 weekly release.\nUse the <a href=\"https://plugins.jenkins.io/versioncolumn/\">Versions Node Monitors</a> plugin to verify that agents are running a compatible version of Java.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"docker-images\"><a class=\"anchor\" href=\"#docker-images\"></a>Docker images</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The official Jenkins Docker images for <a href=\"https://hub.docker.com/r/jenkins/jenkins/\">the controller</a> and <a href=\"https://hub.docker.com/r/jenkins/inbound-agent/\">agents</a> have been based on Java 17 for many months,\nwith Java 11 available as a fallback.\nBeginning with the Jenkins 2.462 weekly release, the Java 11 images will be retired.\n(Java 11 images will remain available for the LTS line until October 2024.)\nUsers of the official Jenkins Docker images need not install or configure Java on their own, as it comes preinstalled in the image.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are using a Docker image to run both the agent Java process (i.e., <code>remoting.jar</code>) and your own application build and your application build still requires Java 8 or 11,\nyou will need to provide a Java 17 or newer runtime for the Jenkins agent process and a Java 8 or 11 environment for your application build.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"os-packages\"><a class=\"anchor\" href=\"#os-packages\"></a>OS packages</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Users of the <a href=\"/download/\">official Jenkins OS packages for Debian, Red Hat, and SUSE Linux distributions</a> should note that these packages are agnostic to the Java vendor.\nIn other words, you must bring your own Java package.\nOne straightforward way to do this is to install Java 17 from your Linux distribution, as described on the package download site:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/debian/\">Debian</a></dt>\n<dd>\n<p><code>apt-get install fontconfig openjdk-17-jre</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/redhat/\">Red Hat</a></dt>\n<dd>\n<p><code>yum install fontconfig java-17-openjdk</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/opensuse/\">openSUSE</a></dt>\n<dd>\n<p><code>zypper install dejavu-fonts fontconfig java-17-openjdk</code></p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>By virtue of not requiring any custom repositories, this is certainly the simplest method (and the one used by the Jenkins project's <a href=\"https://github.com/jenkinsci/packaging/tree/7c74bdb1dc0e8f4790c4c8af3e3a4bf9bc6ee38a/molecule/default\">packaging tests</a>),\nbut it does not give the user a high degree of control over the Java runtime environment.\nAs mentioned previously, the official Jenkins Docker images use Adoptium/Eclipse Temurin (as does the Jenkins infrastructure project).\nEnthusiastic users may wish to install Java from Adoptium or another vendor.\nSince 2021, Adoptium has provided Linux installation packages, as described in <a href=\"https://blog.adoptium.net/2021/12/eclipse-temurin-linux-installers-available/\">a piece by George Adams</a>.\nUltimately, the choice of which Java vendor to use is your own, as long as that vendor provides Java 17 or Java 21.\nRefer to your chosen Java vendor for installation instructions.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you have installed a suitable version of Java, configure Jenkins to use that Java runtime.\nThe most straightforward way is to configure that version of Java as the default version of Java at the operating system (OS) level:</p>\n</div>\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/debian/\">Debian</a></dt>\n<dd>\n<p><code>update-alternatives --config java</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/redhat/\">Red Hat</a></dt>\n<dd>\n<p><code>alternatives --config java</code></p>\n</dd>\n<dt class=\"hdlist1\"><a href=\"https://pkg.jenkins.io/opensuse/\">openSUSE</a></dt>\n<dd>\n<p><code>update-alternatives --config java</code></p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, users who do not wish to change the default version of Java can customize the <code>JAVA_HOME</code> or <code>JENKINS_JAVA_CMD</code> environment variable as part of the Jenkins <code>systemd(1)</code> service unit.\nRefer to the <a href=\"/doc/book/system-administration/systemd-services/\">Managing systemd services</a> section of the Jenkins documentation for more information.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"reporting-issues\"><a class=\"anchor\" href=\"#reporting-issues\"></a>Reporting issues</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>If you find a regression in a plugin, please file a bug report in Jira:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://issues.jenkins.io/browse/JENKINS-67907\">JENKINS-67907: Java 17 Phase 3: Require Java 17 or newer</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>When reporting an issue, include the following information:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Use the <a href=\"https://issues.jenkins.io/browse/JENKINS-67907\">JENKINS-67907</a> epic.</p>\n</li>\n<li>\n<p>Provide the output of <code>java -version</code> (e.g., OpenJDK 64-Bit Server VM Temurin-21.0.3+9 build 21.0.3+9-LTS)</p>\n</li>\n<li>\n<p>Provide the name, version, and architecture of the operating system you are using (e.g., Ubuntu 24.04.1 LTS x86_64).</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> list of installed plugins as suggested in the <a href=\"/doc/book/troubleshooting/diagnosing-errors/#how-to-report-a-bug\">bug reporting guidelines</a>.</p>\n</li>\n<li>\n<p>Provide the <em>complete</em> stack trace, if relevant.</p>\n</li>\n<li>\n<p>Provide steps to reproduce the issue <em>from scratch</em> on a minimal Jenkins installation; the scenario should fail on Jenkins 2.462 or earlier when the steps are followed on Java 17 or Java 21 and pass when the steps are followed on Java 11.</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We expect to see a bit of disruption from the migration to Java 17, Jetty 12, and Jakarta EE 9,\nbut we hope that in the long term these changes will be in the best interests of the Jenkins community.\nPlease reach out on the <a href=\"/mailing-lists/\">developers' list</a> with any questions or suggestions.</p>\n</div>\n</div>\n</div>"
}