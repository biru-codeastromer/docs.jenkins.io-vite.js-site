{
  "id": "2024-01-2024-01-25-sonar-vulnerability-report",
  "url": "/blog/2024/01/01/2024-01-25-sonar-vulnerability-report/",
  "title": "Collaboration is Key - Making the Open-Source Community Safer for Developers",
  "date": "2024-01-01",
  "authors": [
    "Yaniv-git"
  ],
  "tags": [
    "security",
    "community"
  ],
  "summary": "In this blog, the Sonar research team shares how they found an unexpected vulnerability in Jenkins open-source CI/CD automation tool and collaborated with the Jenkins team to ensure users could protect themselves from the risk.",
  "opengraph_image": "/images/post-images/2024/01/jenkins-and-sonar-security.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"who-is-sonar\"><a class=\"anchor\" href=\"#who-is-sonar\"></a>Who is Sonar?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://www.sonarsource.com/\">Sonar</a> is a code quality and security tool that helps developers write <a href=\"https://www.sonarsource.com/solutions/clean-code/\">Clean Code</a>.\nSonar analyzes code for issues that lead to unreliable, unmaintainable, and insecure software at two points in the development lifecycle - first, when the developer initially writes code in the IDE with <a href=\"https://www.sonarsource.com/products/sonarlint/\">SonarLint</a> and, again, as part of the Continuous Integration (CI) pipeline before the code is sent for release with <a href=\"https://www.sonarsource.com/products/sonarqube/\">SonarQube</a> or <a href=\"https://www.sonarsource.com/products/sonarcloud/\">SonarCloud</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>To keep up with the latest cyber security trends and better understand emerging threats, the dedicated research team at Sonar finds and inspects vulnerabilities in modern open-source applications; we incorporate all of our insights into our products (SonarLint, SonarQube, SonarCloud).</p>\n</div>\n<div class=\"paragraph\">\n<p>In our endeavor to help secure open-source projects and improve, our research team decided to take a look at the Jenkins project.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"why-jenkins\"><a class=\"anchor\" href=\"#why-jenkins\"></a>Why Jenkins?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Before we get started, we&#8217;d like to thank the Jenkins team for their fast response, dedicated effort to getting this fixed, and transparency throughout the disclosure process.\nOkay, let&#8217;s get into it…</p>\n</div>\n<div class=\"paragraph\">\n<p>We saw this research as an excellent opportunity - and a challenging one, because Jenkins is highly popular, well-maintained, and has a great community.\nGiven the broad adoption and usage of Jenkins by the community, we felt it is important to analyze the security of this code base, and if we were to find a vulnerability, it would not only help the users of Jenkins but also help us better understand and improve the security capability of our solutions.</p>\n</div>\n<div class=\"paragraph\">\n<p>From a research perspective, ignoring the impact aspect, going into well-maintained code is a double-edged sword.\nOn the one hand, the code has less potential for security vulnerabilities and poses a bigger challenge for finding bugs.\nOn the other hand, because it is easily understandable code, in addition to the well-written and thorough documentation, the researcher can progress quickly and assess the project better.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"what-is-our-research-approach-what-did-we-look-at-in-jenkins\"><a class=\"anchor\" href=\"#what-is-our-research-approach-what-did-we-look-at-in-jenkins\"></a>What is our research approach, what did we look at in Jenkins?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Our initial research approach is more or less identical for each project.\nFirst, we try to understand the project from a user&#8217;s perspective.\nIn the case of Jenkins, this was made easy due to the well-documented “Jenkins Handbook” and the large community that already tackled many issues and questions on the internet.</p>\n</div>\n<div class=\"paragraph\">\n<p>Following that, we started debugging and getting our hands dirty.\nSlowly but surely we got a good grasp on the architecture of Jenkins, from how the project “<a href=\"https://github.com/jenkinsci/stapler\">staples</a>” an endpoint to a function to the authorization methodology, authentication methods, the intended behavior of various features, and more.\nWith this better understanding of the technical internals, we can switch to an attacker&#8217;s perspective and think of the possible attack scenarios.\nWhich endpoints can an unauthorized attacker reach?\nWhat can a limited authorized attacker do?\nIs a feature doing more than intended?</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"what-was-the-outcome\"><a class=\"anchor\" href=\"#what-was-the-outcome\"></a>What was the outcome?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>One of the important mindsets of a security researcher is to know when to give up and when to stay stubborn.\nOur findings were not easy to catch.\nJenkins code quality is superb making it less likely to have security vulnerabilities.\nBut, with our persistence, we noticed a niche feature that used third-party, unmaintained code, which allowed us to disclose sensitive information.\nUsually, the feature exploited requires specific permission to execute, but due to an exception thrown before the intended behavior, the sensitive data (which was exported from the third-party code) was leaked, enabling an attacker to have a serious impact on a Jenkins instance.</p>\n</div>\n<div class=\"paragraph\">\n<p>From Sonar&#8217;s point of view, we have analyzed the complex call graph and found unique ways to improve our engine.\nOn top of that, it clarified for us the importance of <a href=\"https://www.sonarsource.com/blog/deeper-sast-uncovers-hidden-security-vulnerabilities/\">deeper SAST</a>, a feature that enables developers to automatically discover and fix code security issues arising from interactions between user source code and third-party, open-source libraries.</p>\n</div>\n<div class=\"paragraph\">\n<p>We were excited to have this opportunity to collaborate with the Jenkins team, while also making the open-source community safer and providing a <a href=\"https://www.sonarsource.com/blog/excessive-expansion-uncovering-critical-security-vulnerabilities-in-jenkins/\">technical blog post</a> for educating the security expert audience.\nThroughout the disclosure process, we were met with an impressive level of professionalism and kindness that made all of this happen.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"more-about-sonar-and-clean-code\"><a class=\"anchor\" href=\"#more-about-sonar-and-clean-code\"></a>More about Sonar and Clean Code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At Sonar, we&#8217;re dedicated to enabling developers to create <a href=\"https://www.sonarsource.com/solutions/clean-code/\">Clean Code</a> — code that is consistent, intentional, adaptable, and responsible.\nWe believe that code quality and <a href=\"https://www.sonarsource.com/solutions/security/\">security</a> go hand in hand.\nBy focusing on Clean Code best practices, it is easier to avoid mistakes that lead to vulnerabilities in code.\nOur <a href=\"https://www.sonarsource.com/solutions/our-unique-approach/\">Clean as You Code</a> approach ensures that code stays consistently clean avoiding the introduction of bugs and security vulnerabilities from the start with the quality of the codebase being optimized as code is added or changed.</p>\n</div>\n</div>\n</div>"
}