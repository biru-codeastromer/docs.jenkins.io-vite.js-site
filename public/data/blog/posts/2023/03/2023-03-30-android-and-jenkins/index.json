{
  "id": "2023-03-2023-03-30-android-and-jenkins",
  "url": "/blog/2023/03/30/2023-03-30-android-and-jenkins/",
  "title": "Android and Jenkins: what is the limit?",
  "date": "2023-03-30",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "jenkins",
    "android",
    "aarch64"
  ],
  "summary": "After reading the title, you may be thinking \"Wait, what? Is Jenkins somehow limited in building Android apps?\" You can relax, as I may have phrased it incorrectly. We&#8217;re not talking about building Android apps with Jenkins, which has no limitations as far as I know. We&#8217;re talking about building something with Jenkins, using an Android device as a Jenkinsâ€¦",
  "opengraph_image": "/images/post-images/2023/03/29/2023-03-22-android-and-jenkins/love.png",
  "content_html": "<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/29/2023-03-22-android-and-jenkins/love.png\" alt=\"jenkins hugging bugdroid\" width=\"500\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>After reading the title, you may be thinking \"Wait, what?\nIs Jenkins somehow limited in building Android apps?\"\nYou can relax, as I may have phrased it incorrectly.\nWe&#8217;re not talking about building Android apps with Jenkins, which has no limitations as far as I know.\nWe&#8217;re talking about building <em>something</em> with Jenkins, using an Android device as a Jenkins node, or potentially as a Jenkins controller.\nDoes this sounds appealing or strange enough to you?\nContinue reading to learn more about the relationship between Android and Jenkins!</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"jenkins-and-aarch64\"><a class=\"anchor\" href=\"#jenkins-and-aarch64\"></a>Jenkins and <code>aarch64</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I joined the Jenkins project in April 2022.\nAt that time, we could already find <code>aarch64 docker</code> images, for the agents or the controller, and regular installers for <code>aarch64</code> Linux.\nThe <a href=\"https://hub.docker.com/layers/jenkins/jenkins/2.305-jdk11/images/sha256-700c20a5cd0eb3c69a825baf8197166bb078361c3351aab6806a386573dbc829?context=explore\">oldest image</a> for a controller I found was from August 2021, and the <a href=\"https://hub.docker.com/layers/jenkins/jenkins/2.305-jdk11/images/sha256-700c20a5cd0eb3c69a825baf8197166bb078361c3351aab6806a386573dbc829?context=explore\">oldest image</a> for an agent was from February 2022.\nThis is nothing new, as Jenkins works on <code>aarch64</code> Linux and has been running on that CPU architecture for years.</p>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s pretty easy when using Linux on an <code>x86_64</code> machine, but it can be more difficult on an <code>aarch64</code> machine.\nThis is because the tools needed to build Android applications were not available until late 2021, with the release of Android Build Tools <code>31.0.0</code>.\nOf course, you can use <a href=\"https://support.apple.com/en-us/HT211861\">Rosetta</a> to build your applications and even combine it with <a href=\"https://developer.ibm.com/tutorials/running-x86-64-containers-mac-silicon-m1/\">Docker</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>In my experience with Jenkins and <code>aarch64</code>, I have several <code>aarch64</code> Jenkins agents and controllers.\nSome of them are using <code>docker</code> and some of them are installed directly on the Linux machine thanks to the <a href=\"/doc/book/installing/linux/#debianubuntu\">standard instructions</a>.\nThankfully, there has been nothing outstanding to worry about, as Jenkins works fine for me with <code>aarch64</code>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"android-and-aarch64\"><a class=\"anchor\" href=\"#android-and-aarch64\"></a>Android and <code>aarch64</code></h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Until recently, it was difficult to build Android applications on an <code>aarch64</code> machine.\nThe main reason was that the <a href=\"https://developer.android.com/studio/releases/build-tools\">Android build tools</a> were not compatible with <code>aarch64</code> machines.\nBefore version <code>31.0.0</code>, there was a bug in the Android Build Tools that caused the <code>aapt2</code> tool to crash when building resources on <code>aarch64</code> machines.\nThis issue was resolved in version <code>31.0.0</code>, which added native support for <code>aarch64</code> and fixed the <code>aapt2</code> crash on these machines.\nThanks to this, Android Build Tools are now natively compatible with <code>aarch64</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Isn&#8217;t that fantastic?\nThis meant there was no need to use Rosetta to build Android apps on <code>aarch64</code> anymore.\nUntil I started writing this post, I was actually using build-tools <code>30.x</code>.\nI didn&#8217;t need to build Android apps on <code>aarch64</code> machines, so upgrading was unnecessary.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, a friend of mine works on an <a href=\"https://en.wikipedia.org/wiki/Apple_M1\">M1 Mac</a>, which happens to be an <code>aarch64</code> machine, and wanted to build Android apps on his Mac.\nHe was working with Docker, which translates <code>x86-64</code> to <code>aarch64</code>, as long as you specify that you&#8217;re using an <code>x86-64</code> image to begin with.\nI know it&#8217;s strange that <code>x86-64</code> is called <code><a href=\"https://unix.stackexchange.com/a/53416\">amd64</a></code> in Docker, but that&#8217;s not the point.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">[...]\nandroid-agent:\n    platform: linux/amd64\n    build: ../\n    restart: unless-stopped\n    volumes:\n        - android-agent-data:/home/jenkins:rw\n        - ../adbkey.pub:/home/jenkins/.android/adbkey.pub:rw\n        - ../adbkey.txt:/home/jenkins/.android/adbkey:rw\n    environment:\n        - JENKINS_AGENT_SSH_PUBKEY=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBpNqXQ4x7fPPUBbYPxKF77Zqq6d35iPCD2chg644OUD\n        - STF_HOST_NAME\n[...]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We could theoretically build Android apps on <a href=\"https://magpi.raspberrypi.com/articles/pi-3-interview\">Raspberry PI 3B+</a> with <a href=\"https://github.com/gounthar/MyFirstAndroidAppBuiltByJenkins/blob/aarch64/Dockerfile\">Jenkins</a> from now on.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the introduction, I stated that I wanted to build something with Jenkins on an Android device, and not the other way around.\nThe goal is to run parts of Jenkins (first an agent, then a controller, then a whole Jenkins instance thanks to Docker) on an Android device.\nSo why am I telling you about building Android apps on <code>aarch64</code> machines with Jenkins?\nBecause it would be kind of ironic, and tons of fun, to build an Android app with Jenkins on an Android device!\nThat would even allow me to introduce you to the <em>Jenkinsception</em> concept.\nMore on that in a future post.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"get-sshd-working-on-an-android-device\"><a class=\"anchor\" href=\"#get-sshd-working-on-an-android-device\"></a>Get <code>sshd</code> working on an Android device</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>What does <code>sshd</code> have to do with installing Jenkins?\nWell, we have a few different ways to start and connect a Jenkins agent to a Jenkins controller, but the easiest one for me is to use an ssh agent.\nThe first step is to get <code>sshd</code> working on an Android device.\nThere are various ways to access an Android device through SSH.\nHere are some of them:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://developer.android.com/studio/command-line/adb\">ADB</a>: You can use the Android Debug Bridge (ADB) to connect to your Android device over SSH.\nThis requires you to enable USB debugging on your device and have ADB installed on your computer.\nThe following guide may not work any longer, but it&#8217;s a good starting point: <a href=\"https://dtbaker.net/blog/howto-enable-ssh-on-android-and-network-adb/\">How to enable ssh on Android</a>.</p>\n</li>\n<li>\n<p><a href=\"https://play.google.com/store/apps/details?id=org.galexander.sshd\">SimpleSSHD</a>: SimpleSSHD is a lightweight and easy-to-use SSH server app for Android.\nIt supports key-based authentication, and you can configure it to run at startup.</p>\n</li>\n<li>\n<p><a href=\"https://termux.dev/en/\">Termux</a>: Termux is a terminal emulator and Linux environment app that allows you to start an SSH server on your Android device.\nYou can then use any SSH client to connect to your device over SSH.\nUnfortunately, updates for Termux are not available on the Google Play Store anymore, but you can still find it on <a href=\"https://github.com/termux/termux-app#github\">GitHub</a> or <a href=\"https://github.com/termux/termux-app#f-droid\">F-Droid</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>It is important to note that SSH access to your device can pose security risks, so it is recommended to use caution and <strong>only</strong> enable SSH access when necessary.</p>\n</div>\n<div class=\"paragraph\">\n<p>Termux is my go-to choice when it comes to using some kind of Linux on Android.\nThere are packages available that will allow you to install new software, and package updates, like a \"real\" Linux distribution.\nI almost feel at home when using it.</p>\n</div>\n<div class=\"paragraph\">\n<p>While reading the <a href=\"https://wiki.termux.com/wiki/Remote_Access\">Termux documentation</a>, I discovered that Termux has an SSH server (<a href=\"https://www.openssh.com/\">OpenSSH</a>) built-in.\nIt&#8217;s not enabled by default, but it&#8217;s easy enough to configure.\nThe following instructions are available on the <a href=\"https://wiki.termux.com/wiki/Remote_Access#OpenSSH\">Termux wiki</a>, and I&#8217;ve added some details to make it easier to follow.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"starting-and-stopping-the-openssh-server\"><a class=\"anchor\" href=\"#starting-and-stopping-the-openssh-server\"></a>Starting and stopping the OpenSSH server</h3>\n<div class=\"paragraph\">\n<p>Since Termux does not use an <a href=\"https://en.wikipedia.org/wiki/Systemd\">initialization system</a>, services are started manually from the command line.</p>\n</div>\n<div class=\"paragraph\">\n<p>To start the OpenSSH server, you need to execute this command: <code>sshd</code>.\nIf you need to stop <code>sshd</code>, just kill its process: <code>pkill sshd</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>SSH daemon logs to the Android system log, and you can view them by running <code>logcat -s 'sshd:*'</code>.\nThis is possible from either Termux or ADB.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setting-up-password-authentication\"><a class=\"anchor\" href=\"#setting-up-password-authentication\"></a>Setting up password authentication</h3>\n<div class=\"paragraph\">\n<p>Password authentication is enabled by default, making it easier to get started.\nBefore proceeding, make sure that you understand that password authentication is less secure than a pubkey-based one.</p>\n</div>\n<div class=\"paragraph\">\n<p>Ensure that everything is up-to-date and the <code>openssh</code> package is installed:<br></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"> pkg upgradepkg install openssh</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Please note that <code>$PREFIX</code> is a variable that points to the Termux installation directory.\nIt is usually <code>/data/data/com.termux/files</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Password authentication is enabled by default in the configuration file.\nYou can review the file at <code>$PREFIX/etc/ssh/sshd_config</code>, and it should contain this data:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre> PrintMotd yes\n PasswordAuthentication yes\n Subsystem sftp /data/data/com.termux/files/usr/libexec/sftp-server</pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If your file does not look like this, you will have to edit the file.\nNote that <code>vi</code> is not installed by default, but <code>nano</code> is.\nYou can use <code>nano</code> to edit the file.</p>\n</div>\n<div class=\"paragraph\">\n<p>Set a new password by executing the command <code>passwd</code>.\nWhile the program allows a minimal password length of one character, the recommended password length is more than eight to ten characters.\nPasswords are not printed on the console.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre> passwd New password:\n Retype new password:\n New password was successfully set.</pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setting-up-public-key-authentication\"><a class=\"anchor\" href=\"#setting-up-public-key-authentication\"></a>Setting up public key authentication</h3>\n<div class=\"paragraph\">\n<p>Public key authentication is the recommended way for logging in using SSH.\nYou need to have a public/private key pair to use this type of authentication.\nFor a successful login, the public key must exist in the authorized keys list on the remote machine, while the private key should be kept safe on your local host.</p>\n</div>\n<div class=\"paragraph\">\n<p>In the following example, it is assumed that you want to establish public key authentication between your PC (host) and your future Jenkins agent, which happens to be an Android device running Termux (remote).\nIt is also assumed that you&#8217;re running a Linux distribution on your PC, <a href=\"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux#WSL_2\">WSL2</a>, or even <a href=\"https://en.wikipedia.org/wiki/Cygwin\">Cygwin</a>.\nIt would be better if both machines were using the same network, for example both are connected to the same Wi-Fi network.\nIt is also assumed that you know your Android device&#8217;s IP address.\nIf you have access to your router webpage, you should be able to see which IP has been assigned to your Android device.\nIf you don&#8217;t have access to the router webpage, you can find your IP address on an Android device by following these steps:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Open the Settings app on your Android device.</p>\n</li>\n<li>\n<p>Scroll down and tap on \"About phone\" or \"About device\".</p>\n</li>\n<li>\n<p>Look for the \"Status\" or \"Network\" section and tap it.</p>\n</li>\n<li>\n<p>Find the \"IP address\" or \"Wi-Fi IP address\" option, which will display your device&#8217;s IP address.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, you can also find your IP address within Termux by typing the following command: <code>ip addr show</code>.\nBe aware that if the package is not installed yet, you will need to issue <code>pkg install iproute2</code> first.\nLook for the <code>inet</code> line next to the <code>wlan0</code> line that has your IP address given by your Wi-Fi router.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you do not have ssh keys, you can generate them.\nIn this example, we will generate an <code>RSA</code> key.\nOn the PC, execute the command: <code>ssh-keygen -t rsa -b 2048 -f id_rsa</code>, replacing <code>id_rsa</code> with the name of your key.\nFor me it would be <code>ssh_key_for_jenkins_agent_2023-03-10</code>.\nThe command shown above generates a private RSA key with a 2048-bit key length and saves it to the file <code>id_rsa</code>.\nIn the same directory, you can find a file named <code>id_rsa.pub</code>, and this is a public key.</p>\n</div>\n<div class=\"paragraph\">\n<p>For me, the command was:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"> ssh-keygen -t rsa -b 2048 -f ssh_key_for_jenkins_agent_2023-03-10\n Generating public/private rsa key pair.\n Enter passphrase (empty for no passphrase):\n Enter same passphrase again:\n Your identification has been saved in ssh_key_for_jenkins_agent_2023-03-10\n Your public key has been saved in ssh_key_for_jenkins_agent_2023-03-10.pub\n The key fingerprint is:SHA256:yoykbWyCHuqrANFBkO41vuXMC7kLhsVfe8caLWQEUqk user@PC\n The key's randomart image is:\n +---[RSA 2048]----+\n |.+o ..o.         |\n |.. . ...         |\n |o .  .  .        |\n | + oE  .         |\n |o = o . S        |\n |o+ B.* = o       |\n |++oo&amp; = + +      |\n |= o=o+ . =       |\n |=+.o... .        |\n +----[SHA256]-----+</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The key was generated in the current directory, not in <code>$HOME/.ssh</code>.\nI tend to move the generated key in that <code>$HOME/.ssh</code> directory (<code>mv ssh_key_for_jenkins_agent_2023-03-10* ~/.ssh</code> for me).\nI then change the directory to <code>$HOME/.ssh</code> (<code>cd ~/.ssh</code>) and change the permissions of the key (<code>chmod 600 ssh_key_for_jenkins_agent_2023-03-10</code>).</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\n2048 bit is the minimal key length that is considered safe.\nYou can use higher values, but do not use a higher than 4096, as the remote server may not support that big of a key.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Copy the key to the remote machine (your Jenkins agent wannabe running Termux).\nPassword authentication must be enabled to install a public key on the remote machine.\nNow execute: <code>ssh-copy-id -p 8022 -i id_rsa IP_ADDRESS</code>, making sure to replace <code>id_rsa</code> with the name of your key and <code>IP_ADDRESS</code> with the IP address of your Android machine.</p>\n</div>\n<div class=\"paragraph\">\n<p>Alternatively, you can manually copy the content inside <code>id_rsa.pub</code> (public key), which is already on the PC, and looks like <code>ssh-rsa &lt;A LOT OF RANDOM STRINGS&gt; user@host</code>.\nAfter copying, paste this content to the Termux file <code>$HOME/.ssh/authorized_keys</code> (remote machine).\nBefore copying and pasting, you must connect through <code>ssh user@IP_ADDRESS -p 8022</code>, replacing <code>IP_ADDRESS</code> with the IP address of your Android machine.\nDoing so enables you to copy the content of the public key, using any text editor available on PC, and paste it inside an ssh session handled by Termux.</p>\n</div>\n<div class=\"paragraph\">\n<p>What looks strange to me is that <code>user</code> could be just about anything.\nI tried to log in without supplying a user, which means I was using my PC username, and it worked!\nI tried to log in with a different username and this also worked.\nWhen issuing the <code>whoami</code> command inside Termux, it shows the username of the Termux user, which is <code>u0_a504</code> in my case.</p>\n</div>\n<div class=\"paragraph\">\n<p>If everything went fine, you will see a message like this one:<br></p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"> Number of key(s) added: 1</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>If your system has an ssh-agent, you should now <a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=linux#adding-your-ssh-key-to-the-ssh-agent\">add your newly generated key to the agent</a>.\nAfter adding the key, try logging into the machine with: <code>ssh -p '8022' 'IP_ADDRESS'</code>\nBe sure to replace <code>IP_ADDRESS</code> with the IP address of your Android machine and check to make sure that only the key(s) you wanted were added.\nIf you don&#8217;t have an agent running, you will have to use a slightly different command: <code>ssh -i id_rsa -p '8022' 'IP_ADDRESS'</code>\nHere, you need to replace <code>id_rsa</code> with the name of your key and <code>IP_ADDRESS</code> with the IP address of your Android machine.\nThat would display for me as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"> ssh -i ssh_key_for_jenkins_agent_2023-03-10 -p 8022 192.168.1.xx\n Welcome to Termux!</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>At this point, password authentication can be disabled.\nUsing <code>nano</code>, edit the file <code>$PREFIX/etc/ssh/sshd_config</code>, and replace the line beginning <code>PasswordAuthentication</code> with <code>PasswordAuthentication no</code>.\nBack in the Termux app, execute the command <code>pkill sshd &amp;&amp; sshd</code> to restart the <code>sshd</code> server with the updated configuration file.\nOf course, if you were to do that from your PC, you would be disconnected and the ssh server would not be restarted.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now you can log in to the remote machine without a password.\nJust execute the command <code>ssh -p '8022' 'IP_ADDRESS'</code>\nFor this command, replace <code>IP_ADDRESS</code> with the IP address of your Android machine, or with the more complex command <code>-i</code>, if your machine does not use an ssh agent.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"installing-java-on-termux\"><a class=\"anchor\" href=\"#installing-java-on-termux\"></a>Installing Java on Termux</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>We all know that Jenkins is written in Java.\nWe also know Android apps are written in Java or Kotlin, so while we could hope that we magically skip this step, I&#8217;m afraid we can&#8217;t.\nThe virtual machine that runs Android apps is not the same as the one that runs on your PC.\nLater on, we&#8217;ll detail the main differences between the two.\nThe Android virtual machine (called dalvik) is available on Termux, but it is not capable of executing our agent.jar file, since the <code>java</code> command is not available yet.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">dalvikvm -showversion\nART version 2.1.0 arm64\njava --version\nbash: /data/data/com.termux/files/usr/bin/java: No such file or directory</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>For the time being, let&#8217;s assume that we need to install Java on Termux.\nLet&#8217;s find out which java versions are available on Termux:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg update &amp;&amp; pkg search openjdk\nChecking availability of current mirror:\n[*] https://packages-cf.termux.dev/apt/termux-main: ok\nSorting...\nDone\nFull Text Search...\nDone\nopenjdk-17/stable 17.0-25 aarch64\n  Java development kit and runtime\nopenjdk-17-source/stable 17.0-25 all\n  Source files for openjdk-17\nopenjdk-17-x/stable 17.0-25 aarch64\n  Portion of openjdk-17 requiring X11 functionality</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Nice.\nJenkins supports Java 17 since the <a href=\"/changelog-old/#v2.355\">2.355</a> and <a href=\"/changelog-stable/#v2.346.1\">2.346.1 LTS</a> releases, so let&#8217;s go with OpenJDK 17.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg install openjdk-17</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now the <code>java</code> command is available:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">java --version\nopenjdk 17-internal 2021-09-14\nOpenJDK Runtime Environment (build 17-internal+0-adhoc..src)\nOpenJDK 64-Bit Server VM (build 17-internal+0-adhoc..src, mixed mode)</code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"creating-a-jenkins-ssh-agent\"><a class=\"anchor\" href=\"#creating-a-jenkins-ssh-agent\"></a>Creating a Jenkins ssh agent</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>You should now be able to connect via <code>ssh</code> to your Android device running Termux if you have issued the <code>sshd</code> command.\nYour <code>ssh</code> server also knows about the <code>ssh</code> key you generated on your PC.\nWe will now create a credential based on that key within Jenkins, that will allow you to connect to your Android device running Termux from Jenkins later on.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"creating-a-jenkins-ssh-credential\"><a class=\"anchor\" href=\"#creating-a-jenkins-ssh-credential\"></a>Creating a Jenkins ssh credential</h3>\n<div class=\"paragraph\">\n<p>For this part, there is almost nothing specific to Android.\nYou can follow the <a href=\"/doc/book/using/using-agents/\">official documentation</a>, and there are instructions on how to <a href=\"/doc/book/using/using-agents/#create-a-jenkins-ssh-credential\">create a Jenkins credential</a>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"setting-up-a-jenkins-ssh-agent\"><a class=\"anchor\" href=\"#setting-up-a-jenkins-ssh-agent\"></a>Setting up a Jenkins ssh agent</h3>\n<div class=\"paragraph\">\n<p>It&#8217;s now time to <a href=\"/doc/book/using/using-agents/#setup-up-the-agent1-on-jenkins\">set up your agent</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You can use <code>Android</code> as a label for your agent.\nChoose the <code>Launch agent via SSH</code> option.\nThe hostname should be your phone&#8217;s IP address, which was named 'IP_ADDRESS' in the previous steps.</p>\n</div>\n<div class=\"paragraph\">\n<p>The credentials should be the ones you created in the previous steps.\nThe remote root directory should be <code>/data/data/com.termux/files/home</code>.\nThe host key verification strategy should be <code>Non-verifying Verification Strategy</code>.\nThe <code>Launch method</code> should be <code>Launch agent via SSH</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Don&#8217;t forget to select the <strong>Advanced</strong> option and change the port to <code>8022</code>.\nYou could also specify the path of the <code>java</code> executable you installed in the previous steps, which happens to be <code>/data/data/com.termux/files/usr/bin/java</code>.\nSince I have installed the 'Platform Labeller' plugin, I have also checked the 'Automatic Platform Labels' checkbox.\nWe&#8217;ll see later on if it can cope with Android devices that don&#8217;t use the <code>lsb_release</code> command.</p>\n</div>\n<div class=\"paragraph\">\n<p>The very last thing to do is to select <code>Save</code>.\nYou should now see the complete list of your defined agents.\nWhile the agent has been created, it may have not started yet.\nIf that&#8217;s the case, select the name corresponding to your newly created agent ('Android Phone' for me) and select <code>Launch</code> to start the agent.\nAfter some time, you should see in the logs <code>Agent successfully connected and online</code>, which means you can now use this agent to run your builds.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"using-a-jenkins-ssh-agent\"><a class=\"anchor\" href=\"#using-a-jenkins-ssh-agent\"></a>Using a Jenkins ssh agent</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Let&#8217;s create a new job and use our newly created agent to run it.</p>\n</div>\n<div class=\"paragraph\">\n<p>The simplest job that comes to mind is a <code>Freestyle project</code> that runs the <code>uname -a</code> command.\nThat should give us some information about the Android device we are running on, while proving that the agent is working.\nOnce again, there is nothing specific to Android for this step, so you can follow the <a href=\"/doc/book/using/using-agents/#delegating-the-first-job-to-agent1\">official documentation</a>.\nThe only changes to the documentation I have made are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>I have used the <code>Android</code> label to make sure the job is run on the Android agent.</p>\n</li>\n<li>\n<p>I have used the <code>uname -a</code> command instead of the <code>echo $NODE_NAME</code> command.</p>\n</li>\n</ul>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">Started by user admin\nRunning as SYSTEM[EnvInject] - Loading node environment variables.\nBuilding remotely on Android Phone (aarch64 aarch64-unknown+check_lsb_release_installed aarch64-unknown+check_lsb_release_installed-unknown+check_lsb_release_installed android unknown+check_lsb_release_installed-unknown+check_lsb_release_installed unknown+check_lsb_release_installed) in workspace /data/data/com.termux/files/home/workspace/Android First Job\n[Android First Job] /bin/sh -xe /data/data/com.termux/files/usr/tmp/jenkins13760213506108463207.sh\n+ uname -a\nLinux localhost 4.4.192-perf+ #1 SMP PREEMPT Fri Dec 10 13:53:37 WIB 2021 aarch64 Android\nFinished: SUCCESS</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We now have a working Jenkins agent running on Android, thanks to Termux.\nNow what?\nOf course, we will be limited to the commands and packages that are <a href=\"https://wiki.termux.com/wiki/Package_Management\">available</a> on Termux.\nFor example, I can&#8217;t see <code>gcc</code> in the list of available packages, which could be troublesome.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg search gcc\nChecking availability of current mirror:\n[*] https://termux.astra.in.ua/apt/termux-main: ok\nSorting...\nDone\nFull Text Search...\nDone</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>No gcc?\nYou&#8217;re right, there is no <code>gcc</code> in the official Termux repository.\nHowever, the Termux community comes to the rescue with some repositories that provide additional packages, like <a href=\"https://github.com/its-pointless/its-pointless.github.io\">gcc</a>.\nAfter installing the repository, we can install <code>gcc</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">pkg search gcc\nChecking availability of current mirror:\n[*] https://termux.astra.in.ua/apt/termux-main: ok\nSorting...\nDone\nFull Text Search...\nDone\ngcc-6/termux 6.5.0-2 aarch64\n  GNU C compiler\ngcc-7/termux 7.4.0-2 aarch64\n  GNU C compiler\ngcc-8/termux 8.3.0-3 aarch64\n  GNU C compiler\nlibgccjit-8-dev/termux 8.3.0-3 aarch64\n  GCC just-in-time compilation\nlibgomp-7/termux 7.4.0-2 aarch64\n  openmp library for gcc\nlibgomp-8/termux 8.3.0-3 aarch64\n  openmp library for gcc-8</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As you can see, we have a few <code>gcc</code> versions to try out.</p>\n</div>\n<div class=\"paragraph\">\n<p>What if we need <code>gcc</code> 10, for example?\nWe would have to <a href=\"https://bruno.verachten.fr/2019/11/07/compile-gcc9-on-rk3399/\">compile it ourselves</a> like in the good old days.\nThis solves the problem for <code>gcc</code>, but what about other packages?\nWe are somewhat limited by the availability of packages on Termux.</p>\n</div>\n<div class=\"paragraph\">\n<p>What if we could work around that limitation though?\nWhat about running Docker on Termux?\nDocker has no limit on packages as long as we choose the right base image, right?\nSo, we could run a Jenkins agent on Termux through a Docker image, based on another distribution that happens to supply all the packages we need.\nThe <em>slight</em> problem that may arise, is that Docker is not easily installed on Termux, and once installed, it won&#8217;t work out of the box.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"android-apps-are-running-some-kind-of-jvm-right-so-why-not-use-a-jenkins-inbound-agent\"><a class=\"anchor\" href=\"#android-apps-are-running-some-kind-of-jvm-right-so-why-not-use-a-jenkins-inbound-agent\"></a>Android apps are running some kind of JVM, right? So why not use a Jenkins inbound agent?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Android apps are written in Java or Kotlin programming languages, and they run on one of two Java Virtual Machines (JVM):</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Android Runtime, known as <a href=\"https://en.wikipedia.org/wiki/Android_Runtime\">ART</a></p>\n</li>\n<li>\n<p>Dalvik Virtual Machine, known as <a href=\"https://en.wikipedia.org/wiki/Dalvik_%28software%29\">DVM</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>It is possible to access the JVM from an <code>ADB</code> shell and run Java code using the <code>dalvikvm</code> command.\nThis is a command-line tool that allows you to execute Java code on the DalvikVM.</p>\n</div>\n<div class=\"paragraph\">\n<p>Nevertheless, there are preliminary steps that you need to take before you can run Java code on an Android device:\n* Compile your Java code into a <code>.class</code> file\n* Transform it into the <code>DEX</code> format using the <code>d8</code> tool\n* Push the resulting  <code>.dex</code> file to your Android device\n* Run the Java class using the <code>dalvikvm</code> command.</p>\n</div>\n<div class=\"paragraph\">\n<p>It&#8217;s possible to some extent to automate these steps, but it&#8217;s not trivial.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>dalvikvm</code> command is a low-level tool that may not be suitable for running complex Java apps, which may need additional dependencies to function properly.\nEven if that would work, it would be a very roundabout solution (which is fine with me), but where would we go from there?\nI mean, we have a subset of the Linux commands available in the ADB shell, but we can&#8217;t install tools, packages, etc.\nFor example, how would we install <code>gcc</code>?</p>\n</div>\n<div class=\"paragraph\">\n<p>So what could our Jenkins agent do?\nNot so much I&#8217;m afraid&#8230;&#8203;\nWe could still use Termux, as we&#8217;ve seen earlier Termux uses the base shell that is available through ADB.\nIf we could launch the inbound agent through Dalvik, we would be able to use the Dalvik VM while using Termux, to keep the best of both worlds (Android &amp; Linux-like).</p>\n</div>\n<div class=\"paragraph\">\n<p>Another solution would be to create a library from the agent.jar file and integrate it into an Android app.\nThat part could work but then the resulting agent would be even more limited.\nThere wouldn&#8217;t be a shell available, as the app is sandboxed.\nWe would have an agent able to do almost nothing&#8230;&#8203;</p>\n</div>\n<div class=\"paragraph\">\n<p>I&#8217;d like to know more nonetheless, so I&#8217;ll write down my thoughts about that in another article, once I&#8217;ve done my homework.</p>\n</div>\n</div>\n</div>"
}