{
  "id": "2023-03-2023-03-10-miniJen-and-RISC-V",
  "url": "/blog/2023/03/10/2023-03-10-miniJen-and-RISC-V/",
  "title": "miniJen and RISCV",
  "date": "2023-03-10",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "jenkins",
    "miniJen",
    "riscv"
  ],
  "summary": "Read more about miniJen and RISCV...",
  "opengraph_image": "/images/post-images/2023/03/03/2023-03-03-miniJen-is-alive/image2.png",
  "content_html": "<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/03/2023-03-03-miniJen-is-alive/image2.png\" alt=\"miniJen logo\" width=\"100\"></span></p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"short-introduction\"><a class=\"anchor\" href=\"#short-introduction\"></a>Short Introduction</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>What is miniJen?\nIt's the smallest Jenkins multi-cpu-architectures instance known to this day.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/03/2023-03-03-miniJen-is-alive/fosdem_2023_booth_display.jpg\" alt=\"miniJen as a FOSDEM display on the booth\" width=\"839\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>It's composed of a 4 <a href=\"https://en.wikipedia.org/wiki/Arm_(company)\">arm</a> <a href=\"https://en.wikipedia.org/wiki/ARM_Cortex-A55\">Cortex-A55</a> core <a href=\"https://en.wikipedia.org/wiki/Rockchip\">RockChip</a> controller (<a href=\"https://en.wikipedia.org/wiki/AArch64#ARMv8.2-A\">aarch64</a>), a 4 arm <a href=\"https://en.wikipedia.org/wiki/ARM_Cortex-A7\">Cortex-A7a</a> core <a href=\"https://en.wikipedia.org/wiki/Allwinner_Technology\">AllWinner</a> agent (<a href=\"https://en.wikipedia.org/wiki/ARM_architecture_family#AArch32\">armv7l</a>), a 4 arm <a href=\"https://en.wikipedia.org/wiki/ARM_Cortex-A53\">Cortex-A53</a> core AllWinner agent (aarch64), and a single <a href=\"https://linux-sunxi.org/D1#cite_note-riscv_extensions-4\">RV64GCV</a> core AllWinner agent (<a href=\"https://en.wikipedia.org/wiki/RISC-V\"><code>RISC-V</code></a>).</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"a-bit-of-personal-history\"><a class=\"anchor\" href=\"#a-bit-of-personal-history\"></a>A bit of personal history</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I've been an arm fanboy for years, it all started in 2014 or so when I bought a <a href=\"https://en.wikipedia.org/wiki/Raspberry_Pi\">Raspberry Pi</a>.\nAt that time, it reminded me of my younger days when I used to tinker with an <a href=\"https://en.wikipedia.org/wiki/HP_48_series\">HP-48SX</a> calculator, using <a href=\"https://literature.hpcalc.org/community/hp48sx-mldl.pdf\">assembly language</a>, discovering new methods, new instructions, and new backdoors every other day.\nLater on, when resin.io (now <a href=\"https://blog.balena.io/resin-io-changes-name-to-balena-releases-open-source-edition/\">balena.io</a>) ported <a href=\"https://en.wikipedia.org/wiki/Docker_(software)\">Docker</a> to the <a href=\"https://linuxgizmos.com/open-source-resinos-adds-docker-to-armlinux-boards/\">arm processor</a>, I then became obsessed with arm and Docker.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/docker-on-arm.png\" alt=\"Docker on arm\" width=\"839\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>I spent way too much time compiling FOSS for <code>arm32</code> and <code>aarch64</code>, and building docker images around them.</p>\n</div>\n<div class=\"paragraph\">\n<p>It was fun, it was exploratory, it was a way to learn new things…&#8203; and it was a way to contribute to the FOSS community.\nI made a lot of friends, and I gained a lot of knowledge.\nI sometimes had to recompile gcc with…&#8203; gcc to be able to recompile ffmpeg for example, and one thing led to another.\nI had to recompile one library, then another, then a utility, then another library, then the kernel, then another library…&#8203;\nBoy, that was fun!\nThese were good times.\nI may sound nostalgic, and I think I am.\nIt was hard, but there were immediate or delayed benefits because everybody was benefiting from the community work.\nFor multiple reasons, such as energy saving, IoT, Edge Computing, server rooms, Cloud, or just for fun, arm was bound to be everywhere.\nIt was the future.</p>\n</div>\n<div class=\"paragraph\">\n<p>Colleagues, who also happen to be friends, used to call me \"<em>mister WhatIf</em>\".\nYes, I had way too many ideas, but if you want to find a good idea one of these days, you have to let tons of ideas, good or bad, make their way into the world.\nSo yes, basically I was spending most of my free time asking myself (and friends) \"<em>What if…&#8203;?</em>\".\nMost of the time, these \"<em>What if…&#8203;?</em>\" questions lead to an implementation on an arm SBC, due to how cheap and available they were at that time.\nSome of these experiments were successful, and some were not.\nFrankly, hosting a complete Gitlab server on a Raspberry Pi 3B was ambitious, but I learned a lot from them.</p>\n</div>\n<div class=\"paragraph\">\n<p>Back to arm: when the future becomes the present, it's not that exciting anymore.\nArm is not as <a href=\"https://twitter.com/jonmasters/status/1523041597683683328\">boring</a> as X86, but most of the software now works on arm, from microcontrollers to the Cloud.\nEven <a href=\"https://arstechnica.com/gadgets/2022/02/lenovo-announces-the-first-arm-based-thinkpad/\">laptops</a> and <a href=\"https://www.apple.com/macbook-air-m2/\">MacBooks</a> have seen the light of arm.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you don't own any arm hardware, you can still develop for this architecture thanks to <a href=\"https://www.qemu.org/docs/master/system/target-arm.html\">QEMU</a> and <a href=\"https://docs.docker.com/build/building/multi-platform/\">Docker</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>You may come across sentiments such as:<br>\nIt's not that hard to compile the software for arm anymore. <br>\nIt's not that exciting anymore. <br>\nIt's not that fun anymore. <br>\nIt's not that exploratory anymore. <br>\nIt's not that rewarding anymore. <br>\nIt's not that challenging anymore. <br>\nIt's not that cool anymore. <br>\nIt's not that…&#8203; well, you get the point.<br></p>\n</div>\n<div class=\"paragraph\">\n<p>I still love the arm ecosystem and all the people I've met, but it feels like the honeymoon time is gone and we're in a more platonic relationship now.\nIt is stable, deep, and true, (I love the <a href=\"https://www.arm.com/resources/developer-program\">arm community</a>!) but the time has come to find another quest.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-risc-v-quest\"><a class=\"anchor\" href=\"#the-risc-v-quest\"></a>The <code>RISC-V</code> quest</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I've been lurking in the <a href=\"https://en.wikipedia.org/wiki/RISC-V\"><code>RISC-V</code></a> community, projects, SoCs, SBCs, and vendors for a while now, and following the <a href=\"https://riscv.org/\">RISC-V Foundation</a> for quite some time.</p>\n</div>\n<div class=\"paragraph\">\n<p>Until recently, I didn't have any <code>RISC-V</code> hardware to play with and I was not seeing myself buying a very expensive, but lame, <code>RISC-V</code> SBC without any project in mind.\nI was waiting for the right moment and the right project.\nI've been working with Jenkins since April 2022, and with my love of arm being what it is, my first contributions were about <code>arm32</code> and <code>aarch64</code> for the Jenkins project.\nDuring the summer of 2022, I spotted an interesting <code>RISC-V</code> board called the <a href=\"https://mangopi.org/mangopi_mqpro\">MQ-PRO</a> from an unknown (to me) manufacturer called MangoPi.\nThe price was right, and even though the specs were not that good, the board was available.\nAt that time, the software support was not the best, but I was not afraid of that because of my personal history with arm.\nHowever, I did not buy it because I was not sure if I would have the time to work on it.\nAt the beginning of September 2022, the amazing Michael Hurt organized a giveaway on his <a href=\"https://twitter.com/Mingusdude\">Twitter account</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/giveaway.png\" alt=\"Michael Hurt Giveaway\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>I won the board thanks to <a href=\"https://twitter.com/Mingusdude/status/1565887135785312256\">my proposal</a> linked to Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/proposal.png\" alt=\"poddingue's proposal\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>At that time, I had no clear idea if <a href=\"https://builds.shipilev.net/openjdk-jdk-riscv/\">Java</a> would run on <code>RISC-V</code>, and of course no clue if Jenkins would run on top of that.\nI also knew <a href=\"https://carlosedp.medium.com/docker-containers-on-risc-v-architecture-5bc45725624b\">Docker</a> was not yet officially available for RISC-V.\nThat sounded way too fun not to try…&#8203; especially since the board was basically free.\nI then felt the same level of excitement I used to feel when I was working on <code>arm32</code> and <code>aarch64</code>.\nThis meant there was once again new territories to explore, new challenges to face, new friends to make, and new knowledge to gain.</p>\n</div>\n<div class=\"videoblock\">\n<div class=\"content\">\n<iframe src=\"https://www.youtube.com/embed/qdHSuClqtic?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-risc-v-journey\"><a class=\"anchor\" href=\"#the-risc-v-journey\"></a>The <code>RISC-V</code> journey</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"prerequisites-and-first-steps\"><a class=\"anchor\" href=\"#prerequisites-and-first-steps\"></a>Prerequisites and first steps</h3>\n<div class=\"paragraph\">\n<p>I read in the <a href=\"https://twitter.com/bretweber/status/1559631172623278081\">news</a> that Ubuntu 22.04 was supplying a <code>RISC-V</code> image, designed for the <a href=\"https://linux-sunxi.org/Allwinner_Nezha\">AllWinner Nezha</a>, that could work for this board.\nThe Nezha was the first <a href=\"https://linux-sunxi.org/D1\">D1</a>-based board made available to the public.\nThe MangoPi MQ-Pro came after that, but shares more or less the same set of components.\nAs strange as it may seem (a <code>RISC-V</code> build by an <code>Arm</code>bian contributor), I also found an <a href=\"https://forum.armbian.com/topic/21465-armbian-image-and-build-support-for-risc-v/\">image</a> built by a regular contributor of Armbian, <a href=\"https://forum.armbian.com/profile/1215-balbes150/\">balbes150</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>I started by downloading <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=333\"><code>Armbian_22.08.0-trunk_Nezha_jammy_current_6.1.0_xfce_desktop.img</code></a> from December 06, 2002, burned it thanks to <a href=\"https://www.balena.io/etcher\">Balena Etcher</a>, and was able to <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=663\">boot</a> the board.\n<a href=\"https://twitter.com/bretweber\">bret.dk</a> gave me an interesting pointer to <a href=\"https://jamesachambers.com/\">James A. Chambers'</a> <a href=\"https://jamesachambers.com/mangopi-mq-pro-d1-ubuntu-preview/\">blog post</a> about the Ubuntu Preview for RISC-V.\nIn the blog post from James A. Chambers, there is a paragraph about OpenJDK Availability for RISC-V, and we can see that there is a wide range of OpenJDK versions, from 11 to 20, available here.\nThat was unexpected because I thought I would have to compile everything from scratch, make changes to the build system, and so on.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/03/2023-03-03-miniJen-is-alive/mq-pro.png\" alt=\"MangoPi MQ-Pro pic from the manufacturer\" width=\"500\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>As you can see, the board is very minimalistic.\nWe only have two USB-C ports, with one being used for power, a microSD card slot, and a mini HDMI port.\nMy goal was to get this board on the Wi-Fi network, but how would that be possible without an Ethernet port?\nMost of the time when I use Armbian, I just plug in an Ethernet cable, and I'm good to go, as the board uses DHCP by default.\nI just have to search for a new machine appearing on the router webpage, and issue an <code>ssh</code> command to connect to it.</p>\n</div>\n<div class=\"paragraph\">\n<p>This time, I was kind of stuck.\nI had no USB-C keyboard, no mini-HDMI cable, and no Ethernet plug to use.\nWhat was I to do?\nOnce again, <a href=\"https://twitter.com/bretweber\">bret.dk</a> came to the rescue.\nBret does tons of reviews on <a href=\"https://bret.dk/\">his blog</a> and I found <a href=\"https://bret.dk/waveshare-raspberry-pi-usb-ethernet-hat-review/\">one</a> about an Ethernet/USB hat for the Raspberry Pi Zero W.\nI bought the same hat, a USB-C hub just in case, and a mini-HDMI cable.\nThe hat never worked for me for some reason, but the USB-C hub did.\nIt's an almost-no-name <a href=\"https://www.amazon.fr/gp/product/B08GM2H1Q2\">generic hub</a>, but it worked.\nI managed to get Ethernet on it so that my board got an IP address from my router.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"linux-and-java-installation\"><a class=\"anchor\" href=\"#linux-and-java-installation\"></a>Linux and Java installation</h3>\n<div class=\"sect3\">\n<h4 id=\"linux\"><a class=\"anchor\" href=\"#linux\"></a>Linux</h4>\n<div class=\"paragraph\">\n<p>I could then <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=969\">log in</a> thanks to <code>ssh</code>, create an admin user, and so on.\nI then <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=1239\">removed</a> packages linked to <code>X11</code> that I didn't need for my use case.\nLater on, I <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=2111\">configured</a> a Wi-Fi connection, and <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=2220\">created</a> a <code>jenkins</code> user.\nThe next step logically, was to <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=2391\">install</a> the default OpenJDK 17 build provided by Ubuntu.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"java\"><a class=\"anchor\" href=\"#java\"></a>Java</h4>\n<div class=\"paragraph\">\n<p>I now know the default OpenJDK 17 build is a Zero VM build, so I also <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=2551\">installed</a> a nightly build of Temurin's <a href=\"https://github.com/adoptium/temurin19-binaries/releases\">OpenJDK 19</a> and <a href=\"https://github.com/adoptium/temurin20-binaries/releases\">OpenJDK 20</a>.\nBy the way, do you know what <a href=\"https://twitter.com/adoptium/status/1435519863091564547\">Temurin</a> is?</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Temurin is both a chemical similar to caffeine and an anagram of \"runtime\".\nOh, and a cool new free-to-use Java runtime from the Eclipse Foundation!\nEnjoy.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/temurin.png\" alt=\"Temurin is almost caffeine\" width=\"500\"></span></p>\n</div>\n<div class=\"sect4\">\n<h5 id=\"zero-vm\"><a class=\"anchor\" href=\"#zero-vm\"></a>Zero VM</h5>\n<div class=\"paragraph\">\n<p>You may wonder what a Zero VM build is, and why I want to use something else.\nZero VM builds come with pros and cons:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Zero VM is a Java Virtual Machine implementation that is designed to execute Java applications on systems that use architectures other than the x86 architecture.\nIt is specifically <em>optimized</em> for systems that use ARM, PowerPC, and other non-x86 architectures.</p>\n</li>\n<li>\n<p><a href=\"https://openjdk.org/projects/zero/\">Zero VM</a> is part of the <a href=\"https://openjdk.org/\">OpenJDK project</a>, which is an open-source implementation of the Java SE platform.\nZero VM uses a technique called \"interpreter-only\" mode, which allows it to run on platforms that do not support just-in-time (JIT) compilation.</p>\n</li>\n<li>\n<p>In interpreter-only mode, Zero VM executes Java bytecode directly, without compiling it to native code (it does not use any assembler).\nThis approach typically results in slower performance compared to <a href=\"https://developers.redhat.com/articles/2021/06/23/how-jit-compiler-boosts-java-performance-openjdk\">JIT</a>-enabled VMs, but it has the advantage of being able to run on a wider range of platforms.\nThat's why the developers got a working OpenJDK to build <em>this early</em> for RISC-V.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>So, as much as I'm grateful for the Zero VM build, I'm also curious to see how Temurin's builds perform on this board.\nIn other words, the board is already so slow that using a Zero VM will make it unusable.\nThere, I said it.\nThe default OpenJDK implementation is there just in case I need to use it for some reason, but I plan to only use Temurin's builds.</p>\n</div>\n</div>\n<div class=\"sect4\">\n<h5 id=\"openjdk-19\"><a class=\"anchor\" href=\"#openjdk-19\"></a>OpenJDK 19</h5>\n<div class=\"paragraph\">\n<p>As you may already know, JDK19 is almost <a href=\"https://endoflife.date/java\">end of life</a> (21st of March 2023), so I'm not going to use it for long, and Temurin does not provide steady <code>RISC-V</code> nightly builds.\nSpeaking of end-of-life, I could not recommend enough <a href=\"https://endoflife.date/\">endoflife.date</a> which is an <a href=\"https://github.com/endoflife-date/endoflife.date\">open-source</a> project that aims to provide a simple way to find the end-of-life dates of software and operating systems.\nIt even provides an <a href=\"https://endoflife.date/docs/api\">API</a> to query the data.\nThanks a lot to <a href=\"/blog/authors/markewaite/\">Mark Waite</a> for letting me know about this project.</p>\n</div>\n<div class=\"paragraph\">\n<p>Back to openJDK19, how did I find the last <code>RISC-V</code> published nightly build?\nWhile discussing with <a href=\"https://twitter.com/sxaTech\">Stewart Addison</a> on various GitHub issues related to Temurin on <code>RISC-V</code> (and <code>aarch64</code>), and later on through Temurin's <a href=\"https://adoptium.net/slack/\">Slack channel</a>, we sympathized.\nHe mentioned that he had the same board, and gave me a link to the <a href=\"https://ci.adoptopenjdk.net/job/build-scripts/job/jobs/job/jdk19u/job/jdk19u-linux-riscv64-temurin/14/\">latest <code>RISC-V</code> build</a> he could find.\nSo, that's the version <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=2565\">I'm using</a> for now.\nPlease note that your libc should be at least <a href=\"https://sourceware.org/pipermail/libc-alpha/2022-February/136040.html\"><code>2.35</code></a> for this build to work.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"the-risc-v-jenkins-agent\"><a class=\"anchor\" href=\"#the-risc-v-jenkins-agent\"></a>The <code>RISC-V</code> Jenkins agent</h3>\n<div class=\"sect3\">\n<h4 id=\"installation\"><a class=\"anchor\" href=\"#installation\"></a>Installation</h4>\n<div class=\"paragraph\">\n<p>I then <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=3174\">added an <code>ssh</code> key</a> on the <code>RISC-V</code> machine that would become an agent, <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=3125\">created</a> a new node within the Jenkins UI, and installed the <a href=\"https://www.youtube.com/watch?v=4KghHJEz5no&t=115s\">agent</a> on it.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"testing\"><a class=\"anchor\" href=\"#testing\"></a>Testing</h4>\n<div class=\"paragraph\">\n<p>The last thing to do before confirming that Jenkins works on <code>RISC-V</code> was to launch a <a href=\"https://www.youtube.com/live/xtI1nwwe70A?feature=share&t=3383\">simple <code>RISC-V</code> job</a>.\nSpoiler alert, it did work!</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/simplest-riscv-job-possible.png\" alt=\"Simplest RISC-V job ever\" width=\"839\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>The next step was to install a <a href=\"/doc/book/pipeline/\">Pipeline</a> that <a href=\"https://github.com/gounthar/jenkins-temurin-riscv/blob/main/Jenkinsfile#L7\">downloads</a> the latest <a href=\"https://github.com/adoptium/temurin20-binaries/tree/6855a34aca01a3368b3feaf138784ea3a4c08c99\">nightly build of Temurin openJDK20</a>, and installs it on the <code>RISC-V</code> machine, overriding the one I installed previously.\nThis is done mostly thanks to the <a href=\"https://github.com/cli/cli\"><code>gh</code> command line tool</a> that can do wonders when it comes to interacting with GitHub on the command line.</p>\n</div>\n<div class=\"paragraph\">\n<p><code>gh</code> is open-source, and it's even available for <code>RISC-V</code>, but not directly in the <a href=\"https://github.com/cli/cli/releases\"><code>gh</code> GitHub releases</a>.\nAs far as I know, <code>go</code> is <a href=\"https://go.dev/dl/\">not yet officially available</a> for <code>RISC-V</code>, and <code>gh</code> is written in <code>go</code>.\nSo what's the catch?\nWell, it's open-source, and Ubuntu has a <a href=\"https://packages.ubuntu.com/source/lunar/gh\">source package</a> for it.\nEven if I can't see the binary package for <code>RISC-V</code> on the <a href=\"https://packages.ubuntu.com/lunar/gh\">Ubuntu package page</a>, it magically appeared on my machine after an <code>apt install gh</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Pipeline uses openJDK19 to update openJDK20, and openJDK20 to update openJDK19.\nThe main Jenkins process is still running on the Zero VM openJDK17, which is something I'll have to address later on.\nThat part worked, and I was pretty happy about the result.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/openjdk-job.png\" alt=\"OpenJDK RISC-V\" width=\"839\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>But what about a smoke test?</p>\n</div>\n<div class=\"paragraph\">\n<p>I mean, I'm not going to use Jenkins on <code>RISC-V</code> if I can't build a real-life project with it, right?\nI asked in the community, and <a href=\"/blog/authors/markewaite/\">Mark Waite</a>, <a href=\"/blog/authors/basil/\">Basil Crow</a>, and <a href=\"/blog/authors/dduportal/\">Damien Duportal</a> all agreed that the best way to test Jenkins on <code>RISC-V</code> was to build a few Jenkins plugins with it.\nI started with an ambitious project, the <a href=\"https://plugins.jenkins.io/git/\">git plugin</a> itself.\nWell, it was quite big and not ready for openJDK19, so I switched to a smaller one, the <a href=\"https://plugins.jenkins.io/git-client/\">git client plugin</a>.\nUnfortunately, the results were similar and did not go well.</p>\n</div>\n<div class=\"paragraph\">\n<p>I then switched to a very basic one, the <a href=\"https://plugins.jenkins.io/jenkins-infra-test/\">infrastructure test plugin</a>, which is used to test the Jenkins infrastructure as its name implies.\nBad luck occurred once again, as it was not ready for open JDK19 either.\nIn desperation, I switched to the <a href=\"https://plugins.jenkins.io/platformlabeler/\">Platform Labeler</a> which is ready for openJDK17, but it required way too much memory to be built.\nBummer!\nI was stuck, and to this day, I haven't found a Jenkins plugin that can be built with openJDK19 on <code>RISC-V</code> with very little memory.\nI have yet to find another kind of smoke test that would prove Jenkins works on <code>RISC-V</code>, and the other options is to wait until a plugin is ready for openJDK19.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-risc-v-future-for-jenkins\"><a class=\"anchor\" href=\"#the-risc-v-future-for-jenkins\"></a>The <code>RISC-V</code> future for Jenkins</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"back-to-the-future\"><a class=\"anchor\" href=\"#back-to-the-future\"></a>Back to the future</h3>\n<div class=\"paragraph\">\n<p>When it comes to Jenkins and the <code>RISC-V</code> ecosystem, I swear I thought I was some kind of pioneer, like in the good old days of arm.\nGuess what, I'm not!\nI've finally done my homework and found out that Jenkins has been running on <code>RISC-V</code> for a while now.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In a <a href=\"https://riscv.org/2021/05/risc-v-foundation-demonstrates-jenkins-on-risc-v-at-lfelc-spring-2021-virtual-summit/\">blog post from May 2021</a> (which has unfortunately disappeared), the <a href=\"https://riscv.org/\"><code>RISC-V</code> Foundation</a> demonstrated Jenkins running on a <code>RISC-V</code> board with a Linux operating system.\nThe demo used the OpenSBI bootloader and the OpenJDK <code>RISC-V</code> port to run Jenkins, and was able to successfully build and test a simple Java application.\nThe post includes detailed instructions for setting up Jenkins on <code>RISC-V</code> and running a build job.</p>\n</li>\n<li>\n<p>In a <a href=\"https://www.youtube.com/watch?v=Bb07GswNYxM\">video of the presentation</a> (which has unfortunately disappeared) given at the LFELC Spring 2021 Virtual Summit, we could see a demonstration of Jenkins running on <code>RISC-V</code>.\nThe presentation was given by <a href=\"https://www.linkedin.com/in/anup-v-patel/?originalSubdomain=in\">Anup Patel</a>, who was at that time, a member of the <code>RISC-V</code> Technical Steering Committee.</p>\n</li>\n<li>\n<p>There is <a href=\"https://www.youtube.com/watch?v=6GQw6N0HmZQ\">another video</a> (which has unfortunately disappeared) that shows Jenkins running on <code>RISC-V</code>, presented by <a href=\"https://en.wikipedia.org/wiki/Keith_Packard\">Keith Packard</a> at the <code>RISC-V</code> Workshop Taiwan 2021.\nThe video shows Jenkins running on a <a href=\"https://www.sifive.com/boards/hifive-unmatched\">HiFive Unmatched</a> development board, which is based on the SiFive Freedom U740 <code>RISC-V</code> processor.</p>\n</li>\n<li>\n<p>In a <a href=\"https://www.reddit.com/r/RISCV/comments/l8jl0a/jenkins_running_on_hifive_unmatched/\">Reddit thread from January 2021</a> (which has unfortunately disappeared), a user reported running Jenkins on a HiFive Unmatched <code>RISC-V</code> board using Ubuntu 20.04 and OpenJDK 11.\nThe user reported that Jenkins worked well on the <code>RISC-V</code> board and was able to run build jobs without any issues.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Why have these experiment proofs been removed?\nIs that a coincidence, or am I acting undercover to remove any evidence of Jenkins running on <code>RISC-V</code> before I attempt to do the same?\nJust kidding, I have no idea, but if three years ago some people were able to run Jenkins on <code>RISC-V</code>, I should be able to do the same today.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>RISC-V</code> board I've been using for this experiment is not the most powerful available on the market, so my success rate with Jenkins plugins was not very high.\nI have another board that is way more powerful, so I'll try again with it soon.\nIt's the <a href=\"https://www.starfivetech.com/en/site/boards\">StarFive VisionFive 2</a> board which is based on a quad-core <code>RISC-V</code> processor (the <a href=\"https://www.starfivetech.com/en/site/soc\">StarFive JH7110</a> 64 bit SoC with RV64GC).\nIt also sports 8GB of LPDDR4, so I should be able to build a few RAM-hungry Jenkins plugins with it, and why not, even run a Jenkins controller on it.</p>\n</div>\n<div class=\"paragraph\">\n<p>I have another board on my radar; it's the Vision Five 2's twin from Pine64, the <a href=\"https://wiki.pine64.org/wiki/STAR64\">Star64</a>.\nAt the time of writing, it's not available yet, but I'll definitely get one as soon as it's available.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"when-will-risc-v-be-a-first-class-citizen-with-jenkins\"><a class=\"anchor\" href=\"#when-will-risc-v-be-a-first-class-citizen-with-jenkins\"></a>When will <code>RISC-V</code> be a first-class citizen with Jenkins?</h3>\n<div class=\"paragraph\">\n<p>Remember, Jenkins is an open-source project, but above all, it's a community project.\nWho am I to tell you when <code>RISC-V</code> will be a first-class citizen with Jenkins?\nI'm just a guy who's trying to make it work.\nI think it's up to the community to decide when <code>RISC-V</code> will be officially supported by Jenkins.\nMy guess would be when two major conditions are met:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Temurin is officially available for <code>RISC-V</code>, meaning we'll be able to download a binary package for <code>RISC-V</code> from the <a href=\"https://adoptium.net/temurin/releases/\">official AdoptOpenJDK website</a>.</p>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/temurin-supported-architectures.png\" alt=\"Temurin supported architectures\" width=\"839\"></span></p>\n</div>\n</li>\n<li>\n<p>Docker is officially available for <code>RISC-V</code>, which means we'll be able to download a binary package for <code>RISC-V</code> from the <a href=\"https://hub.docker.com/search?q=&type=image&image_filter=official\">official Docker website</a>.</p>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/03/10/2023-03-10-miniJen-and-RISC-V/docker-supported-architectures.png\" alt=\"Docker supported architectures\" width=\"839\"></span></p>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>You may wonder, why do I need Temurin and Docker to be officially available for <code>RISC-V</code> before saying Jenkins <a href=\"/sigs/platform/\">supports</a> <code>RISC-V</code>?\nAs you know, the Java motto says:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>\"Write once, run anywhere\"</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>It's often abbreviated as \"WORA\".\nThis motto reflects Java's ability to be compiled into bytecode that can run on any platform with a Java Virtual Machine (JVM), without requiring recompilation for each specific platform.\nThe Jenkins war runs on top of the JVM; it is then considered CPU-architecture agnostic, which means it can run on any CPU architecture (as long as openJDK11+ can run on the machine, but take it with a grain of salt).\nThe Jenkins infrastructure owns, or borrows, machines of the supported CPU architectures and runs the war on them, so we can testify Jenkins works on these architectures.\nJenkins also supplies <a href=\"https://hub.docker.com/r/jenkins/jenkins\">Docker images</a> for the supported CPU architectures and tests them on the supported CPU architectures.\nThe Jenkins project does not own any <code>RISC-V</code> machine, as far as I know.\nWe could provide a <code>RISC-V</code> docker image, as <code>docker buildx</code> allows us to build for various CPU architectures, but…&#8203;\nWouldn't it be kind of hasty?\nWe wouldn't be able to test on a Jenkins-owned, Jenkins-managed machine regularly.\nIt is then urgent to…&#8203; wait.</p>\n</div>\n</div>\n</div>\n</div>"
}