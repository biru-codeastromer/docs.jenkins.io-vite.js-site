{
  "id": "2023-11-2023-11-06-introducing-2-2-2-java-support-plan",
  "url": "/blog/2023/11/01/2023-11-06-introducing-2-2-2-java-support-plan/",
  "title": "Introducing the 2 + 2 + 2 Java support plan",
  "date": "2023-11-01",
  "authors": [
    "basil"
  ],
  "tags": [
    "announcement",
    "core",
    "developer",
    "jenkins"
  ],
  "summary": "Jenkins 2.426.1 LTS will support Java 11, 17, and 21. In Fall 2024, Jenkins will require Java 17 or 21 and drop support for Java 11. Thereafter, Jenkins will support each Java LTS release for approximately four years; i.e., Jenkins will support two Java LTS releases at any given time.",
  "opengraph_image": "/images/post-images/2023/11/06/introducing-2-2-2-java-support-plan.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"admonitionblock tip\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-tip\" title=\"Tip\"></i>\n</td>\n<td class=\"content\">\n<div class=\"title\">tl;dr</div>\n<div class=\"paragraph\">\n<p>Jenkins 2.426.1 LTS will support Java 11, 17, and 21.\nIn Fall 2024, Jenkins will require Java 17 or 21 and drop support for Java 11.\nThereafter, Jenkins will support each Java LTS release for approximately four years;\ni.e., Jenkins will support two Java LTS releases at any given time.</p>\n</div>\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/11/06/introducing-2-2-2-java-support-plan-figure1.svg\" alt=\"Figure 1\" title=\"Jenkins 2 + 2 + 2 Java support plan summary for Java and Jenkins LTS releases\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"background\"><a class=\"anchor\" href=\"#background\"></a>Background</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Java’s historically slow release cadence has accelerated significantly in recent years.\nAt present, Java feature releases are delivered <a href=\"https://blogs.oracle.com/java/post/moving-the-jdk-to-a-two-year-lts-cadence\">every six months</a>,\nwith a long term support (LTS) release <a href=\"https://blogs.oracle.com/javamagazine/post/java-long-term-support-lts\">every two years</a> that is supported for about six years.\nJava feature releases are conceptually analogous to Jenkins <a href=\"https://www.jenkins.io/download/weekly/\">weekly releases</a> in that they allow developers to release early and often,\nwhile Java LTS releases are conceptually analogous to Jenkins <a href=\"https://www.jenkins.io/download/lts/\">LTS releases</a> in that they benefit large scale users.\nThe similarity between Java releases and Jenkins releases ends at the conceptual level, though — in practice,\neach project has a vastly different schedule regarding\nhow often each type of release is performed and how long each type of release is supported.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"two-categories-of-users\"><a class=\"anchor\" href=\"#two-categories-of-users\"></a>Two categories of users</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The above illustrates the needs of two categories of users:\ndevelopers and early adopters, who benefit from releasing early and often;\nand large scale users, for whom predictability and stability are the primary consideration.\nThe latter will tend to prefer both Jenkins and Java LTS release lines and delay upgrading\nuntil after the early adoption phase has passed or until it is absolutely necessary to upgrade.\nThe changes to Java’s release schedule in recent years raise the question of\nhow to align Java adoption within the Jenkins project with Java’s own release cadence,\nwhich has accelerated significantly in recent years.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"rejected-proposal-support-three-java-lts-releases-at-any-given-time\"><a class=\"anchor\" href=\"#rejected-proposal-support-three-java-lts-releases-at-any-given-time\"></a>Rejected proposal: Support three Java LTS releases at any given time</h3>\n<div class=\"paragraph\">\n<p><a href=\"https://adoptium.net/support/\">Eclipse Temurin</a> and <a href=\"https://access.redhat.com/articles/1299013\">Red Hat</a> both support their Java LTS releases with security patches for about six years,\nand in practice Java vendors will continue to maintain a Java LTS release for as long as there is market demand for it.\nOne answer to the question raised above, then, would be for the Jenkins project to support each Java LTS release for six years,\nmatching the support offered by upstream Java vendors like Eclipse Temurin and Red Hat.\nThis strategy primarily benefits large scale users for whom stability is the primary consideration,\nbut for various reasons that we will explore below it fails to meet the needs of developers and early adopters.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/11/06/introducing-2-2-2-java-support-plan-figure2.svg\" alt=\"Figure 2\" title=\"Rejected proposal: Support three Java LTS releases at any given time\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"rejected-proposal-support-one-java-lts-release-at-any-given-time\"><a class=\"anchor\" href=\"#rejected-proposal-support-one-java-lts-release-at-any-given-time\"></a>Rejected proposal: Support one Java LTS release at any given time</h3>\n<div class=\"paragraph\">\n<p>At the other end of the spectrum, the Jenkins project could support each Java LTS release\nfor only as long as it takes for the next Java LTS release to be delivered; i.e., for two years rather than six.\nThis strategy would benefit developers and early adopters,\nand these benefits go beyond the mere availability of shiny new language features for developers —\nnewer Java runtimes have implemented a significant number of performance optimizations that are of interest to operators,\nand an increasing number of third-party library dependencies require the adoption of a recent Java LTS release\nin order to receive bug fixes and security patches.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, the Jenkins ecosystem consists of thousands of loosely-connected components,\nand building and testing them across all supported Java versions is a nontrivial effort,\nnotwithstanding recent advances in dependency updating.\nReducing the build and test matrix to a single version would save hundreds of thousands of dollars in cloud costs,\nto say nothing of the savings in development costs\nthat are associated with the decreased cognitive load of a simpler build and test matrix.\nHowever, this strategy fails to meet the needs of large scale users,\nwho want to adopt a Java LTS release and stick with it for as long as possible\nbefore upgrading to the next Java LTS release.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/11/06/introducing-2-2-2-java-support-plan-figure3.svg\" alt=\"Figure 3\" title=\"Rejected proposal: Support one Java LTS release at any given time\"></span></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"accepted-proposal-2-2-2-java-support-plan\"><a class=\"anchor\" href=\"#accepted-proposal-2-2-2-java-support-plan\"></a>Accepted proposal: 2 + 2 + 2 Java support plan</h3>\n<div class=\"paragraph\">\n<p>The above discussion highlights two categories of users,\neach of whose needs are legitimate but, through no fault of their own, are in conflict with each other.\nThe natural solution, then, is to compromise at the midpoint.\nTherefore, the Jenkins project is adopting a 2 + 2 + 2 Java support plan, where Jenkins\nsupports a new Java LTS release in the first two years after the general availability of that Java LTS release,\nthen requires that Java LTS release as the Jenkins minimum Java version in the next two years of that Java LTS release’s upstream support,\nthen drops support for that Java LTS release two years before that Java LTS release reaches end of life upstream.</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/11/06/introducing-2-2-2-java-support-plan-figure4.svg\" alt=\"Figure 4\" title=\"Accepted proposal: 2 + 2 + 2 Java support plan\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>In practice, this means that Jenkins will support a given Java LTS release\nfor approximately two-thirds the amount of time that upstream Java vendors do,\nthat Jenkins will support two Java LTS releases at any given time rather than three,\nand that large scale users can stay on a Java LTS release for four years at a time.\nThis plan balances the needs of large scale users for predictability and stability\nwith the needs of early adopters and developers\nto improve and simplify Jenkins with the latest Java capabilities\nand to reduce the maintenance overhead associated with a large build and test matrix.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"upcoming-dates\"><a class=\"anchor\" href=\"#upcoming-dates\"></a>Upcoming dates</h2>\n<div class=\"sectionbody\">\n<div class=\"dlist\">\n<dl>\n<dt class=\"hdlist1\">2023-11-15</dt>\n<dd>\n<p>Jenkins 2.426.1 LTS will support Java 11, 17, and 21.</p>\n</dd>\n<dt class=\"hdlist1\">2024-11-15</dt>\n<dd>\n<p>Jenkins LTS will require Java 17 or 21 and drop support for Java 11.</p>\n</dd>\n</dl>\n</div>\n<div class=\"paragraph\">\n<p>Thereafter, the 2 + 2 + 2 support plan will take effect as described above.\nCheck this blog for detailed dates at that time.</p>\n</div>\n<div class=\"paragraph\">\n<p>These requirements apply to all components of the Jenkins system,\nincluding the Jenkins controller, all types of agents, CLI clients, and other components.\nYou do <em>not</em> need to build your application with the same version of Java used to run Jenkins itself;\nsee the <a href=\"/doc/book/platform-information/support-policy-java/#running-java-based-tools-and-builds-on-jenkins:\">Running Java-based tools and builds on Jenkins</a> section of the documentation.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"conclusion\"><a class=\"anchor\" href=\"#conclusion\"></a>Conclusion</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As the age-old adage says, a good compromise is when both parties are equally dissatisfied,\nand we recognize that this plan is not ideal for either category of user.\nHowever, we feel that it optimizes globally for the sustained progress of the Jenkins community as a whole,\nensuring that the software and the community around it remain relevant for a wide variety of people and use cases.\nAs the Jenkins project nears its 19th birthday,\nwe look forward to the establishment of a sustainable software development lifecycle\nthat can serve the project’s valued users and contributors for years to come.</p>\n</div>\n</div>\n</div>"
}