{
  "id": "2023-05-2023-05-02-android-and-jenkins-releases",
  "url": "/blog/2023/05/02/2023-05-02-android-and-jenkins-releases/",
  "title": "Building Android apps with Jenkins: release management",
  "date": "2023-05-02",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "jenkins",
    "android"
  ],
  "summary": "The previous blog post of this series discusses what I think makes CI/CD for mobile app development a unique kind of animal, and my first steps in building Android apps with Jenkins.",
  "opengraph_image": "/images/post-images/2023/03/29/2023-03-22-android-and-jenkins/love.png",
  "content_html": "<div class=\"paragraph\">\n<p>The <a href=\"/blog/2023/04/07/android-and-jenkins-discovery/\">previous blog post</a> of this series discusses what I think makes CI/CD for mobile app development a unique kind of animal, and my first steps in building Android apps with Jenkins.\nWe were left with a working declarative pipeline per branch, one Docker image per branch too, and an application binary ready to be deployed.\nReady?</p>\n</div>\n<div class=\"sect1\">\n<h2 id=\"release-management\"><a class=\"anchor\" href=\"#release-management\"></a>Release management</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>I was able to find the binaries in the workspace in a matter of seconds, but there is no release available, only binaries.\nThis means there are some manual steps required to create a versioned release that we can deliver to test users, for example.</p>\n</div>\n<div class=\"paragraph\">\n<p>We can manually create a release within GitHub and then copy-paste the binaries from Jenkins' artifact archives to the GitHub release page.\nWe can also do the same for the Google Play Store.\nHowever, this approach is neither efficient nor error-proof.</p>\n</div>\n<div class=\"paragraph\">\n<p>In regards to having a release on the Github repository at the same time as on Google Play, it really depends on the app and its audience.\nFor the purposes of this article, let's assume it's okay.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"prerequisites\"><a class=\"anchor\" href=\"#prerequisites\"></a>Prerequisites</h3>\n<div class=\"paragraph\">\n<p>To automate the release process, we need to determine the criteria for a version number, how to update the version number, and what constitutes a release.\nWe can use the \"<a href=\"https://github.com/dipien/semantic-version-gradle-plugin\">Semantic Version</a>\" Gradle plugin, which has a strict set of rules to guide us.\nThis plugin allows us to <a href=\"https://github.com/dipien/semantic-version-gradle-plugin#incrementing-the-project-version\">increment</a> the patch, minor, or major version using Gradle commands.\nWe can also use <a href=\"https://github.com/dipien/semantic-version-gradle-plugin#version-classifier\">classifiers</a> such as snapshot, beta, alpha, or any other version classifier to define a version name.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">version = \"1.1.11\"\n\napply plugin: \"com.dipien.android.semantic-version\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>I then searched for a Jenkins plugin that would create a GitHub release.\nAs the saying goes,</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\nThere's a plugin for that\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>but unfortunately, I couldn't find one that meets my needs.\nWhile there is a plugin called <a href=\"https://plugins.jenkins.io/git-changelog/\">Git Changelog</a> that can merge commit messages to produce a readable version of the changes, it doesn't create the release.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"github-release\"><a class=\"anchor\" href=\"#github-release\"></a>GitHub release</h3>\n<div class=\"paragraph\">\n<p>If you want to stay on the Jenkins side, there isn't a plugin this time.\nHowever, there are various ways to create a release.\nYou can use the <a href=\"https://docs.github.com/en/rest?apiVersion=2022-11-28\">GitHub REST API</a> or the <a href=\"https://cli.github.com/\"><code>gh</code></a> command, which can handle all the heavy lifting for us.\nTherefore, let's go back to the drawing board and add the command to our Docker image.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\"># Install GitHub command line tool\nENV GITHUB_TOKEN $GITHUB_TOKEN\nRUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \\\n    chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \\\n    echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \\\n    apt update && apt install -y --no-install-recommends gh</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Once that's done, we need to use <a href=\"https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/about-authentication-with-a-github-app\">GitHub App authentication</a> to enable <code>gh</code> to use our credentials.\nTo do this, we have to install the <a href=\"https://plugins.jenkins.io/github-branch-source/\">GitHub Branch Source plugin</a> and then create a <a href=\"https://www.jenkins.io/blog/2020/04/16/github-app-authentication/\">GitHub Application</a>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <a href=\"https://github.com/jenkinsci/github-branch-source-plugin/blob/master/docs/github-app.adoc\">existing documentation</a> on GitHub is exactly what we need, so a link to this should suffice.\nThe only fields you need to prepare and fill out at this stage are:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Github App name - i.e. <code>Jenkins-<team name></code></p>\n</li>\n<li>\n<p>Homepage URL - your company's domain or a GitHub repository</p>\n</li>\n<li>\n<p>Webhook URL - your jenkins instance, for example, <code><a href=\"https://<jenkins-host>/github-webhook/\" class=\"bare\">https://<jenkins-host>/github-webhook/</a></code></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>At that moment, I <a href=\"https://github.com/gounthar/MyFirstAndroidAppBuiltByJenkins/blob/main/jenkins/create-release.sh\">queried</a> GitHub using <code>gh</code> to determine\nwhether the release already existed, and create it if not.</p>\n</div>\n<div class=\"paragraph\">\n<p>My choice of how to create the release was entirely arbitrary: I decided to create a release when the version ended with <code>\"RELEASE\"</code>, a draft release when there was no suffix, and a pre-release when the version ended with <code>\"ALPHA\"</code> or <code>\"BETA\"</code>.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">suffix=$(echo $versionName | sed 's/.*-//')\ncase $suffix in\n    ALPHA|BETA)\n        echo \"Time to do a prerelease\"\n        GH_OPTS=\"$GH_OPTS-p\"\n        ;;\n    SNAPSHOT)\n        echo \"This is a snapshot, we won't release anything\"\n        GH_OPTS=\"$GH_OPTS DO_NOT_RELEASE\"\n        ;;\n    RELEASE)\n        echo \"This a real release, so no need to use -d or -p\";;\n    *)\n        echo \"Unknown suffix \\\"$suffix\\\", so we'll do a draft release\"\n        GH_OPTS=\"$GH_OPTS-d\"\n        ;;\nesac</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is good enough for my use case.</p>\n</div>\n<div class=\"paragraph\">\n<p>The <code>gh</code> command does a nice job of preparing a release change log, so I'm relying on it.\nIf we're not building on the main branch, the release is not finalized, so I can still tidy it up later.\nIt's great to be able to create a release as soon as it's required, even when it's not necessaryâ€¦</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image center\"><img src=\"/images/post-images/2023/05/02/2023-05-02-android-and-jenkins-releases/too-many-releases.png\" alt=\"Too many releases\" width=\"839\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>It looks like I may have gone a little too far with the automatic release creation, don't you think?</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, what about using that workflow to create a release on the Play Store?</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"google-play-store-release\"><a class=\"anchor\" href=\"#google-play-store-release\"></a>Google Play Store release</h3>\n<div class=\"paragraph\">\n<p>The version is already handled by the semantic plugin, and the release notes are almost ready to go.\nNow, we just need to find the right plugin to push our app to the Google Play Store.\nLuckily, we have a plugin for that, called <a href=\"https://github.com/Triple-T/gradle-play-publisher\"><code>com.github.triplet.play</code></a>.\nThis time, it's a <a href=\"https://plugins.gradle.org/plugin/com.github.triplet.play\">Gradle plugin</a> instead of a Jenkins plugin.</p>\n</div>\n<div class=\"paragraph\">\n<p>The first step to getting your app on the Play Store is to pay the $25 developer account fee.\nAfter that, you need to register your app, import the EULA (there are <a href=\"https://termly.io/products/eula-generator/\">free websites</a> to generate that), upload the required paperwork, and then upload the signed app.\nSince the app is not signed yet, we'll need to do that first.</p>\n</div>\n<div class=\"sect3\">\n<h4 id=\"signing-the-app-from-the-command-line\"><a class=\"anchor\" href=\"#signing-the-app-from-the-command-line\"></a>Signing the app from the command line</h4>\n<div class=\"paragraph\">\n<p>There are different ways to sign your app - from the command line using <code>apksigner</code> for APKs, <code>jarsigner</code> for app bundles, or you can configure Gradle to sign it during the build.\nIn any case, you need to generate a private key using <code>keytool</code> before signing the app.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\"> keytool -genkey -v -keystore my-release-key.jks -keyalg RSA -validity 10000 -alias my-alias</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Let's quickly review how to sign an apk:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Align the unsigned APK using <a href=\"https://developer.android.com/tools/zipalign\"><code>zipalign</code></a>:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">zipalign -v -p 4 my-app-unsigned.apk my-app-unsigned-aligned.apk</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>zipalign</code> ensures that all uncompressed data starts with a particular byte alignment relative to the start of the file, which may reduce the amount of RAM consumed by an app.</p>\n</div>\n</li>\n<li>\n<p>Sign your APK with your previously generated private key using <a href=\"https://developer.android.com/tools/apksigner\"><code>apksigner</code></a>:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">apksigner sign --ks my-release-key.jks --out my-app-release.apk my-app-unsigned-aligned.apk</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This example outputs the signed APK at <code>my-app-release.apk</code> after signing it with a private key and certificate, that are stored in a single KeyStore file: <code>my-release-key.jks</code>.</p>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Now, let's discuss how to sign an application bundle (located in <code>app/build/outputs/bundle/debug</code>) thanks to Gradle.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">jarsigner -verbose -sigalg SHA256withRSA -keystore ../../../../../my-release-key.jks app-debug.aab my-alias</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"signing-the-app-from-gradle\"><a class=\"anchor\" href=\"#signing-the-app-from-gradle\"></a>Signing the app from Gradle</h4>\n<div class=\"paragraph\">\n<p>Open the module-level <code>build.gradle</code> file and add the <code>signingConfigs {}</code> block with entries for <code>storeFile</code>, <code>storePassword</code>, <code>keyAlias</code> and <code>keyPassword</code>.\nThen, pass that object to the <code>signingConfig</code> property in your build type.\nFor example:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\"> signingConfigs {\n        release {\n            // You need to specify either an absolute path or include the\n            // keystore file in the same directory as the build.gradle file.\n            storeFile file(\"my-release-key.jks\")\n            storePassword \"password\"\n            keyAlias \"my-alias\"\n            keyPassword \"password\"\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n            signingConfig signingConfigs.release\n        }\n    }</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>From now on, when you create the bundle with Gradle, it will be signed, self-signed, which is not what we're aiming for.\nWe still need to upload the icon, a summary, screenshots, banners, and other boilerplate contentâ€¦\nThe next step is to create a GCP project.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"creating-a-gcp-project\"><a class=\"anchor\" href=\"#creating-a-gcp-project\"></a>Creating a GCP project</h4>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/Vdw1LgBcy3o?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You have to <a href=\"https://developers.google.com/android-publisher/getting_started#enable\">enable the Android Publisher API</a> for that project.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/eXJBIkHNB48?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then, you have to <a href=\"https://developers.google.com/android-publisher/getting_started#existing\">link</a> your Google Play developer account to the GCP project.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/XaokL2ku4JA?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>After this, you need to <a href=\"https://cloud.google.com/iam/docs/service-accounts-create\">create a service account</a>.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/hAHvZe1XklU?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Then create a <a href=\"https://cloud.google.com/iam/docs/keys-create-delete\">key</a>.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/LdMSK1d63Sw?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To set up the necessary credentials for publishing our app to the Play Store, we'll need to create an environment variable in Jenkins.\nTo do this, we first need to install the <a href=\"https://plugins.jenkins.io/envinject/\">Environment Injector plugin</a>.\nOnce that's done, we can grant the necessary permissions to our service account so that it can publish the app on our behalf.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/LXVydeeMnSU?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>And we're finally ready to publish our app thanks to Gradle on Jenkins.</p>\n</div>\n</div>\n<div class=\"sect3\">\n<h4 id=\"publishing-the-app\"><a class=\"anchor\" href=\"#publishing-the-app\"></a>Publishing the app</h4>\n<div class=\"paragraph\">\n<p>The <code>gradlew</code> tasks group <code>publishing</code> tells us we have a <code>publishBundle</code> task that uploads App Bundle for all variants.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">./gradlew tasks --group publishing\n\n> Task :tasks\n\n------------------------------------------------------------\nTasks runnable from root project 'My First Built by Jenkins Applications'\n------------------------------------------------------------\n\nPublishing tasks\n----------------\n[...]\npublishBundle - Uploads App Bundle for all variants.\n   See https://github.com/Triple-T/gradle-play-publisher#publishing-an-app-bundle\n[...]\nBUILD SUCCESSFUL in 1s\n1 actionable task: 1 executed</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>As we did not store the generated <code>jks</code> file in the repo, we have to use a variable to hold the value.\nOn your machine, it would work with something like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">export ANDROID_PUBLISHER_CREDENTIALS=`cat *json`</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>On Jenkins, we will create a secret.</p>\n</div>\n<div class=\"videoblock center\">\n<div class=\"content\">\n<iframe width=\"839\" height=\"473\" src=\"https://www.youtube.com/embed/XkORY9nbgak?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The secret is now available under the <code>android-publisher-credentials</code> key.</p>\n</div>\n<div class=\"paragraph\">\n<p>The triplet <a href=\"https://github.com/Triple-T/gradle-play-publisher#common-configuration\">documentation</a> tells us that we can set up a configuration in the build.gradle file like:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-groovy\" data-lang=\"groovy\">play {\n    // Overrides defaults\n    track.set(\"internal\")\n    updatePriority.set(2)\n    releaseStatus.set(ReleaseStatus.DRAFT)\n    // ...\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Gradle Play Publisher supports uploading both the App Bundle and APK, and can promote those artifacts to different tracks.\nYou can customize how your artifacts are published using several options:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>track</code>: The target stage for an artifact, such as <code>internal</code>/<code>alpha</code>/<code>beta</code>/<code>production</code> or any custom track.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Defaults to internal</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>releaseStatus</code>: The type of release, such as <code>ReleaseStatus.COMPLETED</code>, <code>ReleaseStatus.DRAFT</code>, <code>ReleaseStatus.HALTED</code>, or <code>ReleaseStatus.IN_PROGRESS</code>.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Defaults to <code>ReleaseStatus.COMPLETED</code></p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>userFraction</code>: The percentage of users who will receive a staged release.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>This is only applicable where <code>releaseStatus=[IN_PROGRESS/HALTED]</code>.</p>\n</li>\n<li>\n<p>defaults to <code>0.1</code> (10%)</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><code>updatePriority</code>: Sets the update priority for a new release.\nRefer to <a href=\"https://developer.android.com/guide/playcore/in-app-updates\">Google's documentation</a> for more information.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Defaults to the API value</p>\n</li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Furthermore, according to the <a href=\"https://github.com/Triple-T/gradle-play-publisher#uploading-release-notes\">documentation</a>, you need to supply a release notes file.\nTo do so, you need to add a file under <code>src/[sourceSet]/play/release-notes/[language]/[track].txt</code>.<br>\nHere, <code>sourceSet</code> is a full variant name, <code>language</code> is one of the Play Store supported codes, and <code>track</code> is the channel you want these release notes to apply to.\nIf no channel is specified, the default channel will be used.</p>\n</div>\n<div class=\"paragraph\">\n<p>As an example, let's assume you have these two different release notes:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">src/main/play/release-notes/en-US/default.txt\n.../beta.txt</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>When you publish to the beta channel, the <code>beta.txt</code> release notes will be uploaded.\nFor any other channel, <code>default.txt</code> will be uploaded.</p>\n</div>\n<div class=\"paragraph\">\n<p>For our use case, we'll <a href=\"https://github.com/gounthar/MyFirstAndroidAppBuiltByJenkins/blob/main/jenkins/create-gps-release.sh\">use</a> the <code>internal</code> track, and start from the release notes generated via the <code>gh</code> tool to produce a shorter version, limited to 500 characters as specified by Google.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">gh release view v${versionName} | grep -A 500 \"\\-\\-\" | grep -v \"\\-\\-\" | sed 's/http.*[/]/#/' > $releaseNotesDir/internal.txt\n    content=$(cat < \"$releaseNotesDir/internal.txt\" && echo .) && content=${content%.} && printf %s \"${content:0:500}\" > \"$releaseNotesDir/internal.txt\"</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Have we completed all the necessary steps?</p>\n</div>\n<div class=\"paragraph\">\n<p>We now have an Android application that builds, has undergone static analysis, and is automatically pushed to both GitHub and the Google Play Store.\nHowever, there is still much left to cover, which we will explore in upcoming episodes.</p>\n</div>\n</div>\n</div>\n</div>\n</div>"
}