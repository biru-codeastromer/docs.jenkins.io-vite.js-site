{
  "id": "2023-05-2023-05-12-removing-prototype-from-jenkins",
  "url": "/blog/2023/05/12/2023-05-12-removing-prototype-from-jenkins/",
  "title": "Removing Prototype from Jenkins",
  "date": "2023-05-12",
  "authors": [
    "basil"
  ],
  "tags": [
    "announcement",
    "developer",
    "jenkins"
  ],
  "summary": "== Summary Usage of the http://prototypejs.org/[Prototype] JavaScript framework has been deprecated in recent versions of Jenkins core and will be removed completely in the future. Plugin developers should prepare for this transition by removing usages of Prototype and testing with Prototype removed. == Motivation Prototype was created by Sam Stephenson in February 2005 as part of https://en.wikipedia.org/wiki/Ajax_(programming)[Ajax] support in https://rubyonrails.org/[Rubyâ€¦",
  "opengraph_image": "/images/post-images/2023/05/12/2023-05-12-removing-prototype-from-jenkins.png",
  "content_html": "<div class=\"sect1\">\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\"></a>Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Usage of the <a href=\"http://prototypejs.org/\">Prototype</a> JavaScript framework has been deprecated in recent versions of Jenkins core and will be removed completely in the future.\nPlugin developers should prepare for this transition by removing usages of Prototype and testing with Prototype removed.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"motivation\"><a class=\"anchor\" href=\"#motivation\"></a>Motivation</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Prototype was created by Sam Stephenson in February 2005 as part of <a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\">Ajax</a> support in <a href=\"https://rubyonrails.org/\">Ruby on Rails</a>.\nWhile it was considered a major advance at the time, it has now fallen out of favor due to its invasive modifications to standard JavaScript functionality.\nAt this point in time, all Prototype features have native equivalents in the <a href=\"https://developer.mozilla.org/\">Web Platform</a>.\nMoreover, the very presence of Prototype's invasive modifications actively causes compatibility problems with modern JavaScript libraries.</p>\n</div>\n<div class=\"paragraph\">\n<p>Worse, core currently uses a patched version of Prototype <a href=\"https://github.com/prototypejs/prototype/releases/tag/1.7\">1.7</a>, released on November 15, 2010.\nThe latest version is <a href=\"https://github.com/prototypejs/prototype/releases/tag/1.7.3\">1.7.3</a>, released on September 22, 2015.\nWhen an attempt was made to upgrade to 1.7.3 in 2018 in <a href=\"https://issues.jenkins.io/browse/JENKINS-49319\">JENKINS-49319</a>, the change had to be reverted.</p>\n</div>\n<div class=\"paragraph\">\n<p>Clearly the status quo is unsustainable.\nFor these reasons, we have been working to remove Prototype from the Jenkins ecosystem in <a href=\"https://issues.jenkins.io/browse/JENKINS-70906\">JENKINS-70906</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"testing-core-and-plugins\"><a class=\"anchor\" href=\"#testing-core-and-plugins\"></a>Testing core and plugins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>As of Jenkins 2.404, a user experimental flag has been added to remove Prototype.\nThe flag can be enabled or disabled on a per-user basis and removes Prototype from all Jenkins UI pages.\nThe flag is intended to be used by core and plugin developers to do testing with Prototype removed.\nTo enable the flag, go to the <strong>Configure</strong> page for your user in 2.404 or later, scroll to the <strong>Experiments</strong> section at the bottom, and enable the flag.</p>\n</div>\n<div class=\"paragraph\">\n<p>As of Jenkins 2.404, most usages of Prototype have been removed from core, and even more will be removed by 2.405.\nWe anticipate that all core usages of Prototype will be removed in a forthcoming weekly release.\nAt that point, the focus will shift to removing Prototype usages from plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>To test with Prototype removed, enable the user experimental flag and watch the browser console log for error messages as you exercise various pieces of JavaScript code.\nIf an error occurs with Prototype removed but does not occur with Prototype present, you have found code that needs to be adapted.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"adapting-plugins\"><a class=\"anchor\" href=\"#adapting-plugins\"></a>Adapting plugins</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When adapting plugins, first ensure that the plugin is using plugin parent POM <a href=\"https://github.com/jenkinsci/plugin-pom/releases/tag/plugin-4.58\">4.58</a> or greater.\nThis contains an update to support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> in the <a href=\"https://htmlunit.org/\">HtmlUnit</a> browser used by the test harness.\nWithout this, you will likely see errors concerning the Fetch API in HtmlUnit tests.</p>\n</div>\n<div class=\"paragraph\">\n<p>The next thing to do is search for common Prototype usages and convert them to native JavaScript APIs.\nThe following command attempts to search for some common usages in views:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-shell\" data-lang=\"shell\">find . -type f \\( -name \"*.groovy\" -o -name \"*.jelly\" -o -name \"*.js\" \\) -exec grep -HnE '\\.each\\(|Object\\.toJSON|Prototype\\.Selector|\\$\\$\\(|\\$\\(|\\$A|\\$F|\\.on\\(|\\.observe\\(|\\.fire\\(|Form\\.getInputs|Element\\.stopObserving|\\.getElementsBySelector\\(|\\.insert\\(|\\.removeClassName\\(|\\.addClassName\\(|\\.hasClassName\\(|\\.nextSiblings\\(|\\.firstDescendant\\(|\\.previous\\(|\\.up\\(|\\.down\\(|\\.next\\(|\\.childElements\\(|\\.escapeHTML\\(|\\.show\\(\\)|\\.hide\\(\\)|\\.getStyle\\(|\\.setStyle\\(|\\.setOpacity\\(|\\.getResponseHeader\\(|Ajax\\.Request|Ajax\\.Updater|Ajax\\.PeriodicalUpdater' {} \\;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This is neither an exhaustive list, nor is it guaranteed to be free from false positives.\nBut it is a good place to start.\nBelow I will give some examples of common usages and their recommended replacements.\nWhen in doubt, consult the <a href=\"http://api.prototypejs.org/\">Prototype API documentation</a> for information about the old usage,\nand consult the <a href=\"https://developer.mozilla.org/\">Web Platform</a> documentation for information about recommended replacements.\nKeep in mind that script could find false positives as <code>$</code> is used in both prototype.js and jQuery.</p>\n</div>\n<div class=\"paragraph\">\n<p>Once you have removed the usage of Prototype, test your plugin both with and without the user experimental flag enabled.\nIf the line you have changed works with and without Prototype (as verified by stepping into the line with the browser's JavaScript debugger), then you are ready to merge and release the change.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"cheat-sheet\"><a class=\"anchor\" href=\"#cheat-sheet\"></a>Cheat sheet</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The following are my rough and unpolished notes from doing this conversion a few dozen times.\nThis is a good place to start, but it is not an exhaustive list of changes that need to be made.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"general-changes\"><a class=\"anchor\" href=\"#general-changes\"></a>General changes</h3>\n<div class=\"paragraph\">\n<p>Replace any usages of <code>.each</code> with <code>.forEach</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the argument to the Prototype $ function is a string, then replace it with <code>document.getElementById</code>.\nFor example, replace $(\"my-id\") with <code>document.getElementById(\"my-id\")</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If the argument to the Prototype $ function is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\"><code>Element</code></a>, then simply remove the call to the Prototype $ function.\nFor example, replace $(element) with <code>element</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Prototype double dollar-sign function should be replaced with either <code>document.querySelector</code> or <code>document.querySelectorAll</code>, depending on whether the first result or all results are required.\nAlso be on the lookout for usages of <code>Prototype.Selector.find</code> and <code>Prototype.Selector.select</code>, which can also be replaced by query selectors.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Prototype $A function should be replaced with <code>Array.from</code>.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"class-names\"><a class=\"anchor\" href=\"#class-names\"></a>Class names</h3>\n<div class=\"paragraph\">\n<p>The next most common set of issues is regarding class names.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Replace e.g. <code>element.hasClassName(\"my-class\")</code> with <code>element.classList.contains(\"my-class\")</code>.</p>\n</li>\n<li>\n<p>Similarly, replace e.g. <code>element.removeClassName(\"my-class\")</code> with <code>element.classList.remove(\"my-class\")</code>.</p>\n</li>\n<li>\n<p>Similarly, replace e.g. <code>element.addClassName(\"my-class\")</code> with <code>element.classList.add(\"my-class\")</code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>One caveat here is that the Prototype versions of these functions can accept a space-separated string of multiple class names;\nthe native JavaScript versions do not accept this and instead require you to iterate over each class name.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"element-manipulation\"><a class=\"anchor\" href=\"#element-manipulation\"></a>Element manipulation</h3>\n<div class=\"paragraph\">\n<p>The next most common set of issues is regarding element manipulation.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Replace e.g. <code>element.childElements()</code> with <code>element.children</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.down()</code> with <code>element.firstElementChild</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.firstDescendant()</code> with <code>element.firstElementChild</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.next()</code> with <code>element.nextElementSibling</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.previous()</code> with <code>element.previousElementSibling</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.setOpacity(0)</code> with <code>element.style.opacity = 0</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.setStyle({foo: bar})</code> with <code>element.style.foo = bar</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.show()</code> with <code>element.style.display = \"\"</code> and e.g. <code>element.hide()</code> with <code>element.style.display = \"none\"</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.up(\"div\")</code> with <code>element.closest(\"div\")</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.up()</code> with <code>element.parentNode</code>.</p>\n</li>\n<li>\n<p>Replace Prototype-based element creation with <code>document.createElement</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Element.getElementsBySelector</code> with <code>document.querySelector</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Element.insert</code> with <code>element.appendChild</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Element.getStyle</code> with <code>element.style</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"event-handling\"><a class=\"anchor\" href=\"#event-handling\"></a>Event handling</h3>\n<div class=\"paragraph\">\n<p>Another common set of issues is regarding event handling.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Replace e.g. <code>Element.observe(element, \"event\", callback)</code> with <code>element.addEventListener(\"event\", callback)</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.observe(\"event\", callback)</code> with <code>element.addEventListener(\"event\", callback)</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Element.on(element, \"event\", callback)</code> with <code>element.addEventListener(\"event\", callback)</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>element.on(\"event\", callback)</code> with  <code>element.addEventListener(\"event\", callback)</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Element.stopObserving</code> with <code>document.removeEventListener</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Event.fire(element, \"event\")</code> with <code>element.dispatchEvent(new Event(\"event\"))</code>.</p>\n</li>\n<li>\n<p>Replace e.g. <code>Event.on(element, \"event\", callback)</code> with <code>element.addEventListener(\"event\", callback)</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"json-strings\"><a class=\"anchor\" href=\"#json-strings\"></a>JSON strings</h3>\n<div class=\"paragraph\">\n<p>Calls to <code>Object.toJSON</code> are problematic.\nThey need to be converted to <code>JSON.stringify</code> when Prototype is not present, but <code>JSON.stringify</code> is actually broken when Prototype is present.\nThe recommendation is to use a conditional during the transition phase:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">// TODO simplify when Prototype.js is removed\nif (Object.toJSON) {\n  // Prototype.js\n  return Object.toJSON(obj);\n} else {\n  // Standard\n  return JSON.stringify(obj);\n}</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"ajax-requests\"><a class=\"anchor\" href=\"#ajax-requests\"></a>Ajax requests</h3>\n<div class=\"paragraph\">\n<p>Finally, the most difficult set of changes relates to Ajax requests.</p>\n</div>\n<div class=\"paragraph\">\n<p>Anything that uses <code>Ajax.Request</code>, <code>Ajax.Updater</code>, or <code>Ajax.PeriodicalUpdater</code> should be converted to using the Fetch API.\nThe best way to learn how to do this is to study the examples from recent core pull requests.</p>\n</div>\n<div class=\"paragraph\">\n<p>Note that <code>Ajax.Request</code> defaults to POST requests, but the Fetch API defaults to GET requests.\nIf the original code did not specify a method, ensure you are still doing a POST request.</p>\n</div>\n<div class=\"paragraph\">\n<p>Also note that the Jenkins version of Prototype automatically adds a crumb to POST requests; this must be done explicitly when using the Fetch API by adding a <code>Crumb</code> header.\nCore features a <code>crumb.wrap()</code> method that takes an existing object (which may be empty) and adds the <code>Crumb</code> header to it.</p>\n</div>\n<div class=\"paragraph\">\n<p><code>application/x-www-form-urlencoded</code> parameters should be passed to the Fetch API in the body, but beware that HtmlUnit is not compatible with these.\nSearch core for <code>objectToUrlFormEncoded</code> for a workaround.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Fetch API will return a response object.\nIf the original Prototype code used <code>onSuccess</code>, you will need to check <code>response.ok</code> before doing the action;\nif the original Prototype code used <code>onCompletion</code>, you can skip this check.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you are checking the response for a header with <code>.getResponseHeader</code> in Prototype, this will need to be replaced with <code>.headers.get</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If you have read this far, congratulations and good luck!</p>\n</div>\n</div>\n</div>\n</div>"
}