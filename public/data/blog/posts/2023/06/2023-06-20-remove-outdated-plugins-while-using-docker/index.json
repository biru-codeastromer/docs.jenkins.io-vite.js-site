{
  "id": "2023-06-2023-06-20-remove-outdated-plugins-while-using-docker",
  "url": "/blog/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/",
  "title": "How to remove deprecated plugins from Jenkins while using Docker",
  "date": "2023-06-20",
  "authors": [
    "gounthar",
    "kmartens27"
  ],
  "tags": [
    "jenkins",
    "docker",
    "plugins",
    "jcasc"
  ],
  "summary": "The Jenkins plugin ecosystem is highly active, and it's not uncommon to come across deprecated plugins.",
  "opengraph_image": "/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/opengraph.png",
  "content_html": "<div class=\"paragraph\">\n<p>The Jenkins plugin ecosystem is highly active, and it's not uncommon to come across deprecated plugins.\nThis can be both positive and negative.\nOn the positive side, it signifies that the plugin is no longer necessary since its functionality has been integrated into Jenkins core or rendered obsolete by new features or technologies.\nOn the downside, deprecation could indicate that the plugin is no longer maintained and considered unsafe.</p>\n</div>\n<div class=\"paragraph\">\n<p>However, removing deprecated plugins from Jenkins when using Docker can be a bit troublesome.\nThis is due to the way the Jenkins Docker container functions.\nWhether you're using the default container or a custom one, it runs on an image that comes with a predefined set of plugins.\nEven if you remove these plugins from the Jenkins UI, they are not completely removed from the container.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now, you might be wondering how this works.\nAllow me to explain.</p>\n</div>\n<div class=\"paragraph\">\n<p>Let's consider a scenario where we are utilizing a <code>docker-compose.yaml</code> file to define our Jenkins instance.\nAlthough there may be numerous services, our focus will be on the Jenkins controller at present.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-yaml\" data-lang=\"yaml\">#  docker compose up -d --build --force-recreate\nservices:\n    jenkins:\n        build: ./controller\n        restart: always\n        ports:\n            - \"8080:8080\"\n            - \"50000:50000\"\n        volumes:\n            - jenkins-data:/var/jenkins_home:rw\n            - ./casc.d:/var/jenkins_home/casc.d/:ro\n            - ./secrets/id_jenkins.pem:/run/secrets/SSH_AGENT_KEY:ro\n        environment:\n            - JENKINS_EXT_URL=http://localhost:8080\n            - CASC_JENKINS_CONFIG=/var/jenkins_home/casc.d/\n            - org.jenkinsci.plugins.durabletask.BourneShellScript.LAUNCH_DIAGNOSTICS=true\n            - PUBLIC_IP\n[...]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>Dockerfile</code> for the Jenkins controller is as follows:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\">FROM jenkins/jenkins:2.401.1-lts-jdk17\n\n# [...]\n## Install custom plugins\nCOPY --chown=jenkins:jenkins ./plugins.txt /usr/share/jenkins/plugins.txt\nRUN jenkins-plugin-cli --plugin-file=/usr/share/jenkins/plugins.txt\n# [...]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>To define the plugins we wish to install, we are utilizing a <code>plugins.txt</code> file.\nIt is worth noting that some of these plugins may become deprecated in the future.\nFor this example, we are utilizing the plugin:bootstrap4-api[Bootstrap 4 API plugin], which has a dependency on the plugin:popper-api[Popper API plugin].\nAt the time of writing, both plugins have been deprecated.</p>\n</div>\n<div class=\"paragraph\">\n<p>At the beginning of the removal process, these two plugins are defined in the <code>plugins.txt</code> file.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code>[...]\n# See https://github.com/jenkinsci/docker#usage-1\n[...]\nbootstrap4-api\n[...]\npopper-api\n[...]</code></pre>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"tldr\"><a class=\"anchor\" href=\"#tldr\"></a>TL;DR</h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Remove any references to the deprecated plugins in the <code>plugins.txt</code> file if you are using one.</p>\n</li>\n<li>\n<p>Rebuild the image.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker compose build jenkins</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Recreate your container if the rebuild was successful.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker compose up -d --build --force-recreate jenkins</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Optional: enter in the running container to check if the plugins references are gone.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker compose exec jenkins bash\ncd /usr/share/jenkins/\ncat plugins.txt |grep bootstrap</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Remove the plugins in the UI, as described in the next section.</p>\n</li>\n<li>\n<p>Restart by hitting the <code>/safeRestart</code> endpoint.</p>\n</li>\n<li>\n<p>Optional: remove the plugins' remnants from the docker volume.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">cd ~/plugins\nls -artl *\n[...]\n-rw-r--r--   1 jenkins jenkins        8 Jun  6 13:05 bootstrap4-api.jpi.version_from_image\n-rw-r--r--   1 jenkins jenkins        0 Jun  6 13:05 bootstrap4-api.jpi.pinned\n-rw-r--r--   1 jenkins jenkins        9 Jun  6 13:05 popper-api.jpi.version_from_image\n-rw-r--r--   1 jenkins jenkins        0 Jun  6 13:05 popper-api.jpi.pinned\ndrwxr-xr-x   6 jenkins jenkins     4096 Jun  6 13:05 bootstrap4-api\ndrwxr-xr-x   5 jenkins jenkins     4096 Jun  6 13:05 popper-api\n[...]\nrm -fr bootstrap4-api* popper-api*</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>Well done!\nYou have successfully eliminated any deprecated plugins (at least for now).\nKeep up the good work!</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"the-intuitive-but-plenty-wrong-approach\"><a class=\"anchor\" href=\"#the-intuitive-but-plenty-wrong-approach\"></a>The intuitive (but plenty wrong) approach</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"you-cant-ignore-the-warning\"><a class=\"anchor\" href=\"#you-cant-ignore-the-warning\"></a>You can't ignore the warning</h3>\n<div class=\"paragraph\">\n<p>If your Jenkins instance has deprecated plugins, you'll notice a notification bell in the top right corner.\nSelecting it will display a warning message similar to this:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/the-following-plugins-are-deprecated.png\" alt=\"the following plugins are deprecated\" width=\"deprecated plugins warning\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It suggests you select <strong>Manage Jenkins</strong> to remove the deprecated plugins.\nOnce in <strong>Manage Jenkins</strong>, you can't ignore the warning:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/the-following-plugins-are-deprecated-once-more.png\" alt=\"the following plugins are deprecated once more\" width=\"deprecated plugins warning once again\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>It's a clear indication that we need to take action to address this situation.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"removing-deprecated-plugins-in-the-ui\"><a class=\"anchor\" href=\"#removing-deprecated-plugins-in-the-ui\"></a>Removing deprecated plugins in the UI</h3>\n<div class=\"paragraph\">\n<p>Follow these steps to remove the deprecated plugin:</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Select <strong>Plugins</strong>, then select <strong>Installed plugins</strong>.</p>\n</li>\n<li>\n<p>In the search box, enter the name of the deprecated plugin (in this case, it's <code>popper</code>).</p>\n</li>\n</ol>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/popper-can-t-be-uninstalled.png\" alt=\"popper can t be uninstalled\" width=\"search for the deprecated plugin\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Unfortunately, we encounter an issue as we are unable to uninstall it.\nThe checkmark is greyed out, and the <strong>Uninstall</strong> button (red cross) is disabled.\nWhy is that?\nSome plugins have dependencies on other plugins, which in turn have dependencies on additional plugins, creating a chain of dependencies.\nWhen you hover your mouse pointer over the uninstall icon (red cross), you'll see a tooltip that indicates the parent plugin blocking the uninstallation:</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/who-is-my-daddy.png\" alt=\"what is the parent plugin blocking the uninstallation?\"></span></p>\n</div>\n<div class=\"paragraph\">\n<p>In this case, <code>popper</code> is a dependency for another plugin called <code>bootstrap4-api</code>.\nTherefore, we need to remove <code>bootstrap4-api</code> first and then proceed with <code>popper</code>.</p>\n</div>\n<div class=\"paragraph\">\n<p>Back to the <del>drawing board</del> search box, this time with <code>bootstrap4-api</code>.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/bootstrap4-can-be-uninstalled.png\" alt=\"bootstrap4 can be uninstalled\" width=\"search for the parent plugin\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This time, we can uninstall it by selecting the uninstall icon (red cross).\nWe will then encounter a warning message saying:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>You are about to uninstall the Bootstrap 4 API Plugin plugin.\nThis will remove the plugin binary from your $JENKINS_HOME, but it will leave the configuration files of the plugin untouched.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/remove-the-plugin-binary.png\" alt=\"remove the plugin binary\" width=\"remove the plugin binary\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Really?\nWe'll check that later.\nSelect <strong>Yes</strong> to proceed with the uninstallation, and we're back to the <strong>Installed plugins</strong> page.\nLet's give another chance to popper by searching for it again:</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/popper-can-be-uninstalled.png\" alt=\"popper can be uninstalled\" width=\"popper can be uninstalled now\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Same player, shoot again.\nFollow the same steps as before to uninstall <code>popper</code>.\nAfter successfully uninstalling popper, you may notice that the notification icon still displays a message.\nFurthermore, if we go back to the <strong>Installed plugins</strong> page, we'll see that <code>popper</code> is still there.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/pending-uninstallation.png\" alt=\"pending uninstallation\" width=\"pending uninstallation\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Why is this the case?\nWe asked for an uninstallation, but it didn't fully happen.\nJenkins has to restart in order to complete the process.\nYou can hit the <code>/safeRestart</code> endpoint to restart Jenkins safely and then select <strong>Yes</strong>.\nWhen you return, you will notice that the notification icon has disappeared, and the plugin is no longer listed on the <strong>Installed plugins</strong> page.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"removing-deprecated-plugins-in-the-docker-context\"><a class=\"anchor\" href=\"#removing-deprecated-plugins-in-the-docker-context\"></a>Removing deprecated plugins in the Docker context</h3>\n<div class=\"paragraph\">\n<p>However, depending on your Jenkins configuration, you may find that the deprecated plugins have somehow reappeared in your Jenkins instance, sometimes even with an older version.\nHow is this possible?\nIf your Jenkins container instance inherits from the Jenkins official container, it comes with a predefined set of plugins.\nMost of the time, these plugins won't be enough for your specific use case.\nYou will need to install additional plugins.\nWhen you do so, the new plugins are installed in the <code>$JENKINS_HOME/plugins</code> directory with a command such as:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\">COPY --chown=jenkins:jenkins ./plugins.txt /usr/share/jenkins/plugins.txt\nRUN jenkins-plugin-cli --plugin-file=/usr/share/jenkins/plugins.txt</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>So…&#8203;\nWhenever you remove a deprecated plugin from the Jenkins UI, remember to remove it from the Docker context as well.\nOtherwise, it will be reinstalled when you rebuild the container.\nIn my case, I had to remove the following plugins from the <code>plugins.txt</code> file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\"># See https://github.com/jenkinsci/docker#usage-1\nant:487.vd79d090d4ea_e\n[...]\nbootstrap4-api:4.6.0-3\n[...]\npopper-js:2.9.2-1\n[...]\nws-cleanup:0.45</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Now you're safe for the next time you rebuild your Jenkins container.\nBut what about your running container?\nIs it free of any reference to the deprecated plugins?\nLet's find out.</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"removing-deprecated-plugins-from-the-running-container\"><a class=\"anchor\" href=\"#removing-deprecated-plugins-from-the-running-container\"></a>Removing deprecated plugins from the running container</h3>\n<div class=\"paragraph\">\n<p>Here is an excerpt of my <code>docker-compose.yml</code> file:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-dockerfile\" data-lang=\"dockerfile\">#  docker compose up -d --build --force-recreate\nservices:\n    jenkins:\n        build: ./controller\n        restart: always\n        ports:\n            - \"8080:8080\"\n            - \"50000:50000\"\n        volumes:\n            - jenkins-data:/var/jenkins_home:rw\n            - ./casc.d:/var/jenkins_home/casc.d/:ro\n        environment:\n            - CASC_JENKINS_CONFIG=/var/jenkins_home/casc.d/\n[...]\nvolumes:\n    jenkins-data:</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The <code>jenkins-data</code> volume is mounted on the <code>/var/jenkins_home</code> directory of the container.\nHowever, the <code>/usr/share/jenkins/plugins.txt</code> file, as we saw earlier in the <code>Dockerfile</code>, is not mounted on a shared volume.</p>\n</div>\n<div class=\"paragraph\">\n<p>I happen to have installed <code>bash</code> in my container, so I can run the following command to get a shell in the container (<code>jenkins</code> is the name of the service in the <code>docker-compose.yml</code> file):</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">docker compose exec -it jenkins bash</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>You can do the same with <code>sh</code> if <code>bash</code> was not installed in your Docker image.\nNow, let's search for the plugins definition file.\nAs we've seen in the Dockerfile, it's located in <code>/usr/share/jenkins/plugins.txt</code>:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">cd /usr/share/jenkins\ncat plugins.txt |grep bootstrap4-api\nbootstrap4-api:4.6.0-3</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>The reference to the deprecated plugin is still there.\nIs that a problem?\nNo.\nAs the <a href=\"https://github.com/jenkinsci/docker#usage-1\">documentation</a> says:</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>When jenkins container starts, it will check JENKINS_HOME has this reference content, and copy them there if required. It will not override such files, so if you upgraded some plugins from UI they won't be reverted on the next start.</p>\n</div>\n</blockquote>\n</div>\n<div class=\"paragraph\">\n<p>So it's there, but it won't do any harm, it won't be used…&#8203; unless we restart Jenkins.\nLet's leave it there, until the next time we rebuild the container, as we have already cleaned up the <code>plugins.txt</code> file used by the Docker context earlier.</p>\n</div>\n<div class=\"paragraph\">\n<p>Now what?\nLet's have a look at the <code>$JENKINS_HOME</code> directory.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">cd $JENKINS_HOME\nfind . -name plugins.txt</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Nothing.\nWe don't have a <code>plugins.txt</code> file in the <code>$JENKINS_HOME</code> directory.\nFine.\nWhat else?\nCan we find any remaining trace of the deprecated plugins?\nI'm afraid we can.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">find . -name bootstrap4*\n./plugins/bootstrap4-api\n./plugins/bootstrap4-api/META-INF/maven/io.jenkins.plugins/bootstrap4-api\n./plugins/bootstrap4-api/WEB-INF/lib/bootstrap4-api.jar\n./plugins/bootstrap4-api.bak\n./plugins/bootstrap4-api.jpi\n./plugins/bootstrap4-api.jpi.version_from_image\n./plugins/bootstrap4-api.jpi.pinned</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>There are still some traces of the <code>bootstrap4-api</code> deprecated plugin in the <code>$JENKINS_HOME/plugins</code> directory.\nWhat about the <code>popper-js</code> plugin?\nIt's there too.\nIt may explain why despite having removed the deprecated plugins from the Jenkins UI, they were still there when we restarted the container.\nLet's remove them for real this time:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">rm -rf ./plugins/bootstrap4-api*\nrm -rf ./plugins/popper*</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>We can now safely exit the container and restart it from the UI by accessing the <code>/safeRestart</code> endpoint.\nOnce we return, we should verify that the deprecated plugins are no longer present.</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/post-images/2023/06/20/2023-06-20-remove-outdated-plugins-while-using-docker/the-following-plugins-are-deprecated.png\" alt=\"the following plugins are deprecated\" width=\"deprecated plugins warning\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Oh no!\nIt seems like the deprecated plugins have reappeared in the running container.\nHow did that happen?\nIt's because we only restarted the container without rebuilding it.\nThe configuration still references the deprecated plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Simply restarting the container repeatedly won't resolve the issue.\nWe need to rebuild the image after removing the deprecated plugins from the Docker context.\nThen, we can recreate the container and remove the deprecated plugins from the running container using the UI.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a Jenkins admin, it's important to go with the flow and avoid swimming upstream like a salmon.\nBy following the proper steps, we can address this issue effectively.</p>\n</div>\n<div class=\"paragraph\">\n<p>Want to try it by yourself?\nJust follow the steps of the <strong>TL;DR</strong> section.</p>\n</div>\n</div>\n</div>\n</div>"
}