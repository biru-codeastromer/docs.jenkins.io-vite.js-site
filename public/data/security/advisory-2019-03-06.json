{
  "title": "Jenkins Security Advisory 2019-03-06",
  "date": "2019-03-06",
  "url": "/security/advisory/2019-03-06/",
  "kind": "plugins",
  "core": null,
  "issues": [
    {
      "id": "SECURITY-1336 (1)",
      "reporter": "Georgy Noseevich (@webpentest), SolidLab\n",
      "title": "Sandbox bypass in Script Security Plugin",
      "cve": "CVE-2019-1003029",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Script Security sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nScript Security Plugin is now newly applying sandbox protection during these phases.\n\nThis affected both script execution (typically invoked from other plugins) as well as an HTTP endpoint providing script validation and allowed users with Overall/Read permission to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nThe API `GroovySandbox#run(Script, Whitelist)` has been deprecated and now emits a warning to the system log about potential security problems.\n`GroovySandbox#run(GroovyShell, String, Whitelist)` replaces it.\n`GroovySandbox#checkScriptForCompilationErrors(String, GroovyClassLoader)` has been added as a safer method to implement script validation.\n",
      "plugins": [
        {
          "name": "script-security",
          "title": "Script Security",
          "previous": "1.53",
          "fixed": "1.54"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Script Security sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>Script Security Plugin is now newly applying sandbox protection during these phases.</p>\n</div>\n<div class=\"paragraph\">\n<p>This affected both script execution (typically invoked from other plugins) as well as an HTTP endpoint providing script validation and allowed users with Overall/Read permission to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>The API <code>GroovySandbox#run(Script, Whitelist)</code> has been deprecated and now emits a warning to the system log about potential security problems.\n<code>GroovySandbox#run(GroovyShell, String, Whitelist)</code> replaces it.\n<code>GroovySandbox#checkScriptForCompilationErrors(String, GroovyClassLoader)</code> has been added as a safer method to implement script validation.</p>\n</div>"
    },
    {
      "id": "SECURITY-1336 (2)",
      "reporter": "Georgy Noseevich (@webpentest), SolidLab\n",
      "title": "Sandbox bypass in Pipeline: Groovy Plugin\n",
      "cve": "CVE-2019-1003030",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Pipeline: Groovy sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nThis allowed users able to control the contents of a pipeline to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nPipeline: Groovy Plugin now uses Script Security APIs that apply sandbox protection during these phases.\n",
      "plugins": [
        {
          "name": "workflow-cps",
          "title": "Pipeline: Groovy",
          "previous": "2.63",
          "fixed": "2.64"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Pipeline: Groovy sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allowed users able to control the contents of a pipeline to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline: Groovy Plugin now uses Script Security APIs that apply sandbox protection during these phases.</p>\n</div>"
    },
    {
      "id": "SECURITY-1339",
      "reporter": null,
      "title": "Script security sandbox bypass in Matrix Project Plugin",
      "cve": "CVE-2019-1003031",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Matrix Project Plugin supports a sandboxed Groovy expression to filter matrix combinations.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nThis allowed users able to configure a Matrix project to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nMatrix Project Plugin now uses Script Security APIs that apply sandbox protection during these phases.\n",
      "plugins": [
        {
          "name": "matrix-project",
          "title": "Matrix Project",
          "previous": "1.13",
          "fixed": "1.14"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Matrix Project Plugin supports a sandboxed Groovy expression to filter matrix combinations.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allowed users able to configure a Matrix project to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Matrix Project Plugin now uses Script Security APIs that apply sandbox protection during these phases.</p>\n</div>"
    },
    {
      "id": "SECURITY-1340",
      "reporter": null,
      "title": "Script security sandbox bypass in Email Extension Plugin",
      "cve": "CVE-2019-1003032",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Email Extension Plugin supports sandboxed Groovy expressions for multiple features.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nThis allowed users able to control the plugin's job-specific configuration to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nEmail Extension Plugin now uses Script Security APIs that apply sandbox protection during these phases.\n",
      "plugins": [
        {
          "name": "email-ext",
          "title": "Email Extension",
          "previous": "2.64",
          "fixed": "2.65"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Email Extension Plugin supports sandboxed Groovy expressions for multiple features.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allowed users able to control the plugin&#8217;s job-specific configuration to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Email Extension Plugin now uses Script Security APIs that apply sandbox protection during these phases.</p>\n</div>"
    },
    {
      "id": "SECURITY-1338",
      "reporter": null,
      "title": "Script security sandbox bypass in Groovy Plugin",
      "cve": "CVE-2019-1003033",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Groovy Plugin supports sandboxed Groovy expressions for its \"System Groovy\" functionality.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nThis affected both System Groovy script execution as well as an HTTP endpoint providing script validation, and allowed users with Overall/Read permission to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nGroovy Plugin now uses Script Security APIs that apply sandbox protection during these phases.\n",
      "plugins": [
        {
          "name": "groovy",
          "title": "Groovy",
          "previous": "2.1",
          "fixed": "2.2"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Groovy Plugin supports sandboxed Groovy expressions for its \"System Groovy\" functionality.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>This affected both System Groovy script execution as well as an HTTP endpoint providing script validation, and allowed users with Overall/Read permission to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Groovy Plugin now uses Script Security APIs that apply sandbox protection during these phases.</p>\n</div>"
    },
    {
      "id": "SECURITY-1342",
      "reporter": null,
      "title": "Script security sandbox bypass in Job DSL Plugin",
      "cve": "CVE-2019-1003034",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Job DSL Plugin supports sandboxed Groovy expressions for Job DSL definitions.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.\n\nThis allowed users able to control the Job DSL scripts to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nJob DSL Plugin now uses Script Security APIs that apply sandbox protection during these phases.\n",
      "plugins": [
        {
          "name": "job-dsl",
          "title": "Job DSL",
          "previous": "1.71",
          "fixed": "1.72"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Job DSL Plugin supports sandboxed Groovy expressions for Job DSL definitions.\nIts sandbox protection could be circumvented during parsing, compilation, and script instantiation by providing a crafted Groovy script.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allowed users able to control the Job DSL scripts to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Job DSL Plugin now uses Script Security APIs that apply sandbox protection during these phases.</p>\n</div>"
    },
    {
      "id": "SECURITY-1330",
      "reporter": "Oleg Nenashev, CloudBees, Inc.",
      "title": "Information disclosure in Azure VM Agents Plugin",
      "cve": "CVE-2019-1003035",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method in Azure VM Agents Plugin allowed users with Overall/Read access to verify a submitted configuration, obtaining limited information about the Azure account and configuration.\n\nAdditionally, this form validation method did not require POST requests, resulting in a potential CSRF vulnerability.\n\nThis form validation method now requires POST requests and Overall/Administer permissions.\n",
      "plugins": [
        {
          "name": "azure-vm-agents",
          "title": "Azure VM Agents",
          "previous": "0.8.0",
          "fixed": "0.8.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method in Azure VM Agents Plugin allowed users with Overall/Read access to verify a submitted configuration, obtaining limited information about the Azure account and configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a potential CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and Overall/Administer permissions.</p>\n</div>"
    },
    {
      "id": "SECURITY-1331",
      "reporter": "Oleg Nenashev, CloudBees, Inc.",
      "title": "Missing permission check in Azure VM Agents Plugin allowed modifying VM configuration",
      "cve": "CVE-2019-1003036",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in an HTTP endpoint allowed users with Overall/Read access to attach a public IP address to an Azure VM in Azure VM Agents Plugin, making a virtual machine publicly accessible.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability with more limited impact, as the IP address would not be known.\n\nThis form validation method now requires POST requests and Overall/Administer permissions.\n",
      "plugins": [
        {
          "name": "azure-vm-agents",
          "title": "Azure VM Agents",
          "previous": "0.8.0",
          "fixed": "0.8.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in an HTTP endpoint allowed users with Overall/Read access to attach a public IP address to an Azure VM in Azure VM Agents Plugin, making a virtual machine publicly accessible.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability with more limited impact, as the IP address would not be known.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and Overall/Administer permissions.</p>\n</div>"
    },
    {
      "id": "SECURITY-1332",
      "reporter": "Daniel Beck, CloudBees, Inc.",
      "title": "Unprivileged users with Overall/Read access are able to enumerate credential IDs in Azure VM Agents Plugin",
      "cve": "CVE-2019-1003037",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Azure VM Agents Plugin provides a list of applicable credential IDs to allow administrators configuring the plugin to select the one to use.\n\nThis functionality did not check permissions, allowing any user with Overall/Read permission to get a list of valid credentials IDs.\nThose could be used as part of an attack to capture the credentials using another vulnerability.\n\nAn enumeration of credentials IDs in this plugin now requires Overall/Administer permission.\n",
      "plugins": [
        {
          "name": "azure-vm-agents",
          "title": "Azure VM Agents",
          "previous": "0.8.0",
          "fixed": "0.8.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Azure VM Agents Plugin provides a list of applicable credential IDs to allow administrators configuring the plugin to select the one to use.</p>\n</div>\n<div class=\"paragraph\">\n<p>This functionality did not check permissions, allowing any user with Overall/Read permission to get a list of valid credentials IDs.\nThose could be used as part of an attack to capture the credentials using another vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>An enumeration of credentials IDs in this plugin now requires Overall/Administer permission.</p>\n</div>"
    },
    {
      "id": "SECURITY-958",
      "reporter": "Viktor Gazdag",
      "title": "Repository Connector Plugin stored password in plain text",
      "cve": "CVE-2019-1003038",
      "cvss": {
        "severity": "Low",
        "vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Repository Connector Plugin stored the username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.\n\nThe plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.\n",
      "plugins": [
        {
          "name": "repository-connector",
          "title": "Repository Connector",
          "previous": "1.2.4",
          "fixed": "1.2.5"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Repository Connector Plugin stored the username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.</p>\n</div>"
    },
    {
      "id": "SECURITY-1087",
      "reporter": "Viktor Gazdag",
      "title": "AppDynamics Dashboard Plugin stored password in plain text",
      "cve": "CVE-2019-1003039",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "AppDynamics Dashboard Plugin stored username and password in its configuration unencrypted in jobs' `config.xml` files on the Jenkins controller.\nThis password could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.\n\nWhile masked from view using a password form field, the password was transferred in plain text to users when accessing the job configuration form.\n\nAppDynamics Dashboard Plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.\nExisting jobs need to have their configuration saved for existing plain text passwords to be overwritten.\n",
      "plugins": [
        {
          "name": "appdynamics-dashboard",
          "title": "AppDynamics Dashboard",
          "previous": "1.0.14",
          "fixed": "1.0.15"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>AppDynamics Dashboard Plugin stored username and password in its configuration unencrypted in jobs' <code>config.xml</code> files on the Jenkins controller.\nThis password could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>While masked from view using a password form field, the password was transferred in plain text to users when accessing the job configuration form.</p>\n</div>\n<div class=\"paragraph\">\n<p>AppDynamics Dashboard Plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.\nExisting jobs need to have their configuration saved for existing plain text passwords to be overwritten.</p>\n</div>"
    },
    {
      "id": "SECURITY-848",
      "reporter": "Viktor Gazdag",
      "title": "Rabbit-MQ Publisher Plugin stored password in plain text",
      "cve": null,
      "cvss": {
        "severity": "Low",
        "vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Rabbit-MQ Publisher Plugin stored the username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.\n\nThe plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.\n",
      "plugins": [
        {
          "name": "rabbitmq-publisher",
          "title": "Rabbit-MQ Publisher",
          "previous": "1.0",
          "fixed": "1.2.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Rabbit-MQ Publisher Plugin stored the username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin now stores the password encrypted in the configuration files on disk and no longer transfers it to users viewing the configuration form in plain text.</p>\n</div>"
    },
    {
      "id": "SECURITY-970",
      "reporter": "Daniel Beck, CloudBees, Inc.",
      "title": "Missing permission check allowed connecting to RabbitMQ in Rabbit-MQ Publisher Plugin",
      "cve": null,
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method of Rabbit-MQ Publisher Plugin allowed users with Overall/Read access to have Jenkins initiate a RabbitMQ connection to an attacker-specified host and port with an attacker-specified username and password.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and Overall/Administer permissions.\n",
      "plugins": [
        {
          "name": "rabbitmq-publisher",
          "title": "Rabbit-MQ Publisher",
          "previous": "1.0",
          "fixed": "1.2.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method of Rabbit-MQ Publisher Plugin allowed users with Overall/Read access to have Jenkins initiate a RabbitMQ connection to an attacker-specified host and port with an attacker-specified username and password.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and Overall/Administer permissions.</p>\n</div>"
    },
    {
      "id": "SECURITY-1038",
      "reporter": "Viktor Gazdag",
      "title": "OSF Builder Suite For Salesforce Commerce Cloud :: Deploy Plugin stored password in plain text\n",
      "cve": null,
      "cvss": {
        "severity": "Low",
        "vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "OSF Builder Suite For Salesforce Commerce Cloud : : Deploy Plugin stored the HTTP proxy username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.\n\nThe plugin now integrates with plugin:credentials[Credentials Plugin] to store the HTTP proxy credentials.\n",
      "plugins": [
        {
          "name": "osf-builder-suite-for-sfcc-deploy",
          "title": "OSF Builder Suite For Salesforce Commerce Cloud :: Deploy",
          "previous": "1.0.10",
          "fixed": "1.0.11"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>OSF Builder Suite For Salesforce Commerce Cloud : : Deploy Plugin stored the HTTP proxy username and password in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis password could be viewed by users with access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin now integrates with plugin:credentials[Credentials Plugin] to store the HTTP proxy credentials.</p>\n</div>"
    },
    {
      "id": "SECURITY-1088",
      "reporter": "Viktor Gazdag",
      "title": "SSRF and data modification vulnerability due to missing permission check in Bitbar Run-in-Cloud",
      "cve": null,
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a method performing both form validation and saving new configuration in Bitbar Run-in-Cloud Plugin allowed users with Overall/Read permission to have Jenkins connect to an attacker-specified host with attacker-specified credentials, and, if successful, save that as the new configuration for the plugin. This could then potentially result in future builds submitting their data to an unauthorized remote server.\n\nAdditionally, this method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and Overall/Administer permissions.\n",
      "plugins": [
        {
          "name": "testdroid-run-in-cloud",
          "title": "Bitbar Run-in-Cloud",
          "previous": "2.69.1",
          "fixed": "2.70.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a method performing both form validation and saving new configuration in Bitbar Run-in-Cloud Plugin allowed users with Overall/Read permission to have Jenkins connect to an attacker-specified host with attacker-specified credentials, and, if successful, save that as the new configuration for the plugin. This could then potentially result in future builds submitting their data to an unauthorized remote server.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and Overall/Administer permissions.</p>\n</div>"
    }
  ],
  "components": [],
  "index_details_html": null,
  "content_html": null
}