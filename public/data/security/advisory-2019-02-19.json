{
  "title": "Jenkins Security Advisory 2019-02-19",
  "date": "2019-02-19",
  "url": "/security/advisory/2019-02-19/",
  "kind": "plugins",
  "core": null,
  "issues": [
    {
      "id": "SECURITY-1320",
      "reporter": "Daniel Beck, CloudBees, Inc.\n",
      "title": "Sandbox Bypasses in Script Security Plugin",
      "cve": "CVE-2019-1003024",
      "cvss": {
        "severity": "high",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "The previously implemented script security sandbox protections prohibiting the use of unsafe AST transforming annotations such as `@Grab` (link:../2019-01-08/#SECURITY-1266[2019-01-08 fix for SECURITY-1266]) could be circumvented through use of various Groovy language features:\n\n* Use of `AnnotationCollector`\n* Import aliasing\n* Referencing annotation types using their full class name\n\nThis allowed users with Overall/Read permission, or the ability to control Jenkinsfile or sandboxed Pipeline shared library contents in SCM, to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.\n\nUsing `AnnotationCollector` is now newly prohibited in sandboxed scripts such as Pipelines.\nImporting any of the annotations considered unsafe will now result in an error.\nDuring the compilation phase, both simple and full class names of prohibited annotations are rejected for element annotations.\n",
      "plugins": [
        {
          "name": "script-security",
          "title": "Script Security",
          "previous": "1.52",
          "fixed": "1.53"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The previously implemented script security sandbox protections prohibiting the use of unsafe AST transforming annotations such as <code>@Grab</code> (<a href=\"../2019-01-08/#SECURITY-1266\">2019-01-08 fix for SECURITY-1266</a>) could be circumvented through use of various Groovy language features:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Use of <code>AnnotationCollector</code></p>\n</li>\n<li>\n<p>Import aliasing</p>\n</li>\n<li>\n<p>Referencing annotation types using their full class name</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>This allowed users with Overall/Read permission, or the ability to control Jenkinsfile or sandboxed Pipeline shared library contents in SCM, to bypass the sandbox protection and execute arbitrary code on the Jenkins controller.</p>\n</div>\n<div class=\"paragraph\">\n<p>Using <code>AnnotationCollector</code> is now newly prohibited in sandboxed scripts such as Pipelines.\nImporting any of the annotations considered unsafe will now result in an error.\nDuring the compilation phase, both simple and full class names of prohibited annotations are rejected for element annotations.</p>\n</div>"
    },
    {
      "id": "SECURITY-876",
      "reporter": "Thomas de Grenier de Latour\n",
      "title": "CSRF vulnerability and missing permission checks in Cloud Foundry Plugin allowed capturing credentials",
      "cve": "CVE-2019-1003025",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "Cloud Foundry Plugin did not perform permission checks on a method implementing form validation.\nThis allowed users with Overall/Read access to Jenkins to connect to an attacker-specified URL using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins.\n\nAdditionally, this form validation method did not require POST requests, resulting in a cross-site request forgery vulnerability.\n\nThis form validation method now requires POST requests and Overall/Administer (for global configuration) or Item/Configure permissions (for job configuration).\n",
      "plugins": [
        {
          "name": "cloudfoundry",
          "title": "Cloud Foundry",
          "previous": "2.3.1",
          "fixed": "2.3.2"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Cloud Foundry Plugin did not perform permission checks on a method implementing form validation.\nThis allowed users with Overall/Read access to Jenkins to connect to an attacker-specified URL using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a cross-site request forgery vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and Overall/Administer (for global configuration) or Item/Configure permissions (for job configuration).</p>\n</div>"
    },
    {
      "id": "SECURITY-985",
      "reporter": "Viktor Gazdag\n",
      "title": "SSRF vulnerability due to missing permission check in Mattermost Notification Plugin",
      "cve": "CVE-2019-1003026",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method in Mattermost Notification Plugin allowed users with Overall/Read permission to initiate a connection test, connecting to an attacker-specified Mattermost server and room and posting a message.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and performs a permission check.\n",
      "plugins": [
        {
          "name": "mattermost",
          "title": "Mattermost Notification",
          "previous": "2.6.2",
          "fixed": "2.6.3"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method in Mattermost Notification Plugin allowed users with Overall/Read permission to initiate a connection test, connecting to an attacker-specified Mattermost server and room and posting a message.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and performs a permission check.</p>\n</div>"
    },
    {
      "id": "SECURITY-817",
      "reporter": "Thomas de Grenier de Latour\n",
      "title": "SSRF vulnerability due to missing permission check in OctopusDeploy Plugin",
      "cve": "CVE-2019-1003027",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method in OctopusDeploy Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP HEAD request to an attacker-specified URL, returning HTTP response code if successful, or exception error message otherwise.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and performs a permission check.\n",
      "plugins": [
        {
          "name": "octopusdeploy",
          "title": "Octopus Deploy",
          "previous": "1.8.1",
          "fixed": "1.9.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method in OctopusDeploy Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP HEAD request to an attacker-specified URL, returning HTTP response code if successful, or exception error message otherwise.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and performs a permission check.</p>\n</div>"
    },
    {
      "id": "SECURITY-1033",
      "reporter": "Viktor Gazdag\n",
      "title": "SSRF vulnerability due to missing permission check in JMS Messaging Plugin",
      "cve": "CVE-2019-1003028",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method in JMS Messaging Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP request to an attacker-specified URL.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and performs a permission check.\n",
      "plugins": [
        {
          "name": "jms-messaging",
          "title": "JMS Messaging",
          "previous": "1.1.1",
          "fixed": "1.1.2"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method in JMS Messaging Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP request to an attacker-specified URL.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and performs a permission check.</p>\n</div>"
    },
    {
      "id": "SECURITY-937",
      "reporter": "Daniel Beck, CloudBees, Inc.\n",
      "title": "ElectricFlow Plugin globally and unconditionally disabled SSL/TLS certificate validation",
      "cve": null,
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N"
      },
      "description_adoc": "ElectricFlow Plugin unconditionally disabled SSL/TLS certificate validation for the entire Jenkins controller JVM.\n\nElectricFlow Plugin 1.1.5 and newer no longer do that.\n",
      "plugins": [
        {
          "name": "electricflow",
          "title": "CloudBees CD",
          "previous": "1.1.4",
          "fixed": "1.1.5"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>ElectricFlow Plugin unconditionally disabled SSL/TLS certificate validation for the entire Jenkins controller JVM.</p>\n</div>\n<div class=\"paragraph\">\n<p>ElectricFlow Plugin 1.1.5 and newer no longer do that.</p>\n</div>"
    },
    {
      "id": "SECURITY-951",
      "reporter": "Viktor Gazdag\n",
      "title": "Acunetix Plugin stored API key in plain text",
      "cve": null,
      "cvss": {
        "severity": "low",
        "vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Acunetix Plugin stored the API Key in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis key could be viewed by users with access to the Jenkins controller file system.\n\nThe plugin now integrates with plugin:credentials[Credentials Plugin].\n",
      "plugins": [
        {
          "name": "acunetix",
          "title": "Acunetix",
          "previous": "1.0.0",
          "fixed": "1.1.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Acunetix Plugin stored the API Key in its configuration unencrypted in its global configuration file on the Jenkins controller.\nThis key could be viewed by users with access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin now integrates with plugin:credentials[Credentials Plugin].</p>\n</div>"
    },
    {
      "id": "SECURITY-980",
      "reporter": "Viktor Gazdag\n",
      "title": "SSRF vulnerability due to missing permission check in Acunetix Plugin",
      "cve": null,
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "description_adoc": "A missing permission check in a form validation method in Acunetix Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP GET request to an attacker-specified URL, adding a `/me` suffix, returning whether the connection could be established and whether the HTTP response code is 200.\n\nAdditionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.\n\nThis form validation method now requires POST requests and performs a permission check.\n",
      "plugins": [
        {
          "name": "acunetix",
          "title": "Acunetix",
          "previous": "1.0.0",
          "fixed": "1.1.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A missing permission check in a form validation method in Acunetix Plugin allowed users with Overall/Read permission to initiate a connection test, sending an HTTP GET request to an attacker-specified URL, adding a <code>/me</code> suffix, returning whether the connection could be established and whether the HTTP response code is 200.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this form validation method did not require POST requests, resulting in a CSRF vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>This form validation method now requires POST requests and performs a permission check.</p>\n</div>"
    },
    {
      "id": "SECURITY-1070",
      "reporter": "Viktor Gazdag\n",
      "title": "Arxan MAM Publisher Plugin stored password in plain text",
      "cve": null,
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Arxan MAM Publisher Plugin stored the username and password connection credentials in its configuration unencrypted in jobs' `config.xml` files on the Jenkins controller.\nThis key could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.\n\nWhile masked from view using a password form field, the password was transferred in plain text to users when accessing the job configuration form.\n\nThe plugin now integrates with plugin:credentials[Credentials Plugin].\n",
      "plugins": [
        {
          "name": "ease-plugin",
          "title": "Digital.ai App Management Publisher",
          "previous": "1.2.12",
          "fixed": "2.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Arxan MAM Publisher Plugin stored the username and password connection credentials in its configuration unencrypted in jobs' <code>config.xml</code> files on the Jenkins controller.\nThis key could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>While masked from view using a password form field, the password was transferred in plain text to users when accessing the job configuration form.</p>\n</div>\n<div class=\"paragraph\">\n<p>The plugin now integrates with plugin:credentials[Credentials Plugin].</p>\n</div>"
    }
  ],
  "components": [],
  "index_details_html": null,
  "content_html": null
}