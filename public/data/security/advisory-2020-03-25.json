{
  "title": "Jenkins Security Advisory 2020-03-25",
  "date": "2020-03-25",
  "url": "/security/advisory/2020-03-25/",
  "kind": "core and plugins",
  "core": {
    "lts": {
      "previous": "2.204.5",
      "fixed": "2.204.6 or 2.222.1"
    },
    "weekly": {
      "previous": "2.227",
      "fixed": "2.228"
    }
  },
  "issues": [
    {
      "id": "SECURITY-1774",
      "reporter": "Nick Collisson from Gemini Trust Company, LLC.",
      "title": "CSRF protection for any URL could be bypassed",
      "cve": "CVE-2020-2160",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "An extension point in Jenkins allows selectively disabling cross-site request forgery (CSRF) protection for specific URLs.\n\nImplementations of that extension point received a different representation of the URL path than the Stapler web framework uses to dispatch requests in Jenkins 2.227 and earlier, LTS 2.204.5 and earlier.\nThis discrepancy allowed attackers to craft URLs that would bypass the CSRF protection of any target URL.\n\nJenkins now uses the same representation of the URL path to decide whether CSRF protection is needed for a given URL as the Stapler web framework uses.\n\nNOTE: In case of problems, administrators can disable this security fix by setting the system property `hudson.security.csrf.CrumbFilter.UNPROCESSED_PATHINFO` to `true`.\n\nNOTE: As an additional safeguard, semicolon (`;`) characters in the path part of a URL are now banned by default.\nAdministrators can disable this protection by setting the system property `jenkins.security.SuspiciousRequestFilter.allowSemicolonsInPath` to `true`.",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>An extension point in Jenkins allows selectively disabling cross-site request forgery (CSRF) protection for specific URLs.</p>\n</div>\n<div class=\"paragraph\">\n<p>Implementations of that extension point received a different representation of the URL path than the Stapler web framework uses to dispatch requests in Jenkins 2.227 and earlier, LTS 2.204.5 and earlier.\nThis discrepancy allowed attackers to craft URLs that would bypass the CSRF protection of any target URL.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins now uses the same representation of the URL path to decide whether CSRF protection is needed for a given URL as the Stapler web framework uses.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nIn case of problems, administrators can disable this security fix by setting the system property <code>hudson.security.csrf.CrumbFilter.UNPROCESSED_PATHINFO</code> to <code>true</code>.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nAs an additional safeguard, semicolon (<code>;</code>) characters in the path part of a URL are now banned by default.\nAdministrators can disable this protection by setting the system property <code>jenkins.security.SuspiciousRequestFilter.allowSemicolonsInPath</code> to <code>true</code>.\n</td>\n</tr>\n</table>\n</div>"
    },
    {
      "id": "SECURITY-1781",
      "reporter": "Wadeck Follonier, CloudBees, Inc.",
      "title": "Stored XSS vulnerability in label expression validation",
      "cve": "CVE-2020-2161",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "Users with Agent/Configure permissions can define labels for nodes.\nThese labels can be referenced in job configurations to restrict where a job can be run.\n\nIn Jenkins 2.227 and earlier, LTS 2.204.5 and earlier, the form validation for label expressions in job configuration forms did not properly escape label names, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by users able to define node labels.\n\nJenkins now correctly escapes node labels that are shown in form validation on job configuration pages.",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Users with Agent/Configure permissions can define labels for nodes.\nThese labels can be referenced in job configurations to restrict where a job can be run.</p>\n</div>\n<div class=\"paragraph\">\n<p>In Jenkins 2.227 and earlier, LTS 2.204.5 and earlier, the form validation for label expressions in job configuration forms did not properly escape label names, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by users able to define node labels.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins now correctly escapes node labels that are shown in form validation on job configuration pages.</p>\n</div>"
    },
    {
      "id": "SECURITY-1793",
      "reporter": "Phu X. Mai, University of Luxembourg",
      "title": "Stored XSS vulnerability in file parameters",
      "cve": "CVE-2020-2162",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "Jenkins 2.227 and earlier, LTS 2.204.5 and earlier served files uploaded as file parameters to a build without specifying appropriate `Content-Security-Policy` HTTP headers.\nThis resulted in a stored cross-site scripting (XSS) vulnerability exploitable by users with permissions to build a job with file parameters.\n\nJenkins now sets `Content-Security-Policy` HTTP headers when serving files uploaded via a file parameter to the same value as used for files in workspaces and archived artifacts not served using the Resource Root URL.\n\nThe system property `hudson.model.DirectoryBrowserSupport.CSP` can be set to override the value of `Content-Security-Policy` headers sent when serving these files.\nThis is the same system property used for files in workspaces and archived artifacts unless those are served via the link:/doc/upgrade-guide/2.204/#resource-domain-support[Resource Root URL] and works the same way for file parameters.\nSee link:/doc/book/security/configuring-content-security-policy[Configuring Content Security Policy] to learn more.\n\nNOTE: Even when Jenkins is configured to serve files in workspaces and archived artifacts using the Resource Root URL (introduced in Jenkins 2.200), file parameters are not, and therefore still subject to `Content-Security-Policy` restrictions.",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Jenkins 2.227 and earlier, LTS 2.204.5 and earlier served files uploaded as file parameters to a build without specifying appropriate <code>Content-Security-Policy</code> HTTP headers.\nThis resulted in a stored cross-site scripting (XSS) vulnerability exploitable by users with permissions to build a job with file parameters.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins now sets <code>Content-Security-Policy</code> HTTP headers when serving files uploaded via a file parameter to the same value as used for files in workspaces and archived artifacts not served using the Resource Root URL.</p>\n</div>\n<div class=\"paragraph\">\n<p>The system property <code>hudson.model.DirectoryBrowserSupport.CSP</code> can be set to override the value of <code>Content-Security-Policy</code> headers sent when serving these files.\nThis is the same system property used for files in workspaces and archived artifacts unless those are served via the <a href=\"/doc/upgrade-guide/2.204/#resource-domain-support\">Resource Root URL</a> and works the same way for file parameters.\nSee <a href=\"/doc/book/security/configuring-content-security-policy\">Configuring Content Security Policy</a> to learn more.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nEven when Jenkins is configured to serve files in workspaces and archived artifacts using the Resource Root URL (introduced in Jenkins 2.200), file parameters are not, and therefore still subject to <code>Content-Security-Policy</code> restrictions.\n</td>\n</tr>\n</table>\n</div>"
    },
    {
      "id": "SECURITY-1796",
      "reporter": null,
      "title": "Stored XSS vulnerability in list view column headers",
      "cve": "CVE-2020-2163",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "Jenkins 2.227 and earlier, LTS 2.204.5 and earlier processed HTML embedded in list view column headers.\nThis resulted in a stored cross-site scripting (XSS) vulnerability exploitable by users able to control the content of column headers.\n\nThe following plugins are known to allow users to define column headers:\n\n* https://plugins.jenkins.io/warnings-ng/[Warnings NG]\n* https://plugins.jenkins.io/maven-info/[Maven Info]\n* https://plugins.jenkins.io/link-column/[Link Column]\n\nFurther plugins may also allow users to define column headers.\n\nJenkins no longer processes HTML embedded in list view column headers.",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Jenkins 2.227 and earlier, LTS 2.204.5 and earlier processed HTML embedded in list view column headers.\nThis resulted in a stored cross-site scripting (XSS) vulnerability exploitable by users able to control the content of column headers.</p>\n</div>\n<div class=\"paragraph\">\n<p>The following plugins are known to allow users to define column headers:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"https://plugins.jenkins.io/warnings-ng/\">Warnings NG</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/maven-info/\">Maven Info</a></p>\n</li>\n<li>\n<p><a href=\"https://plugins.jenkins.io/link-column/\">Link Column</a></p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>Further plugins may also allow users to define column headers.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins no longer processes HTML embedded in list view column headers.</p>\n</div>"
    },
    {
      "id": "SECURITY-1542 (1)",
      "reporter": "James Holderness, IB Boost, and independently, ethorsa",
      "title": "Passwords stored in plain text by Artifactory Plugin",
      "cve": "CVE-2020-2164",
      "cvss": {
        "severity": "Low",
        "vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Artifactory Plugin 3.5.0 and earlier stores its Artifactory server password in plain text in the global configuration file `org.jfrog.hudson.ArtifactoryBuilder.xml`.\nThis password can be viewed by users with access to the Jenkins controller file system.\n\nArtifactory Plugin 3.6.0 now stores the Artifactory server password encrypted.\nThis change is effective once the global configuration is saved the next time.",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Artifactory Plugin 3.5.0 and earlier stores its Artifactory server password in plain text in the global configuration file <code>org.jfrog.hudson.ArtifactoryBuilder.xml</code>.\nThis password can be viewed by users with access to the Jenkins controller file system.</p>\n</div>\n<div class=\"paragraph\">\n<p>Artifactory Plugin 3.6.0 now stores the Artifactory server password encrypted.\nThis change is effective once the global configuration is saved the next time.</p>\n</div>"
    },
    {
      "id": "SECURITY-1542 (2)",
      "reporter": null,
      "title": "Passwords transmitted in plain text by PLUGIN_NAME",
      "cve": "CVE-2020-2165",
      "cvss": {
        "severity": "Low",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "PLUGIN_NAME stores Artifactory server passwords in its global configuration file `org.jfrog.hudson.ArtifactoryBuilder.xml` on the Jenkins controller as part of its configuration.\n\nWhile the password is stored encrypted on disk since PLUGIN_NAME 3.6.0, it is transmitted in plain text as part of the configuration form by PLUGIN_NAME 3.6.0 and earlier.\nThis can result in exposure of the password through browser extensions, cross-site scripting vulnerabilities, and similar situations.\n\nPLUGIN_NAME 3.6.1 transmits the password in its global configuration encrypted.",
      "plugins": [
        {
          "name": "artifactory",
          "title": "Artifactory",
          "previous": "3.6.0",
          "fixed": "3.6.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Artifactory Plugin stores Artifactory server passwords in its global configuration file <code>org.jfrog.hudson.ArtifactoryBuilder.xml</code> on the Jenkins controller as part of its configuration.</p>\n</div>\n<div class=\"paragraph\">\n<p>While the password is stored encrypted on disk since Artifactory Plugin 3.6.0, it is transmitted in plain text as part of the configuration form by Artifactory Plugin 3.6.0 and earlier.\nThis can result in exposure of the password through browser extensions, cross-site scripting vulnerabilities, and similar situations.</p>\n</div>\n<div class=\"paragraph\">\n<p>Artifactory Plugin 3.6.1 transmits the password in its global configuration encrypted.</p>\n</div>"
    },
    {
      "id": "SECURITY-1741",
      "reporter": null,
      "title": "RCE vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2166",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "PLUGIN_NAME 1.40 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to PLUGIN_NAME's build steps.\n\nPLUGIN_NAME 1.41 configures its YAML parser to only instantiate safe types.",
      "plugins": [
        {
          "name": "pipeline-aws",
          "title": "Pipeline: AWS Steps",
          "previous": "1.40",
          "fixed": "1.41"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Pipeline: AWS Steps Plugin 1.40 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to Pipeline: AWS Steps Plugin&#8217;s build steps.</p>\n</div>\n<div class=\"paragraph\">\n<p>Pipeline: AWS Steps Plugin 1.41 configures its YAML parser to only instantiate safe types.</p>\n</div>"
    },
    {
      "id": "SECURITY-1739",
      "reporter": null,
      "title": "RCE vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2167",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "PLUGIN_NAME 1.0.56 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to PLUGIN_NAME's build step.\n\nPLUGIN_NAME 1.0.57 configures its YAML parser to only instantiate safe types.",
      "plugins": [
        {
          "name": "openshift-pipeline",
          "title": "OpenShift Pipeline",
          "previous": "1.0.56",
          "fixed": "1.0.57"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>OpenShift Pipeline Plugin 1.0.56 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to OpenShift Pipeline Plugin&#8217;s build step.</p>\n</div>\n<div class=\"paragraph\">\n<p>OpenShift Pipeline Plugin 1.0.57 configures its YAML parser to only instantiate safe types.</p>\n</div>"
    },
    {
      "id": "SECURITY-1732",
      "reporter": "Daniel Kalinowski of ISEC.pl Research Team",
      "title": "RCE vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2168",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "PLUGIN_NAME 1.0.1 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to PLUGIN_NAME's build step.\n\nPLUGIN_NAME 1.0.2 configures its YAML parser to only instantiate safe types.",
      "plugins": [
        {
          "name": "azure-acs",
          "title": "Azure Container Service",
          "previous": "1.0.1",
          "fixed": "1.0.2"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Azure Container Service Plugin 1.0.1 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types.\nThis results in a remote code execution (RCE) vulnerability exploitable by users able to provide YAML input files to Azure Container Service Plugin&#8217;s build step.</p>\n</div>\n<div class=\"paragraph\">\n<p>Azure Container Service Plugin 1.0.2 configures its YAML parser to only instantiate safe types.</p>\n</div>"
    },
    {
      "id": "SECURITY-1724",
      "reporter": "Wadeck Follonier, CloudBees, Inc.",
      "title": "Reflected XSS vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2169",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "A form validation HTTP endpoint in PLUGIN_NAME 1.3 and earlier does not escape a query parameter displayed in an error message.\nThis results in a reflected cross-site scripting vulnerability (XSS).\n\nPLUGIN_NAME 1.4 correctly escapes the query parameter.",
      "plugins": [
        {
          "name": "queue-cleanup",
          "title": "Queue cleanup",
          "previous": "1.3",
          "fixed": "1.4"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>A form validation HTTP endpoint in Queue cleanup Plugin 1.3 and earlier does not escape a query parameter displayed in an error message.\nThis results in a reflected cross-site scripting vulnerability (XSS).</p>\n</div>\n<div class=\"paragraph\">\n<p>Queue cleanup Plugin 1.4 correctly escapes the query parameter.</p>\n</div>"
    },
    {
      "id": "SECURITY-1676",
      "reporter": "Daniel Beck, CloudBees, Inc.",
      "title": "Stored XSS vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2170",
      "cvss": {
        "severity": "Medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "PLUGIN_NAME 4.2 and earlier does not escape package names in its displayed table of packages obtained from a remote server.\nThis results in a stored cross-site scripting (XSS) vulnerability exploitable by users able to configure jobs.\n\nPLUGIN_NAME 4.2.1 escapes package names.",
      "plugins": [
        {
          "name": "rapiddeploy-jenkins",
          "title": "RapidDeploy",
          "previous": "4.2",
          "fixed": "4.2.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>RapidDeploy Plugin 4.2 and earlier does not escape package names in its displayed table of packages obtained from a remote server.\nThis results in a stored cross-site scripting (XSS) vulnerability exploitable by users able to configure jobs.</p>\n</div>\n<div class=\"paragraph\">\n<p>RapidDeploy Plugin 4.2.1 escapes package names.</p>\n</div>"
    },
    {
      "id": "SECURITY-1677",
      "reporter": "Daniel Beck, CloudBees, Inc.",
      "title": "XXE vulnerability in PLUGIN_NAME",
      "cve": "CVE-2020-2171",
      "cvss": {
        "severity": "High",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L"
      },
      "description_adoc": "PLUGIN_NAME 4.2 and earlier does not configure its XML parser to prevent XML external entity (XXE) attacks.\n\nThis allows a user able to control the input files for the 'RapidDeploy deployment package build' build or post-build step to have Jenkins parse a crafted file that uses external entities for extraction of secrets from the Jenkins controller, server-side request forgery, or denial-of-service attacks.\n\nPLUGIN_NAME 4.2.1 disables external entity resolution for its XML parser.",
      "plugins": [
        {
          "name": "rapiddeploy-jenkins",
          "title": "RapidDeploy",
          "previous": "4.2",
          "fixed": "4.2.1"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>RapidDeploy Plugin 4.2 and earlier does not configure its XML parser to prevent XML external entity (XXE) attacks.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allows a user able to control the input files for the 'RapidDeploy deployment package build' build or post-build step to have Jenkins parse a crafted file that uses external entities for extraction of secrets from the Jenkins controller, server-side request forgery, or denial-of-service attacks.</p>\n</div>\n<div class=\"paragraph\">\n<p>RapidDeploy Plugin 4.2.1 disables external entity resolution for its XML parser.</p>\n</div>"
    }
  ],
  "components": [],
  "index_details_html": null,
  "content_html": null
}