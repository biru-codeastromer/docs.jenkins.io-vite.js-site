{
  "title": "Jenkins Security Advisory 2018-12-05",
  "date": "2018-12-05",
  "url": "/security/advisory/2018-12-05/",
  "kind": "core",
  "core": {
    "lts": {
      "previous": "2.138.3",
      "fixed": "either 2.138.4 or 2.150.1"
    },
    "weekly": {
      "previous": 2.153,
      "fixed": 2.154
    }
  },
  "issues": [
    {
      "id": "SECURITY-595",
      "reporter": "Daniel Beck, CloudBees, Inc., Jesse Glick, CloudBees, Inc., and Wadeck Follonier, CloudBees, Inc.; and, independently, Apple Information Security; Evan Grant of Tenable; and Orange Tsai(@orange_8361) from DEVCORE\n",
      "title": "Code execution through crafted URLs",
      "cve": "CVE-2018-1000861",
      "cvss": {
        "severity": "critical",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "Jenkins uses the Stapler web framework for HTTP request handling.\nStapler's basic premise is that it uses reflective access to code elements matching its naming conventions.\nFor example, any public method whose name starts with `get`, and that has a `String`, `int`, `long`, or no argument can be invoked this way on objects that are reachable through these means.\nAs these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.\n\nAs of publication of this advisory, we are aware of the following potential attacks in the latest Jenkins releases that do not yet contain this fix:\n\n* Unauthenticated users can invalidate all sessions when running Jenkins with the built-in Winstone-Jetty server.\n* Users with Overall/Read permission could create new user objects in memory.\n* Users with Overall/Read access could manually kick off otherwise periodically executed runs of implementations of `AsyncPeriodicWork`.\n\nThe previous two Jenkins security updates, LTS 2.121.3 and 2.138, as well as Jenkins LTS 2.138.2 and 2.146 included changes that prevent a number of other attacks resulting from this vulnerability.\nThe following is a selection of attacks that were discovered during fix development, and are already being prevented on current releases of Jenkins:\n\n* Up to Jenkins 2.121.2 or 2.137, unauthenticated users could bypass Overall/Read and Job/Read permission checks and access information about builds in jobs with currently running builds, such as their build logs.\n* Up to Jenkins 2.121.2 or 2.137, users with Overall/Read access could bypass Job/Read permission checks for all jobs.\n  It was also possible to enumerate all top-level jobs on a given instance.\n* Up to Jenkins 2.121.2 or 2.137, unauthenticated users could access the environment variables defined for the Jenkins controller itself, or any agent process.\n* Up to Jenkins 2.138.1 or 2.145, users with Overall/Read and Credentials/View permissions could enumerate all credentials stored in the system-wide credentials store, and access the user names and passwords (Credentials Plugin).\n  Up to Jenkins 2.121.2 or 2.138, only the Credentials/View permission was required.\n* Up to Jenkins 2.138.1 or 2.145, unauthenticated users could access the LDAP password from the configuration of the LDAP security realm (LDAP Plugin).\n\nIMPORTANT: The security-related improvements released in Jenkins LTS 2.121.3 and 2.138, as well as Jenkins LTS 2.138.2 and 2.146 are an important part of this fix, and we strongly recommend not disabling them.\nDisabling them enables some of the attacks described above.\nPreviously published documentation has been updated.\n\nGiven the vast potential attack surface, we fully expect other attacks, that we are not currently aware of, to be possible on Jenkins releases that do not have this fix applied.\nThis is reflected in the high score we assigned to this issue, rather than limiting the score to the impact through known issues.\n\nThe Stapler web framework has been extended with a Service Provider Interface (SPI) that allows methods and fields to be excluded from routing.\nThe implementation of that SPI in Jenkins now restricts which getter methods, `do*` action methods, and fields can be invoked reflectively by Stapler.\nFurther details are available in the developer documentation:\n\n* link:/doc/developer/handling-requests/stapler-accessible-type/[Making Object Accessible via Stapler]\n* link:/doc/developer/handling-requests/actions/[Web Methods]\n* link:/doc/developer/security/read-access/[Restricting HTTP Access to AccessControlled Objects]\n\nNOTE: This change is expected to impact existing functionality in some plugins.\nThe most likely effect is that some URLs now return `404 Not Found`.\nIn rare cases, the responses returned might not be `404 Not Found`, but still different than they would have been before this fix was applied.\nWe track known affected plugins and their status in link:https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix[the Jenkins wiki].\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Jenkins uses the Stapler web framework for HTTP request handling.\nStapler&#8217;s basic premise is that it uses reflective access to code elements matching its naming conventions.\nFor example, any public method whose name starts with <code>get</code>, and that has a <code>String</code>, <code>int</code>, <code>long</code>, or no argument can be invoked this way on objects that are reachable through these means.\nAs these naming conventions closely match common code patterns in Java, accessing crafted URLs could invoke methods never intended to be invoked this way.</p>\n</div>\n<div class=\"paragraph\">\n<p>As of publication of this advisory, we are aware of the following potential attacks in the latest Jenkins releases that do not yet contain this fix:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Unauthenticated users can invalidate all sessions when running Jenkins with the built-in Winstone-Jetty server.</p>\n</li>\n<li>\n<p>Users with Overall/Read permission could create new user objects in memory.</p>\n</li>\n<li>\n<p>Users with Overall/Read access could manually kick off otherwise periodically executed runs of implementations of <code>AsyncPeriodicWork</code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>The previous two Jenkins security updates, LTS 2.121.3 and 2.138, as well as Jenkins LTS 2.138.2 and 2.146 included changes that prevent a number of other attacks resulting from this vulnerability.\nThe following is a selection of attacks that were discovered during fix development, and are already being prevented on current releases of Jenkins:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Up to Jenkins 2.121.2 or 2.137, unauthenticated users could bypass Overall/Read and Job/Read permission checks and access information about builds in jobs with currently running builds, such as their build logs.</p>\n</li>\n<li>\n<p>Up to Jenkins 2.121.2 or 2.137, users with Overall/Read access could bypass Job/Read permission checks for all jobs.\nIt was also possible to enumerate all top-level jobs on a given instance.</p>\n</li>\n<li>\n<p>Up to Jenkins 2.121.2 or 2.137, unauthenticated users could access the environment variables defined for the Jenkins controller itself, or any agent process.</p>\n</li>\n<li>\n<p>Up to Jenkins 2.138.1 or 2.145, users with Overall/Read and Credentials/View permissions could enumerate all credentials stored in the system-wide credentials store, and access the user names and passwords (Credentials Plugin).\nUp to Jenkins 2.121.2 or 2.138, only the Credentials/View permission was required.</p>\n</li>\n<li>\n<p>Up to Jenkins 2.138.1 or 2.145, unauthenticated users could access the LDAP password from the configuration of the LDAP security realm (LDAP Plugin).</p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock important\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-important\" title=\"Important\"></i>\n</td>\n<td class=\"content\">\nThe security-related improvements released in Jenkins LTS 2.121.3 and 2.138, as well as Jenkins LTS 2.138.2 and 2.146 are an important part of this fix, and we strongly recommend not disabling them.\nDisabling them enables some of the attacks described above.\nPreviously published documentation has been updated.\n</td>\n</tr>\n</table>\n</div>\n<div class=\"paragraph\">\n<p>Given the vast potential attack surface, we fully expect other attacks, that we are not currently aware of, to be possible on Jenkins releases that do not have this fix applied.\nThis is reflected in the high score we assigned to this issue, rather than limiting the score to the impact through known issues.</p>\n</div>\n<div class=\"paragraph\">\n<p>The Stapler web framework has been extended with a Service Provider Interface (SPI) that allows methods and fields to be excluded from routing.\nThe implementation of that SPI in Jenkins now restricts which getter methods, <code>do*</code> action methods, and fields can be invoked reflectively by Stapler.\nFurther details are available in the developer documentation:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"/doc/developer/handling-requests/stapler-accessible-type/\">Making Object Accessible via Stapler</a></p>\n</li>\n<li>\n<p><a href=\"/doc/developer/handling-requests/actions/\">Web Methods</a></p>\n</li>\n<li>\n<p><a href=\"/doc/developer/security/read-access/\">Restricting HTTP Access to AccessControlled Objects</a></p>\n</li>\n</ul>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nThis change is expected to impact existing functionality in some plugins.\nThe most likely effect is that some URLs now return <code>404 Not Found</code>.\nIn rare cases, the responses returned might not be <code>404 Not Found</code>, but still different than they would have been before this fix was applied.\nWe track known affected plugins and their status in <a href=\"https://wiki.jenkins.io/display/JENKINS/Plugins+affected+by+the+SECURITY-595+fix\">the Jenkins wiki</a>.\n</td>\n</tr>\n</table>\n</div>"
    },
    {
      "id": "SECURITY-1072",
      "reporter": "Nimrod Stoler of CyberArk Labs, and, independently, Evan Grant of Tenable",
      "title": "Forced migration of user records",
      "cve": "CVE-2018-1000863",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L"
      },
      "description_adoc": "The fix for link:../2017-11-08[SECURITY-499] introduced a mechanism that renamed user directories on disk as a user with an unsafe user name (user ID) is loaded.\nInsufficient input validation allowed attackers to rename such user directories even for users with a safe user name by submitting a crafted user name when attempting to log in, even with an invalid password.\nDoing so prevented users from logging in successfully afterwards.\n\nJenkins no longer uses directory names as a reference for user names, making the on-load migration of user records unnecessary.\nInstead, the new file `users/users.xml` is used to map user names to the directories containing the user metadata.\n\nOn the first startup after updating Jenkins to a version containing this fix, existing legacy user directories are migrated.\nFor further advice related to this user record migration, see link:/doc/upgrade-guide/2.138/#SECURITY-1072[the LTS upgrade guide].\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The fix for <a href=\"../2017-11-08\">SECURITY-499</a> introduced a mechanism that renamed user directories on disk as a user with an unsafe user name (user ID) is loaded.\nInsufficient input validation allowed attackers to rename such user directories even for users with a safe user name by submitting a crafted user name when attempting to log in, even with an invalid password.\nDoing so prevented users from logging in successfully afterwards.</p>\n</div>\n<div class=\"paragraph\">\n<p>Jenkins no longer uses directory names as a reference for user names, making the on-load migration of user records unnecessary.\nInstead, the new file <code>users/users.xml</code> is used to map user names to the directories containing the user metadata.</p>\n</div>\n<div class=\"paragraph\">\n<p>On the first startup after updating Jenkins to a version containing this fix, existing legacy user directories are migrated.\nFor further advice related to this user record migration, see <a href=\"/doc/upgrade-guide/2.138/#SECURITY-1072\">the LTS upgrade guide</a>.</p>\n</div>"
    },
    {
      "id": "SECURITY-904",
      "reporter": "Apple Information Security",
      "title": "Workspace browser allowed accessing files outside the workspace",
      "cve": "CVE-2018-1000862",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "The file browser for workspaces, archived artifacts, and `$JENKINS_HOME/userContent/` followed symbolic links to locations outside the directory being browsed.\n\nWhile builds typically have access to the file system outside the workspace allocated by Jenkins, this should not extend to beyond the execution of a build on that agent.\nNotably, the configuration may have been changed to not allow a build to run on a given agent, but the workspace used during the previous execution still exists, and could allow browsing the file system outside the workspace.\n\nNeither browsing through the UI nor downloading directory content as a ZIP file allow accessing directories and files outside the workspace anymore.\n\nIn rare cases, it may be desirable to disable this fix.\nTo do so, set the Java system property `hudson.model.DirectoryBrowserSupport.allowSymlinkEscape` to `true`.\nlink:/doc/book/managing/system-properties/[Learn more about system properties in Jenkins].\n\nNOTE: While the same component allows browsing archived artifacts, this fix does not apply to archived artifacts.\nValid symbolic links are archived as the files and directories they point to on the agent, while invalid symlinks cannot escape the root directory for archived artifacts on the Jenkins controller.\nThis was previously fixed as SECURITY-162 in the link:../2015-02-27/[2015-02-27 security advisory].\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The file browser for workspaces, archived artifacts, and <code>$JENKINS_HOME/userContent/</code> followed symbolic links to locations outside the directory being browsed.</p>\n</div>\n<div class=\"paragraph\">\n<p>While builds typically have access to the file system outside the workspace allocated by Jenkins, this should not extend to beyond the execution of a build on that agent.\nNotably, the configuration may have been changed to not allow a build to run on a given agent, but the workspace used during the previous execution still exists, and could allow browsing the file system outside the workspace.</p>\n</div>\n<div class=\"paragraph\">\n<p>Neither browsing through the UI nor downloading directory content as a ZIP file allow accessing directories and files outside the workspace anymore.</p>\n</div>\n<div class=\"paragraph\">\n<p>In rare cases, it may be desirable to disable this fix.\nTo do so, set the Java system property <code>hudson.model.DirectoryBrowserSupport.allowSymlinkEscape</code> to <code>true</code>.\n<a href=\"/doc/book/managing/system-properties/\">Learn more about system properties in Jenkins</a>.</p>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<i class=\"fa icon-note\" title=\"Note\"></i>\n</td>\n<td class=\"content\">\nWhile the same component allows browsing archived artifacts, this fix does not apply to archived artifacts.\nValid symbolic links are archived as the files and directories they point to on the agent, while invalid symlinks cannot escape the root directory for archived artifacts on the Jenkins controller.\nThis was previously fixed as SECURITY-162 in the <a href=\"../2015-02-27/\">2015-02-27 security advisory</a>.\n</td>\n</tr>\n</table>\n</div>"
    },
    {
      "id": "SECURITY-1193",
      "reporter": "Denis Shvedchenko, Sphere, Inc.",
      "title": "Potential denial of service through cron expression form validation",
      "cve": "CVE-2018-1000864",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "description_adoc": "The form validation for cron expressions (e.g. \"Poll SCM\", \"Build periodically\") could enter infinite loops when cron expressions only matching certain rare dates were entered, blocking request handling threads indefinitely.\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The form validation for cron expressions (e.g. \"Poll SCM\", \"Build periodically\") could enter infinite loops when cron expressions only matching certain rare dates were entered, blocking request handling threads indefinitely.</p>\n</div>"
    }
  ],
  "components": [],
  "index_details_html": null,
  "content_html": null
}