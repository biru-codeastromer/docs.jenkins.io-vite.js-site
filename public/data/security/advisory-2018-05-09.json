{
  "title": "Jenkins Security Advisory 2018-05-09",
  "date": "2018-05-09",
  "url": "/security/advisory/2018-05-09/",
  "kind": "core and plugins",
  "core": {
    "lts": {
      "previous": "2.107.2",
      "fixed": "2.107.3"
    },
    "weekly": {
      "previous": "2.120",
      "fixed": 2.121
    }
  },
  "issues": [
    {
      "id": "SECURITY-771",
      "reporter": "Devin Nusbaum, CloudBees, Inc.",
      "title": "CLI and UI allow non-admin users to enumerate installed plugins",
      "cve": "CVE-2018-1000192",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Users with Overall/Read permission were able use the `list-plugins` CLI command and view the _About Jenkins_ page to list all installed plugins.\n\nUse of the `list-plugins` CLI command and access to the _About Jenkins_ page now require Overall/Administer permission.\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Users with Overall/Read permission were able use the <code>list-plugins</code> CLI command and view the <em>About Jenkins</em> page to list all installed plugins.</p>\n</div>\n<div class=\"paragraph\">\n<p>Use of the <code>list-plugins</code> CLI command and access to the <em>About Jenkins</em> page now require Overall/Administer permission.</p>\n</div>"
    },
    {
      "id": "SECURITY-786",
      "reporter": "Sureshbabu Narvaneni",
      "title": "Users were able to register user names containing control characters",
      "cve": "CVE-2018-1000193",
      "cvss": {
        "severity": "low",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:L"
      },
      "description_adoc": "The built-in Jenkins user database optionally allows user registration.\nThis feature did not properly sanitize user names, allowing registration of user names containing control characters.\n\nThis could be used to confuse administrators (appearing to be a different user) while preventing deletion of such users through the UI.\n\nUser registration in the built-in Jenkins user database now limits user names to those containing alphanumeric, dash, and underscore characters.\nAdministrators can customize this restriction by setting the `hudson.security.HudsonPrivateSecurityRealm.ID_REGEX` system property to a regular expression that will be used instead to determine whether a given user name is valid.\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The built-in Jenkins user database optionally allows user registration.\nThis feature did not properly sanitize user names, allowing registration of user names containing control characters.</p>\n</div>\n<div class=\"paragraph\">\n<p>This could be used to confuse administrators (appearing to be a different user) while preventing deletion of such users through the UI.</p>\n</div>\n<div class=\"paragraph\">\n<p>User registration in the built-in Jenkins user database now limits user names to those containing alphanumeric, dash, and underscore characters.\nAdministrators can customize this restriction by setting the <code>hudson.security.HudsonPrivateSecurityRealm.ID_REGEX</code> system property to a regular expression that will be used instead to determine whether a given user name is valid.</p>\n</div>"
    },
    {
      "id": "SECURITY-788",
      "reporter": "Jesse Glick, CloudBees, Inc. and Kalle Niemitalo, Procomp Solutions Oy",
      "title": "Path traversal vulnerability in agent to controller security subsystem",
      "cve": "CVE-2018-1000194",
      "cvss": {
        "severity": "high",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "description_adoc": "The agent to controller security subsystem ensures that the Jenkins controller is protected from maliciously configured agents.\nlink:/doc/book/security/controller-isolation/#agent-controller-access-control[Learn more.]\n\nA path traversal vulnerability allowed agents to escape whitelisted directories to read and write to files they should not be able to access.\n\nPaths are now normalized before performing the access check to ensure they don't escape allowed directories.\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The agent to controller security subsystem ensures that the Jenkins controller is protected from maliciously configured agents.\n<a href=\"/doc/book/security/controller-isolation/#agent-controller-access-control\">Learn more.</a></p>\n</div>\n<div class=\"paragraph\">\n<p>A path traversal vulnerability allowed agents to escape whitelisted directories to read and write to files they should not be able to access.</p>\n</div>\n<div class=\"paragraph\">\n<p>Paths are now normalized before performing the access check to ensure they don&#8217;t escape allowed directories.</p>\n</div>"
    },
    {
      "id": "SECURITY-794",
      "reporter": "Thomas de Grenier de Latour",
      "title": "Users with Overall/Read permission were able to send GET requests to any URL",
      "cve": "CVE-2018-1000195",
      "cvss": {
        "severity": "low",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:N/A:N"
      },
      "description_adoc": "The form validation code for a tool installer improperly checked permissions, allowing any user with Overall/Read permission to submit a HTTP GET request to any user specified URL, and learn whether the response was successful (HTTP 200) or not.\n\nAdditionally, this functionality did not require POST requests be used, thereby allowing the above to be performed without direct access to Jenkins via Cross-Site Request Forgery attacks.\n\nThe affected form validation code now properly checks permissions, and requires that POST requests be sent to prevent CSRF attacks.\n",
      "plugins": [],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>The form validation code for a tool installer improperly checked permissions, allowing any user with Overall/Read permission to submit a HTTP GET request to any user specified URL, and learn whether the response was successful (HTTP 200) or not.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, this functionality did not require POST requests be used, thereby allowing the above to be performed without direct access to Jenkins via Cross-Site Request Forgery attacks.</p>\n</div>\n<div class=\"paragraph\">\n<p>The affected form validation code now properly checks permissions, and requires that POST requests be sent to prevent CSRF attacks.</p>\n</div>"
    },
    {
      "id": "SECURITY-263",
      "reporter": "Steve Marlowe &lt;smarlowe@cisco.com&gt; of Cisco ASIG",
      "title": "Gitlab Hook Plugin stores and displays GitLab API token in plain text",
      "cve": "CVE-2018-1000196",
      "cvss": {
        "severity": "low",
        "vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N"
      },
      "description_adoc": "Gitlab Hook Plugin does not encrypt the Gitlab API token used to access Gitlab.\nThis can be used by users with Jenkins controller file system access to obtain GitHub credentials.\n\nAdditionally, the Gitlab API token round-trips in its plaintext form, and is displayed in a regular text field to users with Overall/Administer permission.\nThis exposes the API token to people viewing a Jenkins administrator's screen, browser extensions, cross-site scripting vulnerabilities, etc.\n\nAs of publication of this advisory, there is no fix.\n",
      "plugins": [
        {
          "name": "gitlab-hook",
          "title": null,
          "previous": "1.4.2",
          "fixed": null
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Gitlab Hook Plugin does not encrypt the Gitlab API token used to access Gitlab.\nThis can be used by users with Jenkins controller file system access to obtain GitHub credentials.</p>\n</div>\n<div class=\"paragraph\">\n<p>Additionally, the Gitlab API token round-trips in its plaintext form, and is displayed in a regular text field to users with Overall/Administer permission.\nThis exposes the API token to people viewing a Jenkins administrator&#8217;s screen, browser extensions, cross-site scripting vulnerabilities, etc.</p>\n</div>\n<div class=\"paragraph\">\n<p>As of publication of this advisory, there is no fix.</p>\n</div>"
    },
    {
      "id": "SECURITY-670",
      "reporter": "Daniel Beck, CloudBees, Inc.",
      "title": "Black Duck Hub Plugin allowed any user with Overall/Read to read and write its configuration",
      "cve": "CVE-2018-1000197",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L"
      },
      "description_adoc": "Black Duck Hub Plugin did not perform permission checks for its `/descriptorByName/com.blackducksoftware.integration.hub.jenkins.PostBuildHubScan/config.xml` API endpoint.\n\nThis allowed any user with Overall/Read permission to both read and write the plugin configuration XML.\n\nBlack Duck Hub Plugin 3.1.0 and newer requires Overall/Administer permission to access this API.\n",
      "plugins": [
        {
          "name": "blackduck-hub",
          "title": "Black Duck Hub",
          "previous": "3.0.3",
          "fixed": "3.1.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Black Duck Hub Plugin did not perform permission checks for its <code>/descriptorByName/com.blackducksoftware.integration.hub.jenkins.PostBuildHubScan/config.xml</code> API endpoint.</p>\n</div>\n<div class=\"paragraph\">\n<p>This allowed any user with Overall/Read permission to both read and write the plugin configuration XML.</p>\n</div>\n<div class=\"paragraph\">\n<p>Black Duck Hub Plugin 3.1.0 and newer requires Overall/Administer permission to access this API.</p>\n</div>"
    },
    {
      "id": "SECURITY-671",
      "reporter": "James Nord, CloudBees, Inc.",
      "title": "XML External Entity processing vulnerability in Black Duck Hub Plugin",
      "cve": "CVE-2018-1000198",
      "cvss": {
        "severity": "high",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L"
      },
      "description_adoc": "Black Duck Hub Plugin's `/descriptorByName/com.blackducksoftware.integration.hub.jenkins.PostBuildHubScan/config.xml` API endpoint was affected by an XML External Entity (XXE) processing vulnerability.\nThis allowed an attacker with Overall/Read access to have Jenkins parse a maliciously crafted file that uses external entities for extraction of secrets from the Jenkins controller, server-side request forgery, or denial-of-service attacks.\n\nBlack Duck Hub Plugin 4.0.0 and newer no longer processes XML External Entities in XML documents submitted to this endpoint.\n",
      "plugins": [
        {
          "name": "blackduck-hub",
          "title": "Black Duck Hub",
          "previous": "3.1.0",
          "fixed": "4.0.0"
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Black Duck Hub Plugin&#8217;s <code>/descriptorByName/com.blackducksoftware.integration.hub.jenkins.PostBuildHubScan/config.xml</code> API endpoint was affected by an XML External Entity (XXE) processing vulnerability.\nThis allowed an attacker with Overall/Read access to have Jenkins parse a maliciously crafted file that uses external entities for extraction of secrets from the Jenkins controller, server-side request forgery, or denial-of-service attacks.</p>\n</div>\n<div class=\"paragraph\">\n<p>Black Duck Hub Plugin 4.0.0 and newer no longer processes XML External Entities in XML documents submitted to this endpoint.</p>\n</div>"
    },
    {
      "id": "SECURITY-821",
      "reporter": null,
      "title": "Persisted cross-site scripting vulnerability in Groovy Postbuild Plugin",
      "cve": "CVE-2018-1000202",
      "cvss": {
        "severity": "medium",
        "vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "description_adoc": "Groovy Postbuild Plugin did not properly escape badge content from user input, resulting in a stored cross-site scripting vulnerability.\n\nGroovy Postbuild Plugin 2.4 now properly escapes badge content from user input.\n",
      "plugins": [
        {
          "name": "groovy-postbuild",
          "title": "Groovy Postbuild",
          "previous": "2.3.1",
          "fixed": 2.4
        }
      ],
      "components": [],
      "description_html": "<div class=\"paragraph\">\n<p>Groovy Postbuild Plugin did not properly escape badge content from user input, resulting in a stored cross-site scripting vulnerability.</p>\n</div>\n<div class=\"paragraph\">\n<p>Groovy Postbuild Plugin 2.4 now properly escapes badge content from user input.</p>\n</div>"
    }
  ],
  "components": [],
  "index_details_html": null,
  "content_html": null
}